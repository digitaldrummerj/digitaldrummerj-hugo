<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://digitaldrummerj.me/digitaldrummerj-hugo/</id>
    <title>Justin James</title>
    
    <updated>Fri, 19 May 2017 21:49:20 +0200</updated>
    <description>Recent content on Justin James</description>
   
    
		<entry>
      <title>Angular 2 - No  Test Found</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-karma-not-finding-tests/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-karma-not-finding-tests/" rel="alternate" type="text/html" title="Angular 2 - No  Test Found" />
      <updated>Fri, 06 Jan 2017 00:00:00 +0000</updated>
      <published>Fri, 06 Jan 2017 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-karma-not-finding-tests/">&lt;p&gt;Are you trying to run your Angular 2 unit test and the Karma test runner is not finding any tests to execute?  This is exactly what happened to me when I tried to run the unit tests that are included as part of the project that the Angular CLI generates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ng2-karma-not-finding-test/no-test-found.png&#34; alt=&#34;Karma 0 test found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The test runner should have found 3 tests to execute but as your could see above it didn&amp;rsquo;t find any test to execute.  Never having used Karma before, I was unsure what the issue was or where to start troubleshooting.  However, when the Karma test runner executes it started up Chrome and the UI had a Debug button on it so I figured that would be a good first step.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ng2-karma-not-finding-test/karma-browser.png&#34; alt=&#34;Karma Browser&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I was slightly disappointed when I clicked on the Debug button as it just opened up a new tab blank tab.  After a bit of reading, it turns out that you are supposed to open the Chrome Developer Tools on that new blank tab that the Debug button opened.  Once I opened the Chrome Developer Tools, I noticed that the console had the following error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ng2-karma-not-finding-test/karma-debug.png&#34; alt=&#34;Karma Error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Chrome should have run the test.ts file with no problems and it is obviously not a video file.  After a bit of searching, I ran across &lt;a href=&#34;https://github.com/angular/angular-cli/issues/2125&#34;&gt;Angular CLI Issue 2125&lt;/a&gt; that had a potential workaround of adding a mime type to the Karma configuration.  Below is the configuration that you need to add to the karma.conf.js file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mime: {
    &#39;text/x-typescript&#39;: [&#39;ts&#39;, &#39;tsx&#39;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you update the configuration you need to stop Karma and re-run it with the &lt;code&gt;npm run test&lt;/code&gt; command.  It should now find and execute 3 tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ng2-karma-not-finding-test/test-found.png&#34; alt=&#34;Karma Running&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are ready to go test your Angular application.  If you are looking for a good testing reference, check out the &lt;a href=&#34;https://angular.io/docs/ts/latest/guide/testing.html&#34;&gt;Angular Testing Guide&lt;/a&gt;.&lt;/p&gt;
</content>
    <category term="angular" />

        
        </entry>
    
		<entry>
      <title>Angular 2 - Adding Bootstrap Library</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-add-bootstrap/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-add-bootstrap/" rel="alternate" type="text/html" title="Angular 2 - Adding Bootstrap Library" />
      <updated>Thu, 05 Jan 2017 00:00:00 +0000</updated>
      <published>Thu, 05 Jan 2017 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-add-bootstrap/">

&lt;p&gt;Welcome to the continuing series on Getting Started with Angular 2.  In the [previous post][], we created our project using the Angular CLI.  In this post, we will be adding the &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; library to the project to make it easier to style our application.&lt;/p&gt;

&lt;p&gt;To make &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; play nice with Angular we are going to use the &lt;a href=&#34;https://valor-software.com/ng2-bootstrap/&#34;&gt;ng2-bootstrap&lt;/a&gt; library which rewrites the &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; components to be powered by Angular instead of JQuery.  The &lt;a href=&#34;https://valor-software.com/ng2-bootstrap/&#34;&gt;ng2-bootstrap&lt;/a&gt; library also works with both Bootstrap &lt;a href=&#34;https://getbootstrap.com&#34;&gt;v3&lt;/a&gt; and &lt;a href=&#34;http://v4-alpha.getbootstrap.com/&#34;&gt;v4&lt;/a&gt; which means when &lt;a href=&#34;http://v4-alpha.getbootstrap.com/&#34;&gt;v4&lt;/a&gt; is finally released to production you will only have to change the Bootstrap css reference and fix any breaking changes listed in the &lt;a href=&#34;http://v4-alpha.getbootstrap.com/migration/&#34;&gt;v4 migration guide&lt;/a&gt;.  &lt;a href=&#34;http://v4-alpha.getbootstrap.com/&#34;&gt;Bootstrap v4&lt;/a&gt; is not yet recommend for production.  The rest of this article is going to focus on using &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap v3&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install-libraries&#34;&gt;Install Libraries&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need the code from the previous post, you can get it from this &lt;a href=&#34;https://github.com/digitaldrummerj/angular2-getting-started&#34;&gt;Github&lt;/a&gt; repository in the 1-CreateProject branch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing that we need to do is install the ng2-bootstrap and bootstrap-sass libraries as dependencies for the project.  Since we generated our project with the &amp;ndash;style=scss flag, we need to use the bootstrap-sass module to get the sass versions of bootstrap instead of the css versions that are contained in the bootstrap module.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt and navigate to your project directory&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the npm install command below to install ng2-bootstrap and bootstrap-sass&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install bootstrap-sass ng2-bootstrap --save
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;updating-the-angular-cli-configurations&#34;&gt;Updating the Angular CLI Configurations&lt;/h3&gt;

&lt;p&gt;Now we need to tell the Angular CLI about the &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; scss file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your code editor, open up the angular-cli.json file.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Search for the styles node and add the bootstrap file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;styles&amp;quot;: [
      &amp;quot;styles.scss&amp;quot;,
      &amp;quot;../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss&amp;quot;
    ],
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;using-bootstrap&#34;&gt;Using Bootstrap&lt;/h3&gt;

&lt;p&gt;Now that we have told the Angular CLI to include the bootstrap library, we are ready to use it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your code editor, open up the src\app\app.component.html file&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the contents of the file with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;page-header&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;
      {{title}}
    &amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We are now ready run &lt;code&gt;ng serve&lt;/code&gt; and view our home page at &lt;a href=&#34;http://localhost:4200&#34;&gt;http://localhost:4200&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note: If you already have ng serve running, you will need to stop it using ctrl+c and run ng serve again. Anytime you make changes to the angular-cli.json file, they will not take effect until ng serve is restarted.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The page should now look like&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/angular2-add-bootstrap/view-page.png&#34; alt=&#34;Page with Bootstrap&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;At this point you have your Angular 2 project with the &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; library added for styling.  The code for this post is available on &lt;a href=&#34;https://github.com/digitaldrummerj/angular2-getting-started/tree/2-AddBootstrap&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post, we will create a header and footer component that will be used on each page.&lt;/p&gt;
</content>
    <category term="angular" />

        
        </entry>
    
		<entry>
      <title>Angular 2 - Your First Project</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-your-first-project/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-your-first-project/" rel="alternate" type="text/html" title="Angular 2 - Your First Project" />
      <updated>Tue, 03 Jan 2017 00:00:00 +0000</updated>
      <published>Tue, 03 Jan 2017 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-your-first-project/">

&lt;p&gt;Welcome to the series on Getting Started with Angular 2.  Angular 2 was released in September 2016 and and so far I have been enjoying working with it.  I have been using the TypeScript version of Angular 2.  It is has been pretty easy for me so far to pick it up but there have been a few things that have made me scratch me head.  In this series I am going to walk you through creating a simple Angular 2 project that has a header/footer, routing to components/modules, show how to add new components/services, create multiple modules, lock down routes, changing UI configurations based on the environment parameter and adding in the Bootstrap library.  When you are done with the series, you will have a good structure for any project that you want to start.&lt;/p&gt;

&lt;p&gt;In this post we will get everything setup on your machine to do Angular 2 developer and then you will create your Angular 2 project that the rest of the series will build on. We will be using the new Angular CLI to generate the project and several of the features such as components, services, modules, and pipes.&lt;/p&gt;

&lt;h2 id=&#34;installing-the-angular-cli&#34;&gt;Installing The Angular  CLI&lt;/h2&gt;

&lt;p&gt;The Angular CLI is a node based utility which means that we need to first install Node before we can install the npm package angular-cli.  The minimum version of Node that is required for the the Angular CLI requires is Node 4.x but I would suggest installing the latest LTS version from &lt;a href=&#34;https://nodejs.org&#34;&gt;https://nodejs.org&lt;/a&gt; which at the time of this writing is 6.9.1.  To verify the version of node that you have installed, launch a command prompt and run &lt;code&gt;node -v&lt;/code&gt;.  If you need to install Node, download the LTS installer from &lt;a href=&#34;https://nodejs.org&#34;&gt;https://nodejs.org&lt;/a&gt; and accept any prompts that the installer has.&lt;/p&gt;

&lt;p&gt;After you have Node installed, we need to globally install the Angular CLI by running (it will take several minutes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g angular-cli 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;On Linux and Mac, you may need to run the command with sudo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can verify that the Angular CLI installed and the version by running the command below.  As of this writing, the Angular CLI version is 1.0.0-beta.25.5&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ng --version
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If it says that ng is unknown, close the command prompt, re-open it and run ng &amp;ndash;version again.  If you are still having issues, leave a comment below and I will try to help you out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;generating-your-angular-2-project&#34;&gt;Generating Your Angular 2 Project&lt;/h2&gt;

&lt;p&gt;After the Angular CLI is installed you can create a new project with the ng new command.&lt;/p&gt;

&lt;p&gt;The ng new command does several things for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates a directory named after the project name.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Installs the npm dependencies&lt;/li&gt;
&lt;li&gt;Configures Webpack&lt;/li&gt;
&lt;li&gt;Adds a development and production environment configuration file&lt;/li&gt;
&lt;li&gt;Adds a placeholder file for the stylesheet.  By default it is css based but with the &amp;ndash;style=scss parameter that we are using below, it will make it scss based instead.&lt;/li&gt;
&lt;li&gt;Adds a routing file for the app module and import it into the App Module with the &amp;ndash;routing parameter&lt;/li&gt;
&lt;li&gt;Adds unit testing spec files&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;generate-project-steps&#34;&gt;Generate Project Steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to where you want to store your project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On Windows, I store mine at c:\projects and on Mac I stored it at ~/projects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate the new project called angular2-getting-started by running the command below. It will take a few minutes to create and install the dependencies.  I like to use scss instead of css for my styles which the style parameter enables.  The routing parameter sets up the routing that we will use later on when we have more than 1 page to navigate to.&lt;/p&gt;

&lt;p&gt;ng new angular2-getting-started &amp;ndash;style=scss &amp;ndash;routing&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ng2-getting-started/ng-new-output.png&#34; alt=&#34;ng new output&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can view the full documentation for the Angular CLI at &lt;a href=&#34;https://github.com/angular/angular-cli&#34;&gt;https://github.com/angular/angular-cli&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;running-your-angular-2-project&#34;&gt;Running Your Angular 2 Project&lt;/h2&gt;

&lt;p&gt;Now that we have our project generated, we can view it in a web browser by running &lt;code&gt;ng serve&lt;/code&gt; to build it and start up a web server with live reload.  Once &lt;code&gt;ng serve&lt;/code&gt; has completed, open a web browser and navigate to &lt;a href=&#34;http://localhost:4200&#34;&gt;http://localhost:4200/&lt;/a&gt;.  You should be looking a page that says:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ng2-getting-started/app-works.png&#34; alt=&#34;App Works&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;project-layout&#34;&gt;Project layout&lt;/h2&gt;

&lt;p&gt;If you look at the project directory and file layout there are some key pieces of the project that I have highlighted below.&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;medium-12 large-6 columns&#34;&gt;
        &lt;p class=&#34;solidborder&#34;&gt;&lt;img src=&#34;/images/ng2-getting-started/ng-project-layout.png&#34; alt=&#34;Project Layout&#34;&gt;&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;medium-12 large-6 columns&#34;&gt;
        &lt;ul&gt;
            &lt;li&gt;src
                &lt;ul&gt;
                    &lt;li&gt;app -&gt; Your Application Code&lt;/li&gt;
                    &lt;li&gt;asset -&gt; Static Assets (images, non-npm libaries, custom javascript that you created)&lt;/li&gt;
                    &lt;li&gt;environments -&gt; Environment specific files.  Will will look at these in a later post.&lt;/li&gt;
                    &lt;li&gt;styles.scss -&gt; Application wide css.  Any CSS that is not component specific.&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;angular-cli.json -&gt; Configuration for the Angular CLI and Webpack build&lt;/li&gt;
            &lt;li&gt;package.json -&gt; Standard npm configuration file for dependencies, scripts, project info&lt;/li&gt;
        &lt;/ul&gt;   

    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;At this point you have your Angular 2 project created and are ready to start coding.  In the next post, we will add bootstrap for our styling.&lt;/p&gt;
</content>
    <category term="angular" />

        
        </entry>
    
		<entry>
      <title>Angular - WTF Module Won&#39;t Route</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-wtf-my-module-wont-route/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-wtf-my-module-wont-route/" rel="alternate" type="text/html" title="Angular - WTF Module Won&#39;t Route" />
      <updated>Thu, 29 Dec 2016 00:00:00 +0000</updated>
      <published>Thu, 29 Dec 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ng2-wtf-my-module-wont-route/">&lt;p&gt;I have been really enjoying working with Angular 2 over the last few months but the other day I spent well over an hour cursing Angular wondering why my new module would not route.  I didn&amp;rsquo;t have this much trouble when I created my other modules a few weeks before.  However, this time when I navigated to my new module route it kept going to my catch all route.&lt;/p&gt;

&lt;p&gt;I verified that I had spelled everything correctly in the routing configuration and in the browser url.  I verified that I had imported the new module in the app module.  I swore everything was setup correctly.  WTF. What was going on?  What did I miss.&lt;/p&gt;

&lt;p&gt;Turns out that order is important when importing modules in the app.module.ts file especially when you have configured a route to catch any unknown routes and redirect them to a 404 page.  In this scenario, you have to import the AppRoutingModule last.  This was so obvious once I figured it out but never thought about it before then.  I assumed that it would automatically added the child routes into the routing configuations before the catch all route.  Nope it doesn&amp;rsquo;t work that way.  It adds the routes as they are imported. Below shows the broken code and then the fixed code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Original Broken Code: app.module.ts&lt;/strong&gt;
{:.alert-box .alert .radius}&lt;/p&gt;

&lt;p&gt;Notice that the MyNewModule is listed in the @NgModule imports section after the AppRoutingModule.  Note that the order of import statements at the top of the code does not matter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { BrowserModule } from &#39;@angular/platform-browser&#39;;
import { NgModule } from &#39;@angular/core&#39;;
import { FormsModule } from &#39;@angular/forms&#39;;
import { HttpModule } from &#39;@angular/http&#39;;
import { MyNewModule } from &#39;./my-new-module/my-new-module.module&#39;;
import { AppRoutingModule } from &#39;./app-routing.module&#39;;
import { AppComponent } from &#39;./app.component&#39;;

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule,
    AppRoutingModule,
    MyNewModule,
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Fixed Code: app.module.ts&lt;/strong&gt;
{:.alert-box .success .radius}&lt;/p&gt;

&lt;p&gt;Notice that now the MyNewModule is listed in the @NgModule imports section before the AppRoutingModule.  Note that the order of import statements at the top of the code does not matter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { BrowserModule } from &#39;@angular/platform-browser&#39;;
import { NgModule } from &#39;@angular/core&#39;;
import { FormsModule } from &#39;@angular/forms&#39;;
import { HttpModule } from &#39;@angular/http&#39;;
import { MyNewModule } from &#39;./my-new-module/my-new-module.module&#39;;
import { AppRoutingModule } from &#39;./app-routing.module&#39;;
import { AppComponent } from &#39;./app.component&#39;;

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule,
    MyNewModule,
    AppRoutingModule,
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Such a simple solution to a problem that will have you cursing at Angular.  Hopefully in the future they can change this within Angular so that import order doesn&amp;rsquo;t affect routing like this.&lt;/p&gt;

&lt;p&gt;Leave a comment below, if you have run into other issues with Angular 2 that have been making you scratch your head and curse at the framework.&lt;/p&gt;
</content>
    <category term="angular" />

        
        </entry>
    
		<entry>
      <title>Ionic v2 - How to setup on Windows</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-v2-setup-windows/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-v2-setup-windows/" rel="alternate" type="text/html" title="Ionic v2 - How to setup on Windows" />
      <updated>Tue, 01 Nov 2016 00:00:00 +0000</updated>
      <published>Tue, 01 Nov 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-v2-setup-windows/">

&lt;p&gt;In order to work with the Ionic framework version 2 there is a bit of software installs and configuration that needs to happen in order to deploy to devices.  However, many of the guides out there leave out a number of steps that tripped me up when I first started using Ionic.&lt;/p&gt;

&lt;p&gt;This guide will go through all of the steps needed for deploying to an Android device using a Windows machine.  Note that deploying to an iOS device requires a Mac.&lt;/p&gt;

&lt;p&gt;Since I love to automate setup work so that I can easily repeat it, we will be using &lt;a href=&#34;http://www.chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; and &lt;a href=&#34;http://www.boxstarter.org&#34;&gt;Boxstarter&lt;/a&gt; for all of the installs and configurations.&lt;/p&gt;

&lt;h2 id=&#34;software-to-be-installed&#34;&gt;Software to be installed&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/nodejs&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chocolatey.org/packages/gradle&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/jdk8&#34;&gt;JDK8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/android-sdk&#34;&gt;Android SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/AndroidStudio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/GoogleChrome&#34;&gt;Google Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Npm Modules:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cordova&#34;&gt;cordova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/ionic&#34;&gt;ionic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/en-us/features/msft-android-emulator-vs.aspx&#34;&gt;Visual Studio Android Emulator (Hyper-V Based)&lt;/a&gt; or &lt;a href=&#34;https://www.genymotion.com/fun-zone/&#34;&gt;Genymotion (Virtualbox Based)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installing-software&#34;&gt;Installing Software&lt;/h2&gt;

&lt;p&gt;Most of the software installs are automated using Chocolatey which is an awesome Software Package Manager for Windows.  Chocolatey packages take care of downloading, installing, and configuring the software for you so that you do not have to worry about to do it.&lt;/p&gt;

&lt;p&gt;Once you install Chocolatey we will be using a Chocolatey package called Boxstarter to take care of orchestrating the multiple installs with a single command.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To install &lt;a href=&#34;http://www.chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; you need to open an administrative command prompt.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go under the start menu&lt;/li&gt;
&lt;li&gt;Type cmd&lt;/li&gt;
&lt;li&gt;Find the command prompt result and ctrl + shift + click on it&lt;/li&gt;
&lt;li&gt;If prompted, accept the User Access Control request.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command in the command prompt you just opened&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After installing Chocolatey, in the same command prompt run the following command to install &lt;a href=&#34;http://boxstarter.org&#34;&gt;BoxStarter&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install -y BoxStarter
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can now close the administrative command prompt&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we have the infrastructure components installed we are ready to use Boxstarter to run our installation script.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To run the script we need to run the Boxstarter Shell by clicking on the icon on your desktop&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the icon is not on the desktop, then open up a command prompt and type BoxStarterShell.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the Boxstarter Shell run the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-BoxStarterPackage -PackageName  https://gist.githubusercontent.com/digitaldrummerj/3fe2eb057004b6742b89/raw/021eb3bb7e48745c68507904cecde1625ed0eac1/ionic2  -DisableReboots
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;You can view the actual script in the your browser at &lt;a href=&#34;https://gist.githubusercontent.com/digitaldrummerj/3fe2eb057004b6742b89/raw/021eb3bb7e48745c68507904cecde1625ed0eac1/ionic2&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we test if ionic is working or ot, we have one last bit of software to install which is an Android Emulator.  Unless you plan on always deploying to a physical Android device during your development you will need an Android Emulator.&lt;/p&gt;

&lt;p&gt;There are 2 options for the Android emulator:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/vs/msft-android-emulator/&#34;&gt;Visual Studio Android Emulator (Hyper-V Based)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genymotion.com/fun-zone/&#34;&gt;Genymotion (Virtualbox Based)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are using virtualization software on your machine other than Hyper-V be aware that VMWare and Virtualbox does not work when Hyper-V is turned on.  It requires a reboot of Windows to turn Hyper-V off.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Both of the emulator works well but my preference is the &lt;a href=&#34;https://www.visualstudio.com/vs/msft-android-emulator/&#34;&gt;Visual Studio Android Emulator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you install one of the emulators, you will want to download at least 1 device.  Both emulator platforms have Android machines from 4.4.0 to the current release.&lt;/p&gt;

&lt;h2 id=&#34;verify-that-everything-works&#34;&gt;Verify that everything works&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt&lt;/li&gt;
&lt;li&gt;Navigate the directory where you store you development projects (I use c:\projects)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From c:\projects create a new project based on the Tabs template by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic start todo tabs --v2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into c:\projects\todo  (directory was created by the ionic start command)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first test that we are going to run is to make sure that we can test the todo app that we generated in the web browser by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic serve --lab
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This will start up a node based web server and the &amp;ndash;lab will tell it to launch a page that shows what the app would look like on an iOS, Android and Windows phone.  Granted the node based serve is about 80% accurate but good enough to do a majority of our testing.  Ultimately you should test on a device before releasing into the app stores.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we are going to test our Android device setup but first we need to tell ionic that we want to add the Android platform to our todo app by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic platform add android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now that the Android platform has been added we can build our application for the platform by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic build android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The last thing we need to verify is that we can deploy the todo app to the Visual Studio Android Emulator or a Physical device.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the emulator you need to the emulated device before proceeding&lt;/li&gt;
&lt;li&gt;For a physical device, you need to make sure that Windows sees that device and the USB debugging is turned on.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To run on either the emulator or physical device run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic run android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;congratulations&#34;&gt;Congratulations&lt;/h2&gt;

&lt;p&gt;Congratulations, you made it through the guide and have everything setup to create your ionic applications for Android devices.  Unfortunately, if you want to develop for iOS devices you have to do it on a Mac since XCode only runs on a Mac.&lt;/p&gt;
</content>
    <category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Ionic v2 - Setup on OSx</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-v2-setup-osx/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-v2-setup-osx/" rel="alternate" type="text/html" title="Ionic v2 - Setup on OSx" />
      <updated>Tue, 01 Nov 2016 00:00:00 +0000</updated>
      <published>Tue, 01 Nov 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-v2-setup-osx/">

&lt;p&gt;In order to work with the Ionic framework there is a bit of software installs and configuration that needs to happen in order to deploy to devices.  However, many of the guides out there leave out a number of steps that tripped me up when I first started using Ionic.&lt;/p&gt;

&lt;p&gt;This guide will go through all of the steps needed for deploying to an Android and iOS device using a Mac.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TOC
{:toc}&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;general-install-steps&#34;&gt;General Install Steps&lt;/h2&gt;

&lt;p&gt;For the first part of this tutorial, we will be installing everything to do Ionic development and test your application in Google Chrome.  This will be how you will do about 80% of your development since deploying to a device or emulator can be time consuming.&lt;/p&gt;

&lt;h3 id=&#34;node&#34;&gt;Node&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have Node installed, you can skip this section.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the LTS version of node from &lt;a href=&#34;https://www.nodejs.org&#34;&gt;https://www.nodejs.org&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are using Chrome to download, it may tell you that a file with a pkg extension could be harmful to your computer and ask if you want to keep the file.  Make sure to click on the keep button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/node-0.png&#34; alt=&#34;NodeJs LTS download link&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After the download completes, double-click on the pkg file to run it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Continue&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/node-1.png&#34; alt=&#34;NodeJs Install Screen 1&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Continue&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/node-2.png&#34; alt=&#34;NodeJs Install Screen 2&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Agree&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/node-3.png&#34; alt=&#34;NodeJs Install Screen 3&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Install&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/node-4.png&#34; alt=&#34;NodeJs Install Screen 4&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in your login user name and password and click &amp;ldquo;Install Software&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/node-5.png&#34; alt=&#34;NodeJs Install Screen 5&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take a few minutes for NodeJs to install.  Once it does, click the Close button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/node-6.png&#34; alt=&#34;NodeJs Install Screen 6&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a terminal and run the following to verify that node and npm was installed and is available from the command line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;As of the writing of this post, you should have gotten node v6.9.1 and npm 3.10.8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;npm-packages&#34;&gt;Npm Packages&lt;/h3&gt;

&lt;p&gt;Next we need to install 3 npm packages for cordova, gulp and ionic.  At the time of this publication, ionic is on release candidate 0.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a terminal and run the following commands to install the Global NPM packages that we need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install -g cordova ionic
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the terminal run the following to verify that Cordova install correctly. As of the writing of this post, you should get Cordova version 6.4.0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cordova -v
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;When prompted with &amp;ldquo;May Cordova anonymously report usage statistics to improve the tool over time?&amp;rdquo;, answer Yes or No depending on your preference.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the terminal run the following to verify that Ionic install correctly. As of the writing of this post, you should get Ionic version 2.1.4&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic -v
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;google-chrome&#34;&gt;Google Chrome&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have Google Chrome installed, you can skip this section.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Download from  &lt;a href=&#34;https://www.google.com/chrome/browser/desktop/&#34;&gt;https://www.google.com/chrome/browser/desktop/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Double click the dmg file to run it&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag the Google Chrome icon to the Application folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/chrome-1.png&#34; alt=&#34;Google Chrome drag to Application folder&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have Visual Studio Code installed, you can skip to step 5.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download from &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/vscode-download.png&#34; alt=&#34;VS Code Download&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Double-click on the downloaded archive to expand the contents.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag Visual Studio Code.app to the Applications folder, making it available in the Launchpad.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add VS Code to your Dock by right-clicking on the icon and choosing Options, Keep in Dock.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open Visual Studio Code&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the Command Palette (⇧⌘P) and type shell command to find the Shell Command: Install &amp;lsquo;code&amp;rsquo; command in PATH command and double-click on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/vscode-cli.png&#34; alt=&#34;VSCode install code shell command&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the Command Palette (⇧⌘P) and type ext command to find the  Extensions: Install Extensions and double-click on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/vscode-ext.png&#34; alt=&#34;VSCode Open Extensions: Install Extensions&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter Cordova into the search box, find the Cordova Tools from Microsoft, and click the Install button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/vscode-ext-cordova.png&#34; alt=&#34;VSCode Install Cordova Extensions&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the install is completed, the Enable button will be available and will restart Visual Studio Code to make the extension after.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/vscode-ext-enable.png&#34; alt=&#34;VSCode Install Cordova Tools Enable&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Ok on the confirmation prompt&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/vscode-ext-enable-confirm.png&#34; alt=&#34;VSCode Extension Enable Confirmation&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visual Studio Code will restart and the extensions will be enabled&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;validating-general-install-steps&#34;&gt;Validating General Install Steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open terminal&lt;/li&gt;
&lt;li&gt;Navigate the directory where you store you development projects (I use ~/projects)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to generate an ionic v2 project based on the tabs template&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic start todo tabs --v2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into todo  (directory was created by the ionic start command)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We are going to run is to make sure that we can run the todo app in the web browser by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic serve --lab
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This will start up a node based web server and the &amp;ndash;lab will tell it to launch a page that shows what the app would look like on an iOS, Android and Windows phone.  Granted the node based serve is about 80% accurate but good enough to do a majority of our testing.  Ultimately you should test on a device before releasing into the app stores.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, we can create ionic projects and test them in a web browser.  However, you have some more steps to complete in order to deploy to Android and iOS devices.&lt;/p&gt;

&lt;h2 id=&#34;android-setup-steps&#34;&gt;Android Setup Steps&lt;/h2&gt;

&lt;p&gt;In this section, we will be installing everything that is needed in order to deploy your application to an Android device or emulator.  We will be installing JDK8, Android Studio, Android SDK, Gradle, and Genymotion.&lt;/p&gt;

&lt;h3 id=&#34;jdk-8&#34;&gt;JDK 8&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open a web brower and navigate to &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the Java SE Development Kit 8u101 for Mac OSx&lt;/li&gt;
&lt;li&gt;Open the dmg file after it downloads&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Double Click on the icon&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/jdk8-1.png&#34; alt=&#34;JDK8 Install Screen 1&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click continue&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/jdk8-2.png&#34; alt=&#34;JDK8 Install Screen 2&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Install&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/jdk8-3.png&#34; alt=&#34;JDK8 Install Screen 3&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in your login user name and password and click &amp;ldquo;Install Software&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/jdk8-4.png&#34; alt=&#34;JDK8 Install Screen 4&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once the install completes, click the Close button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/jdk8-6.png&#34; alt=&#34;JDK8 Install Screen 6&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a terminal and run the following to verify that you can run java from the command line.  As of this writing it should return javac 1.8.0_101&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;javac -version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up the vi editor and edit your bash profile.  We need to add in the JAVA_HOME environment variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To edit in vi hit &lt;code&gt;i&lt;/code&gt; to enter edit mode and add the text below to the .bash_profile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press the &lt;code&gt;esc&lt;/code&gt; key to exit edit mode&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;code&gt;:&lt;/code&gt; (colon key) to enter command mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;type &lt;code&gt;wq&lt;/code&gt; and press enter to save and exit vi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following to make the change active in your existing session&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test that the $JAVA_HOME variable was set.  If should return /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $JAVA_HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;android-sdk&#34;&gt;Android SDK&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you are using Safari to download files you need to change the preference to &amp;ldquo;open safe files after downloading&amp;rdquo; else Safari will automatically unzip the downloaded file into the Download folder and delete the zip file.  You can change this option by going into the preferences and unchecking the &amp;ldquo;Open safe files after downloading&amp;rdquo; box&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/safari-2-uncheck.png&#34; alt=&#34;uncheck open safe files after downloading&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download from &lt;a href=&#34;https://developer.android.com/studio/index.html#downloads&#34;&gt;https://developer.android.com/studio/index.html#downloads&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Version 24.4.1 as of this writing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-sdk-1.png&#34; alt=&#34;android sdk download&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When prompt for the license agreement, check the &amp;ldquo;I have read and agree withthe above terms and conditions&amp;rdquo; box and then click on the &amp;ldquo;Download Android-SDK_R24.4.1-MACOSX.zip&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-sdk-2.png&#34; alt=&#34;android sdk license agreement&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can close the next dialog as it just tells you there is nothing else to do.  Close it by clicking on the X in the upper right of the dialog&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ &amp;quot;android-sdk-3.png&#34; alt=&#34;nothing else to do dialog&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a terminal&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following to unzip the android sdk to the Development directory that is under your user home directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/Library/Android &amp;amp;&amp;amp; unzip ~/Downloads/android-sdk_r24.4.1-macosx.zip -d ~/Library/Android/sdk &amp;amp;&amp;amp; mv ~/Library/Android/sdk/android-sdk-macosx/* ~/Library/Android/sdk &amp;amp;&amp;amp; rmdir ~/Library/Android/sdk/android-sdk-macosx
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up the vi editor and edit your bash profile.  We need to add in the JAVA_HOME environment variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To edit in vi hit &lt;code&gt;i&lt;/code&gt; to enter edit mode and add the text below to the .bash_profile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=${PATH}:~/Library/Android/sdk/tools:~/Library/Android/sdk/platform-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press the &lt;code&gt;esc&lt;/code&gt; key to exit edit mode&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;code&gt;:&lt;/code&gt; (colon key) to enter command mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;type &lt;code&gt;wq&lt;/code&gt; and press enter to save and exit vi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following to make the change active in your existing session&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test that the $PATH variable was updated.  The command below will return the $PATH variable and the end of the output should include the android-sdk-macosx/tools and android-sdk-macosx/platforms-tools directories.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now that the Android SDK manager is installed we need to install the Android SDKs that we will be using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;y&#39; | android update sdk --filter tools,platform-tools,build-tools-24.0.3,android-19,android-20,android-21,android-22,android-23,android-24,source-24 --all --no-ui
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep an eye on the output from this command.  I had it error downloading one of the packages a time or two and had to run the command a 2nd time.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;android-studio&#34;&gt;Android Studio&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download from &lt;a href=&#34;https://developer.android.com/studio/index.html#downloads&#34;&gt;https://developer.android.com/studio/index.html#downloads&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Version 2.2.2.0 as of this writing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-download.png&#34; alt=&#34;Android Studio Download&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Double-click on the dmg file after it downloads&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag the Android Studio Icon to the Applications folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-1.png&#34; alt=&#34;Android Studio icon drag to Applications&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the Applications folder, launch the Android Studio Application&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-2.png&#34; alt=&#34;Android Studio icon in Applications folder&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the Complete installation dialog, select &amp;ldquo;I do not have a previous version of Studio or I do not want to import my settings&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-3.png&#34; alt=&#34;Complete Installation selection&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-4.png&#34; alt=&#34;Android Studio Setup Wizard Step 1&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select Standard for the setup type&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-5.png&#34; alt=&#34;Android Setup type.  select Standard&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Most of the Android SDK items were installed as part of the Android SDK isntall but Android Studio has a couple of additional ones that it wants to install.  Click the Finish button to install them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-6.png&#34; alt=&#34;Android Studio Verify Settings&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take a few minutes to download the components&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-7.png&#34; alt=&#34;Android Studio download components&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When prompted for the HAXM installation, enter your user name and password then click Ok&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/android-studio-8.png&#34; alt=&#34;HAXM installation user credential prompt&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the install is completed, click the Finish button&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;virtualbox&#34;&gt;Virtualbox&lt;/h3&gt;

&lt;p&gt;In order to run the Genymotion emulator, we need to install Virtualbox.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt; and click on the install link for OSx and the extension package.  Version 5.1.4 as of this writing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-download.png&#34; alt=&#34;Virtualbox Download Page&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the Virtualbox dmg file after it downloads&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Double-click on the Virtualbox Icon&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-1.png&#34; alt=&#34;Virtualbox Icon&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the Continue button to determine if it can install Virtualbox&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-3.png&#34; alt=&#34;Virtualbox Install dialog to see if you can proceed with install&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Continue&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-4.png&#34; alt=&#34;Virtualbox Install Intro&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Install&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-5.png&#34; alt=&#34;Virtualbox Install Space Needed&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in your login user name and password and click &amp;ldquo;Install Software&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-6.png&#34; alt=&#34;Virtualbox Install Username and Password Dialog&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Close&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-8.png&#34; alt=&#34;Virtualbox Install Completed&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that Virtualbox is installed, we need to install the extension pack.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Double click on the extension pack file that you downloaded earlier.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once Virtualbox is launched, it will ask you if you want to install the extension pack.  Click Install&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-ext-1.png&#34; alt=&#34;vritualbox extension pack&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the license agreement comes up, once you get to the bottom of it the &amp;ldquo;I Agree&amp;rdquo; button is enable for you to click it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-ext-2.png&#34; alt=&#34;virtualbox license agreement&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When prompted input your username and password then click Ok&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-ext-3.png&#34; alt=&#34;username and password prompt&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once the install is completed, click the Ok button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/virtualbox-ext-4.png&#34; alt=&#34;virtualbox extension installed&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;genymotion&#34;&gt;Genymotion&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download Genymotion from [&lt;a href=&#34;https://www.genymotion.com/fun-zone/)[https://www.genymotion.com/fun-zone/])&#34;&gt;https://www.genymotion.com/fun-zone/)[https://www.genymotion.com/fun-zone/])&lt;/a&gt;.&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Version 2.7.2 as of this writing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &amp;ldquo;Download Genymotion Personal Edition&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-download.png&#34; alt=&#34;Genymotion Download Genymotion package button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sign in to your Genymotion Account if you have one.  If not, then click on the Create Account button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-download-signin.png&#34; alt=&#34;Genymotion Account signin&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After creating the account and logging in, click on the &amp;ldquo;Download the Mac OSX&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-download-osx.png&#34; alt=&#34;Genymotion download osx&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once Genymotion is downloaded, double click the genymotion-2.8.0.dmg file to launch the installer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag Genymotion and Genymotion Shell to the Applications folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-install-1.png&#34; alt=&#34;Genymotion copy to Applications folder&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After Genymotion is installed, open up the Applicaton folder and launch the Genymotion UI&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-icon.png&#34; alt=&#34;Genymotion Application Icon&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the Usage notice dialog click Accept&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-license-agree.png&#34; alt=&#34;Genymotion Usage Agreement Dialog&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the Yes button on the &amp;ldquo;You don&amp;rsquo;t have any devices dialog&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-add-new.png&#34; alt=&#34;Genymotion Yes to add a new device&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the Sign in button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-sign-in.png&#34; alt=&#34;Genymotion Signin button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Input your account information that you create as part of the Genymotion download.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-add-new-signin.png&#34; alt=&#34;Genymotion add new device accoun sign in&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After you are logged in, from the Android Version drop down select 6.0.0&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-android-version.png&#34; alt=&#34;Android Version Dropdown&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then select a device from the available list and click next.  In this case I selected the &amp;ldquo;Custom Phone - 6.0.0 - 768x1280&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-download-device.png&#34; alt=&#34;Genymotion Available Virtual devices&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take several minutes to download the virtual device.  When the download is done, click the Finish button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/genymotion-app-add-new-finished.png&#34; alt=&#34;Genymotion Virtual device install finished&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;gradle&#34;&gt;Gradle&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you are using Safari to download files and you didn&amp;rsquo;t change the preference to &amp;ldquo;open safe files after downloading&amp;rdquo; when you downloaded the Android SDK, you need to change it before downloading Gradle.  Go into the Safari preferences and uncheck the &amp;ldquo;Open safe files after downloading&amp;rdquo; box.  Without doing this, Safari will automatically unzip the downloaded file into the Download folder and delete the zip file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/safari-2-uncheck.png&#34; alt=&#34;uncheck open safe files after downloading&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the Gradle Binary Only Distribution from &lt;a href=&#34;https://gradle.org/gradle-download/&#34;&gt;https://gradle.org/gradle-download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/gradle-1-download.png&#34; alt=&#34;gradle download&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a terminal&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following to unzip the android sdk to the Development directory that is under your user home directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unzip ~/Downloads/gradle-3.1-bin.zip -d ~/Development
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up the vi editor and edit your bash profile.  We need to add in the GRADLE_HOME environment variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To edit in vi hit &lt;code&gt;i&lt;/code&gt; to enter edit mode and add the text below to the .bash_profile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GRADLE_HOME=~/Development/gradle-3.1/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press the &lt;code&gt;esc&lt;/code&gt; key to exit edit mode&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;code&gt;:&lt;/code&gt; (colon key) to enter command mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;type &lt;code&gt;wq&lt;/code&gt; and press enter to save and exit vi&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following to make the change active in your existing session&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test it by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $GRADLE_HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;verify-android-setup&#34;&gt;Verify Android Setup&lt;/h3&gt;

&lt;p&gt;Next we are going to test our Android device setup.  The first thing we need to do is tell ionic that we want to add the Android platform to our todo application that we created earlier.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a terminal and navigate to ~/projects/todo&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the android platform&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic platform add android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we need to validate that we can build for Android, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ionic build android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing we need to verify is that we can deploy the todo app to the Genymotion Emulator.  Before we can deploy the application, we need to start up Genymotion Device that we want to deploy to.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Once the Genymotion device is started, you can deploy to it by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic run android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to go create your ionic applications for the Android platform.  Continue with the guide to setup for developing for the iOS platform.&lt;/p&gt;

&lt;h2 id=&#34;ios-setup-steps&#34;&gt;iOS Setup Steps&lt;/h2&gt;

&lt;h3 id=&#34;xcode&#34;&gt;XCode&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install Xcode from app store.  This will take awhile since it is ~2 gigs in size.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once install is completed, open xcode and accept the license&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If prompted to install additional required components, click Install&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/xcode-1.png&#34; alt=&#34;xcode additional components prompt&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When prompted for credentials, enter username and password then click Ok&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/xcode-2.png&#34; alt=&#34;credentials for xcode install&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take a few minutes to complete the install&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic2-osx/xcode-3.png&#34; alt=&#34;installing xcode additional components&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ios-simulator&#34;&gt;iOS Simulator&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install the iOS Simulator that Ionic will use.&lt;/p&gt;

&lt;p&gt;npm install -g ios-sim&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may need to start the npm install command with sudo depending on your node setup.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ios-deploy-package&#34;&gt;iOS Deploy Package&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install the iOS Deploy npm package&lt;/p&gt;

&lt;p&gt;npm install -g ios-deploy&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may need to start the npm install command with sudo depending on your node setup.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;verifying-ios-setup&#34;&gt;Verifying iOS Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open terminal&lt;/li&gt;
&lt;li&gt;Navigate the directory where you store you development projects (I use ~/projects)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to generate an ionic v2 project based on the tabs template&lt;/p&gt;

&lt;p&gt;ionic start todo tabs &amp;ndash;v2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into todo  (directory was created by the ionic start command)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first test that we are going to run is to make sure that we can test the todo app that we generated in the web browser by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ionic serve --lab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start up a node based web server and the &amp;ndash;lab will tell it to launch a page that shows what the app would look like on an iOS, Android and Windows phone.  Granted the node based serve is about 80% accurate but good enough to do a majority of our testing.  Ultimately you should test on a device before releasing into the app stores.&lt;/p&gt;

&lt;p&gt;Next we are going to test our iOS device setup.  The first thing we need to do is tell ionic that we want to add the iOS platform to our todo app by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ionic platform add ios
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets up the todo app to be able to be build and deployed to an iOS device.  To validate that we can build for iOS, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ionic build ios
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing we need to verify is that we can deploy the todo app to the iOS Simulator.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;For the iOS Simulator, run the following:&lt;/p&gt;

&lt;p&gt;ionic run ios&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;congratulations&#34;&gt;Congratulations&lt;/h2&gt;

&lt;p&gt;Congratulations, you made it through the guide and have everything setup to create your ionic applications for both Android and Ionic.&lt;/p&gt;
</content>
    <category term="ionic" />

        
        </entry>
    
		<entry>
      <title>ASP.NET Web Api - Setup Generic Response Handler</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-standard-response/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-standard-response/" rel="alternate" type="text/html" title="ASP.NET Web Api - Setup Generic Response Handler" />
      <updated>Thu, 29 Sep 2016 00:00:00 +0000</updated>
      <published>Thu, 29 Sep 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-standard-response/">

&lt;p&gt;Welcome to the continuing series on getting started with ASP.NET Web Api.  In the previous post, we created our ASP.NET Web Api project, created our 1st controller, enabled Windows authentication and configured JSON to be camel cased for our returned C# class.  In this article we will learn how to setup a generic response handler for all of Api calls.  This will allow us to consolidate the logic needed to create a proper response as well as it will allow us to consolidate the exception handling logic.&lt;/p&gt;

&lt;p&gt;Before we get started, if you have not read the previous post, I would suggest that you do so before continuing with this artcle so that you are at the same starting point as I am.&lt;/p&gt;

&lt;p&gt;Our generic response handler will inherit from IHttpActionResult which basically defines an HttpResponseMessage factory.&lt;/p&gt;

&lt;p&gt;Some of the advantages of using IHttpActionResult are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplifies unit testing your controllers&lt;/li&gt;
&lt;li&gt;Moves common logic for creating HTTP responses into separate classes.&lt;/li&gt;
&lt;li&gt;Makes the intent of the controller action clearer, by hiding the low-level details of constructing the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IHttpActionResult contains a single method, ExecuteAsync, which asynchronously creates an HttpResponseMessage instanc that returns back an Http response message.&lt;/p&gt;

&lt;h2 id=&#34;create-the-response-handler&#34;&gt;Create the Response Handler&lt;/h2&gt;

&lt;p&gt;Lets go ahead and start creating our generic reponse handler.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the solution in Visual Studio and within the Api project create a new directory called Helpers.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Within the Helpers directory, create a class called WrapResponseResult.cs.&lt;/li&gt;
&lt;li&gt;To the WrapResponseResult class definition add &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; to the class name, inherit the class from IHttpActionResult, and add the ExecuteAsync method.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class WrapResponseResult&amp;lt;T&amp;gt; : IHttpActionResult
{
    public Task&amp;lt;HttpResponseMessage&amp;gt; ExecuteAsync(CancellationToken cancellationToken)
    {
        throw new NotImplementedException(&amp;quot;Not Implemented Yet.&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have the structure for the WrapResponseResult, we need to add some functionality to it.  The first thing we are going to do within the WrapResponseResult class is to add a variable to hold the value for our function in Func&lt;T&gt; and a 2nd variable  to hold the HttpRequestMessage.  Then we will set the values in the constructor.&lt;/p&gt;

&lt;p&gt;The Func&lt;T&gt; is not something that you see everyday but it is very useful.  Basically it is a placeholder for a function and returns back whatever object we tell it to.  This is very useful when creating generic handlers like we are doing.  The value that we will set the Func&lt;T&gt; variable to when we call our wrapper is the function that will give us the results for the response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;private readonly Func&amp;lt;T&amp;gt; _func;
private readonly HttpRequestMessage _request;

public WrapResponseResult(Func&amp;lt;T&amp;gt; func, HttpRequestMessage request)
{
    _func = func;
    _request = request;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we are going to create a method within the WrapResponseResult class to create our HttpResponseMessage.  This method will take in two parameters: Func&lt;T&gt; and HttpRequestMessage.  Then it will execute the Func&lt;T&gt; to get the result to add to the response.  If the execution is successful it will return back a status message of 200.  If it is not successful, it will check if it is an HttpResponseException and if it is will just rethrow the error since it is already in the format needed.  If it is not an HttpResponseException it will return an HttpResponseMessage with a status code of 500 Internal Server Error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public HttpResponseMessage CreateResponse(Func&amp;lt;T&amp;gt; func, HttpRequestMessage request)
{
    try
    {
        return request.CreateResponse(HttpStatusCode.OK, func());
    }
    catch (HttpResponseException ex)
    {
        throw;
    }
    catch (Exception ex)
    {
        return request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing to do is update the ExecuteAsync method to call the CreateResponse method and pass in our _func and _request variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public Task&amp;lt;HttpResponseMessage&amp;gt; ExecuteAsync(CancellationToken cancellationToken)
{
    return Task.FromResult(CreateResponse(_func, _request));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;completed-wrapresponseresult&#34;&gt;Completed WrapResponseResult&lt;/h2&gt;

&lt;p&gt;The completed WrapResponseResult should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class WrapResponseResult&amp;lt;T&amp;gt; : IHttpActionResult
{
    private readonly Func&amp;lt;T&amp;gt; _func;
    private readonly HttpRequestMessage _request;

    public WrapResponseResult(Func&amp;lt;T&amp;gt; func, HttpRequestMessage request)
    {
        _request = request;
        _func = func;
    }

    public Task&amp;lt;HttpResponseMessage&amp;gt; ExecuteAsync(CancellationToken cancellationToken)
    {
        return Task.FromResult(CreateResponse(_func, _request));
    }

    public HttpResponseMessage CreateResponse(Func&amp;lt;T&amp;gt; func, HttpRequestMessage request)
    {
        try
        {
            return request.CreateResponse(HttpStatusCode.OK, func());
        }
        catch (HttpResponseException ex)
        {
            throw;
        }
        catch (Exception ex)
        {
            return request.CreateResponse(HttpStatusCode.InternalServerError, ex.Message);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-api-method-to-use-generic-response-handler&#34;&gt;Updating Api Method to Use Generic Response Handler&lt;/h2&gt;

&lt;p&gt;Now that we have our WrapResponseResult class created, we need to update our FirstController to return a WrapResponseResult&lt;UserModel&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open up the Controllers\FirstController.cs file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the return type of the Get method to WrapResponseResult&lt;UserModel&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public WrapResponseResult&amp;lt;UserModel&amp;gt; Get()
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the contents of the Get method with the code below.  When the WrapResponseResult ExecuteAsync method is called it will run the code in the () =&amp;gt; { } function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return new WrapResponseResult&amp;lt;UserModel&amp;gt;(() =&amp;gt;
{
    string userName = RequestContext.Principal.Identity.Name;
    return new UserModel { UserName = userName };
}, this.Request);            
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you open a web browser and do a get against the api/First endpoint, you won&amp;rsquo;t see any difference from what is returned back compared to just returning UserModel.  However, the benefit is that you now have a single generic method that will execute the function to get the results, format out the results, and check for errors.  This greatly simplifies the logic and amount of code that you will need to write for all of your Web Api methods.  As well since all of the methods will be using the same response handler, if you ever had to make a change to how the response is generated, all of the logic is contained within one class.&lt;/p&gt;
</content>
    <category term="web api" />

        
        </entry>
    
		<entry>
      <title>ASP.NET Web Api - Setup JSON Camel Cased Fields</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-json-setup/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-json-setup/" rel="alternate" type="text/html" title="ASP.NET Web Api - Setup JSON Camel Cased Fields" />
      <updated>Wed, 31 Aug 2016 00:00:00 +0000</updated>
      <published>Wed, 31 Aug 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-json-setup/">

&lt;p&gt;Welcome to the continuing series on getting started with ASP.NET Web Api.  In the last post, we created our ASP.NET Web Api project, created our 1st controller and enabled Windows authentication.  In this article we will learn how to set the JSON response to convert the .NET pascal cased properties into camel cased properties.&lt;/p&gt;

&lt;p&gt;The naming convention between .NET and JSON is different but we should present our Api users the naming convention that they expect without having to write all kinds of conversion code.  Luckily  this is very easy to accomplish with a few lines of code in ASP.NET Web Api.&lt;/p&gt;

&lt;p&gt;For the naming convention, .NET uses pascal case which means that properties start each word in the property name with a captial letter (e.g. UserName).  JSON uses camel case which means that the property names start with a lowercase letter and then each word after that starts with a captial letter (e.g. userName).  Notice the lower case u in userName and then the uppercase N for the next work.&lt;/p&gt;

&lt;p&gt;Before we get started, if you have not read the first post, I would suggest that you do so before continuing with this artcle so that you are at the same starting point as I am.  It will take you about 10 minutes to complete the 1st article.&lt;/p&gt;

&lt;p&gt;The first thing that we are going to do is create a C# class to hold the information about the logged in user.  Then we will  update the FirstController that we created in the previous post to return the C# class that we created.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-class-to-return-from-web-api-method&#34;&gt;Creating A Class to Return from Web Api Method&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open up the solution that we created in the previous article in Visual Studio&lt;/li&gt;
&lt;li&gt;In the solution explorer, right-click on the Models directory&lt;/li&gt;
&lt;li&gt;Select Add&lt;/li&gt;
&lt;li&gt;Select Class&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/webapi-add-new-model.png&#34; alt=&#34;Add New Class to Model Folder in Visual Studio&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the &amp;ldquo;Add New Item&amp;rdquo; dialog that comes up, name the file UserModel.cs and click ok&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/webapi-add-new-model-filename.png&#34; alt=&#34;Set new model file name to UserModel.cs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the UserModel.cs replace the contents with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Web Api_Demo.Models
{
    public class UserModel
    {
        public string UserName { get; set; }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to update the FirstController Get method to return a UserModel with the UserName set to the logged in user.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the Controllers\FirstController.cs file&lt;/li&gt;
&lt;li&gt;Change the return type of the Get method to &lt;code&gt;UserModel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the return statement to create a new UserModel with the UserName set to RequestContext.Principal.Identity.Name&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public UserModel Get()
{
    return new UserModel { UserName = RequestContext.Principal.Identity.Name };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will also need to add the following using statement so that is knows how to find the UserModel class we created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using Web Api_Demo.Models;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-default-behavior&#34;&gt;Testing Default Behavior&lt;/h2&gt;

&lt;p&gt;We are now ready to test our changes.  However, before we do, we need to make 1 configuration change.   Previously we were able to test in our browser since we didn&amp;rsquo;t care if XML was returned.  This time we do care about the return type as we want it to be JSON.  By default XML is returned when hitting the url directly from the browser since it sends application/xml as the content-type from the browser.  There are two options to fix this: 1.) Use the Google Chrome Extension Postman to do our testing and tell it the type is application/json 2.) Turn off XML as a format option.&lt;/p&gt;

&lt;p&gt;Since we do not need XML to be returned from our Web Api we are going to go with option #2.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the file App_Start\Web ApiConfig.cs&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Register&lt;/code&gt; method, add the following code after the call to config.Routes.MapHttpRoute&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;config.Formatters.Remove(config.Formatters.XmlFormatter);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press F5 to compile our code and start a debug session.  Go to the api/first endpoint and you will notice that the output casing currently matches that of our C# class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;UserName&amp;quot;:&amp;quot;[My User Name]&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our Api updated to return the UserModel C# class that we created, we need to configure the JSON formatter to convert the C# class properties to camel case.&lt;/p&gt;

&lt;h2 id=&#34;updating-web-api-configuration&#34;&gt;Updating Web Api Configuration&lt;/h2&gt;

&lt;p&gt;To fix the casing, we will use the CamelCasePropertyNamesContractResolver that is part of the JSON.NET library that is included with Web Api.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the file App_Start\Web ApiConfig.cs&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Register&lt;/code&gt; method, add the following code after the call to config.Routes.MapHttpRoute&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var json = GlobalConfiguration.Configuration.Formatters.JsonFormatter;
json.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to add the using statement to tell .NET where to find the CamelCasePropertyNamesContractResolver&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using Newtonsoft.Json.Serialization;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now anytime we return back a serialized .NET class, all of the properties will be converted to the standard JSON camel case instead of using the standard .NET Pascal case.&lt;/p&gt;

&lt;p&gt;If you press F5 to compile our code and start a debug session and go to the api/first endpoint, you will notice that the output casing is now camel cased&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;userName&amp;quot;:&amp;quot;[My User Name]&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclussion&#34;&gt;Conclussion&lt;/h2&gt;

&lt;p&gt;In this guide we learned how to convert the JSON output response to be camel cased instead of the .NET pascal case without having to modify all of our .NET classes.  In the next post, we will look at creating a common response format to all of the endpoint return values.&lt;/p&gt;
</content>
    <category term="web api" />

        
        </entry>
    
		<entry>
      <title>ASP.NET Web Api - Getting Started</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-getting-started/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-getting-started/" rel="alternate" type="text/html" title="ASP.NET Web Api - Getting Started" />
      <updated>Tue, 23 Aug 2016 00:00:00 +0000</updated>
      <published>Tue, 23 Aug 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/webapi-getting-started/">

&lt;p&gt;Welcome to the series on getting started with ASP.NET Web Api.  In this article we will create a basic C# Web Api with Windows Integrated Authentication and create our first Web Api endpoint.&lt;/p&gt;

&lt;p&gt;ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is a great platform for building RESTful applications using the .NET Framework.&lt;/p&gt;

&lt;p&gt;In this series we will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a basic C# Web Api with Windows Integrated Authentication&lt;/li&gt;
&lt;li&gt;Setup camel-cased json properties for the response&lt;/li&gt;
&lt;li&gt;Setup A Standard Response&lt;/li&gt;
&lt;li&gt;Solving CORS Issues When Using Credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-a-new-web-api-project&#34;&gt;Create a new Web Api Project&lt;/h2&gt;

&lt;p&gt;To make a C# application with Visual Studio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Visual Studio 2015.  Any edition will work.  I am using Community Edition.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click File -&amp;gt; New -&amp;gt; &lt;em&gt;Project&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/vs-start-project.png&#34; alt=&#34;New Project&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find and select &lt;em&gt;ASP.NET Web Application&lt;/em&gt;, give your application a name and select &lt;em&gt;ok&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On the left side under Installed -&amp;gt; Templates, select Web&lt;/li&gt;
&lt;li&gt;Select &amp;ldquo;ASP.NET Web Application&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Your list of templates may differ but as long as your have the ASP.NET Web Application template listed we are good to go.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Give the project a name (Web Api-Demo in this case)&lt;/li&gt;
&lt;li&gt;Select a location to store the project (c:\projects in this case)&lt;/li&gt;
&lt;li&gt;Uncheck the &amp;ldquo;Application Insights&amp;rdquo; box since we are not going to be using Application Insights&lt;/li&gt;
&lt;li&gt;Click the Ok button
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/vs-new-web-app.png&#34; alt=&#34;New Web Application&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the next screen, we need to select the New ASP.NET Project Options&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select Web Api for the template&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Click on the &amp;ldquo;Change Authentication&amp;rdquo; button

&lt;ul&gt;
&lt;li&gt;Select &amp;ldquo;Windows Authentication&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Click Ok&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Uncheck &amp;ldquo;Host in the cloud&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Click Ok to generate the project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/vs-new-web-app-options.png&#34; alt=&#34;Web App Options&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You project has now been generated and you should see a screen similar to the follow in Visual Studio&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/vs-new-web-app-finished.png&#34; alt=&#34;Generated Project&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you hit F5 your default browser will launch with the Web Api Start Page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/chrome-initial-start-page.png&#34; alt=&#34;Initial Start Page in Chrome&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Web Api project comes with a couple of Web Api Endpoints and a very useful Api documentation page that shows all of the available Api endpoints.    Click on the API link in the top nav bar to view the documentation page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/chrome-api-doc-page.png&#34; alt=&#34;Api Doc Page in Chrome&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-our-first-controller&#34;&gt;Creating Our First Controller&lt;/h2&gt;

&lt;p&gt;Now that we have a working Web Api project, lets add some functionality to it.  The first thing we are going to do is to create a controller that will return back the logged in Windows user using Windows Integrated Authentication.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You should only uses Windows Integrated Authentication within a business and not for a public Api.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;In the Solution Explorer, right-click on the Controllers&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Select Add from the menu the comes up&lt;/li&gt;
&lt;li&gt;Select &amp;ldquo;Controller&amp;hellip;&amp;rdquo; from the list of templates&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/webapi-new-controller.png&#34; alt=&#34;Web Api New Controller&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This will open up the Controller type options.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &amp;ldquo;Web API 2 Controller - Empty&amp;rdquo;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the Add button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/webapi-new-controller-template.png&#34; alt=&#34;Web Api Controller Template Selection&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next you will need to input the file name.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the file name to FirstController&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the Add button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/web-api-getting-started/webapi-new-controller-filename.png&#34; alt=&#34;Web Api Controller File Name&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We now have a blank Web Api Controller that is ready for us to create methods within.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace Web Api_Demo.Controllers
{
    public class FirstController : ApiController
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now going to add a GET method that will return back the logged in user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public string Get()
{
    return RequestContext.Principal.Identity.Name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we test our new controller, we need to make sure that Windows Authentication is enabled and Anonymous Authentication is disabled.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Solution Explorer, select the Solution and press F4 to open the Properties window&lt;/li&gt;
&lt;li&gt;Set &amp;ldquo;Anonymous Authentication&amp;rdquo; to disabled&lt;/li&gt;
&lt;li&gt;Set &amp;ldquo;Windows Integrated&amp;rdquo; to enabled&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;{{&amp;quot;iisexpress-windows-auth.png&#34; alt=&#34;VS Solution Properties Set Dev Server Authentication Options&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we are ready to test our Api.  In Visual Studio, press F5 to start up a debugging session.  This will launch your default web browser.  Once the initial page for Web Api has loaded navigate to the /api/first page  (e.g. &lt;a href=&#34;http://localhost:58842/api/First&#34;&gt;http://localhost:58842/api/First&lt;/a&gt;).  Your port number will be different than mine.&lt;/p&gt;

&lt;p&gt;The response you get back will be an xml document that contains a string with your domain and user name that you are logged in with.  In this case it is [Your Domain]/[Your User Name].  It will look similar to below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;string xmlns=&amp;quot;http://schemas.microsoft.com/2003/10/Serialization/&amp;quot;&amp;gt;[Your Domain]/[Your User Name]&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this guide we learned how to create a basic C# Web Api project that uses Windows Integrated Authentication.  In the next guide, we will learn how to convert the JSON responses to be camel cased instead of following the .NET pascal case convention without having to update all of our .NET class.&lt;/p&gt;
</content>
    <category term="web api" />

        
        </entry>
    
		<entry>
      <title>Running Multiple Version of Node On Windows</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/windows-running-multiple-versions-of-node/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/windows-running-multiple-versions-of-node/" rel="alternate" type="text/html" title="Running Multiple Version of Node On Windows" />
      <updated>Wed, 20 Jul 2016 00:00:00 +0000</updated>
      <published>Wed, 20 Jul 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/windows-running-multiple-versions-of-node/">

&lt;p&gt;I am sure that many of you are in the same situation that I am in with needing a different version of node for different projects and you don&amp;rsquo;t want to have to create a new virtual machine for each project just because of node.  Luckily with &lt;a href=&#34;https://github.com/coreybutler/nvm-windows/&#34;&gt;nvm&lt;/a&gt; you can install multiple versions of Node on the same machine and switch between them with a simple command line call.&lt;/p&gt;

&lt;p&gt;The one downside to having multiple versions of Node installed is that you have to install the global packages for each version of node that you want them available to.  There is no ability to share packages between versions.  This means that it will take a bit more disk space but most node packages are fairly small so this should be a none issue.&lt;/p&gt;

&lt;h2 id=&#34;installing-nvm&#34;&gt;Installing NVM&lt;/h2&gt;

&lt;p&gt;The first thing that we need to do is install NVM.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Uninstall existing version of node since we won&amp;rsquo;t be using it anymore&lt;/li&gt;
&lt;li&gt;Delete any existing nodejs installation directories.  e.g. &amp;ldquo;C:\Program Files\nodejs&amp;rdquo;) that might remain. NVM&amp;rsquo;s generated symlink will not overwrite an existing (even empty) installation directory.&lt;/li&gt;
&lt;li&gt;Delete the npm install directory at C:\Users[Your User]\AppData\Roaming\npm&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are now ready to install nvm.  Download the installer from &lt;a href=&#34;https://github.com/coreybutler/nvm/releases&#34;&gt;https://github.com/coreybutler/nvm/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To upgrade&lt;/strong&gt;, run the new installer. It will safely overwrite the files it needs to update without touching your node.js installations. Make sure you use the same installation and symlink folder. If you originally installed to the default locations, you just need to click &amp;ldquo;next&amp;rdquo; on each window until it finishes.&lt;/p&gt;

&lt;h2 id=&#34;installing-and-picking-a-node-version&#34;&gt;Installing and Picking a node version&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get a the list so you can see what is available&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list available
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pick the one you want to install.  Below we are installing 4.4.5 and 5.10.1.  You can pick any version that you want.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm install 4.4.5
$ nvm install 5.10.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the node version to use.  Note that only 1 node version can be activate at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm use 4.4.5
$ nvm use 5.10.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Reminder!&lt;/strong&gt; Any global npm modules you may have installed are not shared between the various versions of node.js you have installed. Additionally, some npm modules may not be supported in the version of node you&amp;rsquo;re using, so be aware of your environment as you work.&lt;/p&gt;

&lt;h2 id=&#34;installing-packages&#34;&gt;Installing Packages&lt;/h2&gt;

&lt;p&gt;Installing Node packages is the same as you are used to.  Nvm just switches out which version is referenced in your path variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install [package name] [--save or --save-dev]
npm install -g [package name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other-commands&#34;&gt;Other Commands&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;View Default Node Architecture Being Used&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm arch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Change Default Node Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm arch 32
$ nvm arch 64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Install Node Version&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm install 4.4.5
$ nvm install 4.4.5 64
$ nvm install 4.4.5 32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get Installed Versions&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get Available Versions to Install&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list available
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Turn On nvm&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Turn Off nvm&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Set Proxy&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm proxy [url]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remove Proxy&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm proxy none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;View Proxy Setting&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Uninstall Node Version&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm uninstall [version number]
$ nvm uninstall 4.4.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Select Node Version to Use&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The [arch] parameter below is optional&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$ nvm use [version] [arch]
$ nvm use 4.4.5 64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get the Nvm Version&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can easily switch between Node versions and don&amp;rsquo;t have to worry about compatibility with your code not working on your installed Node version.&lt;/p&gt;
</content>
    <category term="nodejs" />

        
        </entry>
    
		<entry>
      <title>Docker - Running Container As a Service</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/docker-running-container-as-service/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/docker-running-container-as-service/" rel="alternate" type="text/html" title="Docker - Running Container As a Service" />
      <updated>Wed, 15 Jun 2016 00:00:00 +0000</updated>
      <published>Wed, 15 Jun 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/docker-running-container-as-service/">

&lt;p&gt;In the &lt;a href=&#34;../docker-windows-mounting-directories/&#34;&gt;previous tutorial&lt;/a&gt; we learned how to mount additional directories within the Docker containers.  In this tutorial we are going to learn how to run a Docker container as a service a.k.a daemon for nginx and mysql.&lt;/p&gt;

&lt;p&gt;To run a Docker container as a daemon, we run it with the -d flag.  This will tell Docker to start up the container in the background and return back to the command prompt.&lt;/p&gt;

&lt;h3 id=&#34;nginx&#34;&gt;nginx&lt;/h3&gt;

&lt;p&gt;The Docker Hub image for run an nginx server, is called nginx.  If you do not already have the nginx image the run command will download it from the Docker hub.  To start the nginx container run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker run -d -p 8000:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;-d: runs container in the background&lt;/li&gt;
&lt;li&gt;-p: set the port to forward to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the nginx container is up and running, we can verify it is running by executing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;To see all of the containers even if they are not running execute add a &lt;code&gt;-a&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To connect to the nginx web page, we need to know the ip address of the docker machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker-machine ip
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;In my case it is 192.168.99.100.  To navigate to the web page, open up a browser and navigate to &lt;a href=&#34;http://192.168.99.100:8000/&#34;&gt;http://192.168.99.100:8000/&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you need to to attach to a shell within the running container, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker attach [container id]  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If docker attach never connects, run docker exec -i -t [container id] /bin/bash
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you need to stop the container, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stop [container id]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify it stopped by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are done with the container and ready to delete it, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rm  [container id]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mysql-sample&#34;&gt;MySQL Sample&lt;/h3&gt;

&lt;p&gt;This example will download the mysql image, create a mysql database and expose it to your local machine to interact with.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_USER=mysql_user -e MYSQL_PASSWORD=mysql_user1 -e MYSQL_DATABASE=mysql_test -p 3306:3306 -d mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ndash;name: is the name to give the container&lt;/li&gt;
&lt;li&gt;-e: sets environment variables&lt;/li&gt;
&lt;li&gt;-d: runs container in the background&lt;/li&gt;
&lt;li&gt;-p: set the port to forward to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the MySql container is up and running we can see that it is running with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;To see all of the containers even if they are not running execute add a &lt;code&gt;-a&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To connect to the MySql database, we need to know the ip address of the docker machine&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker-machine ip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to install MySql Workbench from &lt;a href=&#34;https://www.mysql.com/products/workbench/&#34;&gt;https://www.mysql.com/products/workbench/&lt;/a&gt; to connect to the database to interact with the database.&lt;/p&gt;

&lt;p&gt;If you need to to attach to a shell within the running container, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker attach [container id]  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If docker attach never connects, run docker exec -i -t [container id] /bin/bash
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you need to stop the container, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stop [container id]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify it stopped by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are done with the container and ready to delete it, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rm  [container id]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;WARNING: This will delete any data that you added to the database
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You have learn how to run 2 different types of Docker containers as background containers.  Any Docker container can be run as a background container by using the -d when starting up the container for the first time.&lt;/p&gt;
</content>
    <category term="docker" />

        
        </entry>
    
		<entry>
      <title>Docker - Mounting Windows Directories in Containers</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/docker-windows-mounting-directories/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/docker-windows-mounting-directories/" rel="alternate" type="text/html" title="Docker - Mounting Windows Directories in Containers" />
      <updated>Fri, 03 Jun 2016 00:00:00 +0000</updated>
      <published>Fri, 03 Jun 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/docker-windows-mounting-directories/">

&lt;p&gt;In the &lt;a href=&#34;../docker-on-windows-getting-started/&#34;&gt;previous tutorial&lt;/a&gt; we learned how to install Docker and get our first container running.  In this tutorial we are going to learn how to mount additional directories within our Docker container that are outside of the c:\Users directory.  By default, Docker only mounts the c:\Users directory inside the docker machine and containers.  For myself, I have all of my project files two places: c:\projects and c:\personal.  I didn&amp;rsquo;t want to change my standard configuration just for Docker.  Luckily, it is really easy to mount additional directories.&lt;/p&gt;

&lt;p&gt;To mount additional directories, you need to add the directory as a shared folder within Virtualbox and then enable long file paths and symlinks.  Once the Virtualbox shared folders are setup, you need to mount the directories within the docker machine so that they are available to the containers.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;{{.TableOfContents}}&lt;/p&gt;

&lt;h2 id=&#34;step-1-adding-shared-folders&#34;&gt;Step 1: Adding Shared Folders&lt;/h2&gt;

&lt;p&gt;The first step is to add the directories as Virtualbox shared folders by using  the VBoxManage.exe utility that comes with Virtualbox.  VBoxManage.exe is located in your Virtualbox install directory, which by default is C:\Program Files\Oracle\VirtualBox.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;  To make symlinks works when you start up the docker-machine, you need to run the Docker Quickstart Terminal or Command Line as an administrator.  This is a security limitation of Windows for symlinks.&lt;br /&gt;
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before adding the shared folders, we need to make sure that no docker machines are running.  We are going to check for running docker containers and machines as both a  non-admin and admin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-Admin Checking For Running Machines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Launch the Windows Command Prompt and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any machines comes back with the state of running, you will need to stop the machine.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Before stopping the machine you will want to make sure that your containers are stopped.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      $ docker ps 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For any containers that are returned you can stop them by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ docker stop [Container ID]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once all of the containers are stop, you can stop the docker machine. Replace the &amp;ldquo;[machine name]&amp;rdquo; with you machine name that we returned from the docker-machine ls command.   Typically you will only have 1 machine and it will be named  default&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ docker-machine stop [machine name]           
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Admin Checking For Running Machines&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the Windows Command Prompt as an administrator.

&lt;ul&gt;
&lt;li&gt;Start Menu&lt;/li&gt;
&lt;li&gt;Search for command prompt&lt;/li&gt;
&lt;li&gt;Right-click on the Command Prompt and select Run as Administrator&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To check if any docker machines are running, run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ls
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If any machines comes back with the state running, you will need to stop the machine.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Before stopping the machine you will want to make sure that your containers are stopped.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      $ docker ps 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For any containers that are returned you can stop them by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ docker stop [Container ID]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once all of the containers are stop, you can stop the docker machine. Replace the &amp;ldquo;[machine name]&amp;rdquo; with you machine name that we returned from the docker-machine ls command.   Typically you will only have 1 machine and it will be named  default&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine stop [machine name]           
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are now ready to add in our shared folders.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to the Virtualbox directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd &amp;quot;c:\Program Files\Oracle\Virtualbox&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to add the shared folders.  For your shared folders, replace the projects or personal name in the name and hostpath options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ VBoxManage.exe sharedfolder add default --name &amp;quot;c/projects&amp;quot; --hostpath &amp;quot;\\?\c:\projects&amp;quot; --automount
$ VBoxManage.exe sharedfolder add default --name &amp;quot;c/personal&amp;quot; --hostpath &amp;quot;\\?\c:\personal&amp;quot; --automount
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;The \?\ in the hostpath tells Windows to enable long file paths.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;step-2-allow-long-paths-and-symlinks&#34;&gt;Step 2: Allow Long Paths and Symlinks&lt;/h2&gt;

&lt;p&gt;If you are using node many of the modules will create symlinks which are supported under Virtualbox but you need to make a configuration change to enable them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ VBoxManage.exe setextradata default VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you need to enable symlinks for each of the shared folders.  Replace SharedFolderName with the &amp;ndash;name value that you used when creating the sharedfolder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ VBoxManage.exe setextradata default VBoxInternal2/SharedFoldersEnableSymlinksCreate/c/personal 1

$ VBoxManage.exe setextradata default VBoxInternal2/SharedFoldersEnableSymlinksCreate/c/projects 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-mounting-shared-folders-in-docker&#34;&gt;Step 3: Mounting Shared Folders in Docker&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;  To make symlinks works when you start up the docker-machine, you need to run the Docker Quickstart Terminal as an administrator.  This is a security limitation of Windows for symlinks.  Right-click on the Docker Quickstart Terminal and select Run As Administrator.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately even with auto-mount Docker will only mount the c/Users folder in the docker-machine.  If you want the folders to auto-mount you will need to manually mount them each time you start up the default docker machine.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the Docker Quickstart Terminal as an administrator&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start Menu&lt;/li&gt;
&lt;li&gt;Search for Docker Quickstart Terminal&lt;/li&gt;
&lt;li&gt;Right-click on the Docker Quickstart Terminal and select &amp;ldquo;Run as Administrator&amp;rdquo;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In order to mount the directories we need to ssh into the docker machine&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ssh default
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you have ssh&amp;rsquo;ed into the docker machine run the following commands to mount the shared folders we created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ sudo mkdir --parents /c/projects
  $ sudo mount -t vboxsf c/projects /c/projects/

  $ sudo mkdir --parents /c/personal
  $ sudo mount -t vboxsf c/personal /c/personal/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Within the docker machine you should now be able to see the files and directories in /c/projects and c/personal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /c/projects
$ ls /c/personal
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exit the ssh session&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You are now ready to start up or create your containers&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-4-using-the-shared-folders&#34;&gt;Step 4: Using the Shared Folders&lt;/h2&gt;

&lt;p&gt;Now that the shared folders are mounted in the docker machine to use them from a container -v argument.  The command below will mount the local directory c:\projects (in unix form /c/projects) to /projects within the container.  The -it say run interactively, ubuntu is the image name and bash is the type of interactive shell&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker run -v /c/projects:/projects -it ubuntu bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the container, you can look at the projects directory by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ ls /projects
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to start using the container for your development work.  In the next tutorial we will look at running docker containers in the background for processes like mysql and postgres.&lt;/p&gt;
</content>
    <category term="docker" />

        
        </entry>
    
		<entry>
      <title>Docker - Getting Started On Windows</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/docker-on-windows-getting-started/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/docker-on-windows-getting-started/" rel="alternate" type="text/html" title="Docker - Getting Started On Windows" />
      <updated>Tue, 31 May 2016 00:00:00 +0000</updated>
      <published>Tue, 31 May 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/docker-on-windows-getting-started/">

&lt;p&gt;After seeing a Docker presentation recently I decided to finally figure out how to get Docker working correctly on Windows.  Luckily it worked out of the box fairly well but I did run into issues with Windows file path lengths and proxy issues.  This series of article will documented how I got Docker working and overcame those issues.&lt;/p&gt;

&lt;p&gt;To get started, you will need the docker toolkit.  I followed the instructions on the Docker website to get the Docker Toolkit with Virtualbox installed.  The instructions for Windows are at &lt;a href=&#34;https://docs.docker.com/windows/&#34;&gt;https://docs.docker.com/windows/&lt;/a&gt;.  The instructions also have links to the Linux and Mac instructions.  As I am a Windows user, I can only verify that this tutorial all worked under Windows.&lt;/p&gt;

&lt;p&gt;Once you get the Docker toolkit installed you are probably wondering now what do I do.  On the desktop, it installed a shortcut to the &amp;ldquo;Docker Quickstart Terminal&amp;rdquo;.  This terminal will ensure that you have the base image that Docker uses for Virtualbox on Windows and you can run all of the Docker commands from this terminal.&lt;/p&gt;

&lt;p&gt;The reason that we need Virtualbox is because Windows does not yet natively support Docker containers.  All of the containers run within a Linux virtual machine that Docker is using.&lt;/p&gt;

&lt;p&gt;Below are a few examples to help get you started with usage of Docker.&lt;/p&gt;

&lt;h2 id=&#34;example-1-basic-hello-world&#34;&gt;Example 1: Basic Hello World&lt;/h2&gt;

&lt;p&gt;This will download the hello-world image if it is not already one your machine.  Then is will create a container, run hello-world and finally remove the container (&amp;ndash;rm).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker run --rm  hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-2-nginx&#34;&gt;Example 2: nginx&lt;/h2&gt;

&lt;p&gt;This example will start up an nginx web server.&lt;/p&gt;

&lt;p&gt;When you run the docker run command, it will pull down the nginx image if you do not already have it, the -d will leave the container running in the background, and the -p will set port forwarding of port 8000 to port 80 in the container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker run -d -p 8000:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the nginx container is up and running we can see that it is running with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To connect to the nginx web page, we need to know the ip address of the docker machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker-machine ip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case it is 192.168.99.100.  To navigate to the web page, open up a browser and navigate to &lt;a href=&#34;http://192.168.99.100:8000/&#34;&gt;http://192.168.99.100:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the container is running behind the scenes, to stop the container you need to issues the&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker stop command. 

 docker stop [Container ID from docker ps command]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-3-ubuntu-bash-shell&#34;&gt;Example 3: Ubuntu Bash Shell&lt;/h2&gt;

&lt;p&gt;This example will download the ubuntu docker image and start up an interactive bash shell that will allow you to make changes to the image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker run -it ubuntu bash
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to interact with files on the host system you can do this as long as they are in the c:\Users directory.  Docker auto mounts this directory for you.  In a future post will cover the ins and outs of mounting other directories.
{:.warning}&lt;/p&gt;

&lt;p&gt;Also, in a future post, we will cover how to save the change made to a container to a new image that you can use as the base for future containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;finding-additional-docker-images&#34;&gt;Finding Additional Docker Images&lt;/h2&gt;

&lt;p&gt;So far we have used a few basic images but there are many more Docker images available in the Docker Hub at &lt;a href=&#34;http://hub.docker.com&#34;&gt;http://hub.docker.com&lt;/a&gt;.  The Docker Hub host a number of common containers that you might use for your application such as node, mysql, postgres, couchbase, plus many more.&lt;/p&gt;

&lt;p&gt;Once you find an image that you want to get run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker pull [Image Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to pull only a specific version of any image which is common with the nodejs so that you can get the version of node that you need versus the latest version of node, run the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker pull [image name]:[tag or version]               
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;common-docker-commands&#34;&gt;Common Docker Commands&lt;/h2&gt;

&lt;p&gt;Below is a list of common commands that you will get you started using Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List Docker Images&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get Docker image from Docker Hub&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker pull [image name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get Docker Image from at specific version&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker pull [image name]:[tag or version]               
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update an existing image&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker pull [image name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;list of running containers&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Seeing Existing Containers&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;See last nth Container Created&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker ps -n=1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Will pull last container created.  -n says how many back to pull&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Connect to Existing Container&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker start -i [Container ID]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;-i connects to the standard in/out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Delete image&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker rmi [image id]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It will warn you if you have a container based on the image
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Delete container&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ docker rm [container id]       
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Docker is a powerful tool to have in your arsenal.  Once you get it working on Windows, you will never install services that can run within Docker locally again.  With Docker you can run light-weight containers for services such as mysql, postgres, mongodb, redis, node, plus many more.&lt;/p&gt;

&lt;p&gt;This is the first of several post on using Docker.  In future post we will cover mounting additional directories, saving changes to a container into an image, saving our image to the Docker Hub and creating our own Docker image from scratch.&lt;/p&gt;
</content>
    <category term="docker" />

        
        </entry>
    
		<entry>
      <title>Jekyll Tip: Showing Liquid Code in Code Snippets</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/jekyll-show-liquid-in-code-snippet/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/jekyll-show-liquid-in-code-snippet/" rel="alternate" type="text/html" title="Jekyll Tip: Showing Liquid Code in Code Snippets" />
      <updated>Thu, 26 May 2016 00:00:00 +0000</updated>
      <published>Thu, 26 May 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/jekyll-show-liquid-in-code-snippet/">&lt;p&gt;When blogging with Jekyll there are times when you want to be able to output a code snippet that contains what Jekyll thinks is liquid code.  This especially happens when you are doing Angular tutorials since using the double brackets (&amp;#123;&amp;#123;  &amp;#125;&amp;#125;) for data binding.  Since the code snippets are enclosed in a pre tag, you are not able to html encode the brackets.&lt;/p&gt;

&lt;p&gt;Instead, to include liquid markup in the code snippet you need to surround the code snippet with the raw and endraw tags like so&lt;/p&gt;

&lt;figure class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-liquid&#34; data-lang=&#34;liquid&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;#123;%&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;raw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%&amp;#125;&lt;/span&gt;

    &amp;#123;&amp;#123; Notice the double brackets will be in the output &amp;#125;&amp;#125;

&lt;span class=&#34;p&#34;&gt;&amp;#123;%&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endraw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will output:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-liquid&#34; data-lang=&#34;liquid&#34;&gt;{{ Notice the double brackets are output }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
    <category term="jekyll" /><category term="blogging" />

        
        </entry>
    
		<entry>
      <title>Jekyll Tip: Adding Styling To Html Output</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/styling-jekyll-markdown/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/styling-jekyll-markdown/" rel="alternate" type="text/html" title="Jekyll Tip: Adding Styling To Html Output" />
      <updated>Tue, 24 May 2016 00:00:00 +0000</updated>
      <published>Tue, 24 May 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/styling-jekyll-markdown/">

&lt;p&gt;As I was writing some tutorials recently I wanted to be able to style the html elements that Jekyll outputs with different css classes without having to write the actually html in the markdown.&lt;/p&gt;

&lt;p&gt;For example I wanted to use a blockquote for items to be aware of that has a blue highlight as well as warnings to watch out for that has a red highlight.  Here is the output of the blockquote with the different styles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a normal blockquote.  Without doing anything extra in markdown this is my default blockquote.&lt;/p&gt;

&lt;p&gt;This is a warning blockquote.
{:.warning}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the kramdown markdown parser that Jekyll uses you can easily add these css classes without having to write out the html code.&lt;/p&gt;

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;In order to specify additional attributes to output in the html on the element, you start it with:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{: }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To specify a class it is&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{:.MyClass}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To specify a title attribute it is&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{:title=&amp;#34;My Title&amp;#34;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below are some specific examples.&lt;/p&gt;

&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;markdown&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{:.fake-h2}
This will be styled as a p tag with the css class fake-2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;html output&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fake-h2&amp;#34;&lt;/span&gt;&amp;gt;This will be styled as a p tag with the css class fake-2&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;list&#34;&gt;List&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;markdown&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;* {:.done} done - Completed this
* Not done yet&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;html output&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;done&amp;#34;&lt;/span&gt;&amp;gt;done - Completed this&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;Not done yet&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;blockquotes&#34;&gt;blockquotes&lt;/h2&gt;

&lt;p&gt;With the blockquote you can also optional elements such as a title and id tag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;markdown&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;gt; The npm install command will take several minutes to run depending on internet speed
{:.warning}
{:title=&amp;#34;my title&amp;#34;}
{: #myid }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;html output&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;blockquote&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;warning&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myid&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my title&amp;#34;&lt;/span&gt;&amp;gt;
    The npm install command will take several minutes to run depending on internet speed
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;inline&#34;&gt;inline&lt;/h2&gt;

&lt;p&gt;In the previous examples, we were adding classes to the whole element.  However, there are times where you just want to highlight something within an element or sentence.  For these times, you write the styling the same way as above but have to put it inline with the text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;markdown&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;This *is*{:.underline} some `code`{:#id}{:.class}.
A [link](google.com){:rel=&amp;#39;something&amp;#39;} and some **tools**{:.tools}.

this *is italic*{::}*marked*{:.special} text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;html output&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;This &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;underline&amp;#34;&lt;/span&gt;&amp;gt;is&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt; some &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class highlighter-rouge&amp;#34;&lt;/span&gt;&amp;gt; code&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;code&lt;/span&gt;&amp;gt;.
A &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;something&amp;#34;&lt;/span&gt;&amp;gt;link&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt; and some &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tools&amp;#34;&lt;/span&gt;&amp;gt;tools&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;.&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;this &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt;is italic&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;special&amp;#34;&lt;/span&gt;&amp;gt;marked&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt; text&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With these new tricks you can make you markdown output look even better without having to resort to writing a lot of html within your markdown.&lt;/p&gt;
</content>
    <category term="jekyll" /><category term="blogging" />

        
        </entry>
    
		<entry>
      <title>Add Table of Contents to Markdown</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/adding-toc-to-markdown/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/adding-toc-to-markdown/" rel="alternate" type="text/html" title="Add Table of Contents to Markdown" />
      <updated>Tue, 10 May 2016 00:00:00 +0000</updated>
      <published>Tue, 10 May 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/adding-toc-to-markdown/">

&lt;p&gt;When you are writing tutorials that are broken up by sections it is nice to have a table of contents at the top to help the users navigate.  However, maintaining this by hand is a no go.  Luckily there is a great npm package called doctoc that will look at the headings in your markdown file and generated a table of contents for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents Sample Using This Post&lt;/strong&gt;&lt;/p&gt;

&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;

&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-to-all-files&#34;&gt;Adding to All Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-to-single-file&#34;&gt;Add to Single File&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#examples&#34;&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skipping-files&#34;&gt;Skipping Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#specifying-location-of-the-table-of-contents&#34;&gt;Specifying Location of the Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-the-title-to-the-table-of-contents&#34;&gt;Changing the Title to the Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#changing-max-level-of-headings&#34;&gt;Changing Max Level of Headings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#site-compatibility&#34;&gt;Site Compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-with-jekyll&#34;&gt;Using with Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#running-doctoc-as-a-git-pre-commit&#34;&gt;Running doctoc as a Git pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-info&#34;&gt;More Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;

&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g doctoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-to-all-files&#34;&gt;Adding to All Files&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ doctoc .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-to-single-file&#34;&gt;Add to Single File&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ doctoc /path/to/file [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;examples&#34;&gt;examples&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ doctoc README.md

$ doctoc CONTRIBUTING.MD LICENSE.MD
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;skipping-files&#34;&gt;Skipping Files&lt;/h2&gt;

&lt;p&gt;There is no built-in mechanism out of the box for doctoc to skip certain files from having a table of contents.  However you can add a comment to each file and then use a little bit of command line logic to exclude those files.  Below are examples using Ack and out-of-the-box Windows commands.&lt;/p&gt;

&lt;p&gt;The first step is to add this line of text to the markdown files to skip of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- DOCTOC SKIP --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;a href=&#34;http://beyondgrep.com/&#34;&gt;Ack&lt;/a&gt; which requires Perl&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ack -L &#39;DOCTOC SKIP&#39; | xargs doctoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example using built-in Windows command line options.  If you are not running it in the directory that contains your markdown files that you want a table of contents on then make sure to update the source variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
 setlocal

 set source=.
 set extension=*.md
 set string=&amp;quot;DOCTOC SKIP&amp;quot;

 for /f &amp;quot;tokens=*&amp;quot; %%G in (&#39;dir &amp;quot;%source%\%extension%&amp;quot; /a:-d /b&#39;) do (
   find /c /i %string% &amp;quot;%%G&amp;quot; &amp;gt; NUL || (
   echo &amp;quot;Add TOC to %%G&amp;quot;
   doctoc --github --title &amp;quot;**Table of Contents**&amp;quot; &amp;quot;%%G&amp;quot;
  )
 )

 pause
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;specifying-location-of-the-table-of-contents&#34;&gt;Specifying Location of the Table of Contents&lt;/h2&gt;

&lt;p&gt;By default doctoc will add the table of contents at the top of the file.  You can however indicate where you would like to have it placed with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&amp;gt;
&amp;lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&amp;gt;

&amp;lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;changing-the-title-to-the-table-of-contents&#34;&gt;Changing the Title to the Table of Contents&lt;/h2&gt;

&lt;p&gt;Pass in the &amp;ndash;title option&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doctoc --title &#39;**Contents**&#39; .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;changing-max-level-of-headings&#34;&gt;Changing Max Level of Headings&lt;/h2&gt;

&lt;p&gt;By default it will process 4 levels.  You can change this with the maxlevel option&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doctoc --maxlevel 3 .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;site-compatibility&#34;&gt;Site Compatibility&lt;/h2&gt;

&lt;p&gt;By default doctoc generated github formatted links.  To change use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--bitbucket bitbucket.org
--nodejs    nodejs.org
--github    github.com
--gitlab    gitlab.com
--ghost     ghost.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doctoc README.md --bitbucket
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-with-jekyll&#34;&gt;Using with Jekyll&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;UPDATED 2016-05-10: For Jekyll the recommendation is now to use the kramdown table of contents built-in generator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the kramdown parser that Jekyll uses by default you can easily add in a table of contents.  The one limitation that had stopped me from using it for the pages that I wanted a table of contents is that it gets all headers and not just the ones after he table of contents.  Granted most of the time that table of contents is at the top of the page but I had an objectives section above my table of contents that was being added in the table of contents which I did not want.  However, I was able to work around this issue by using html and CSS instead of markdown for the headers I wanted to exclude.  I would style the div tag just like it was an H1-H6 tag without it actually being a header.&lt;/p&gt;

&lt;p&gt;To use add a table of contents using kramdown on your Jekyll blog, add the follow to your file where you are want your table of contents.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* TOC
{:toc}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Jekyll Kramdown TOC Sample Showing All Headers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TOC
{:toc}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will cause the * TOC to be replaced with the actual table of contents when the jekyll build/serve is run.&lt;/p&gt;

&lt;h2 id=&#34;running-doctoc-as-a-git-pre-commit&#34;&gt;Running doctoc as a Git pre-commit&lt;/h2&gt;

&lt;p&gt;To remember to always update the Table of Contents before committing to you can use a git hook to run your doctoc call before committing any files to Github for your repo.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go into the .git\hooks directory&lt;/li&gt;
&lt;li&gt;Copy the pre-commit.sample to pre-commit with no file extension&lt;/li&gt;
&lt;li&gt;Add your doctoc command to the file and save&lt;/li&gt;
&lt;li&gt;Now the next time you do a git commit the table of contents will automatically updated&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;more-info&#34;&gt;More Info&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/thlorenz/doctoc&#34;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/doctoc&#34;&gt;npm package&lt;/a&gt;&lt;/p&gt;
</content>
    <category term="github" /><category term="markdown" /><category term="blogging" /><category term="npm" />

        
        </entry>
    
		<entry>
      <title>Factory Reset Dell Venue 7 x86 Android Tablet</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/reset-dell-tablet/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/reset-dell-tablet/" rel="alternate" type="text/html" title="Factory Reset Dell Venue 7 x86 Android Tablet" />
      <updated>Wed, 13 Apr 2016 00:00:00 +0000</updated>
      <published>Wed, 13 Apr 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/reset-dell-tablet/">&lt;p&gt;I rarely use my Dell tablet and when I went to use it again I couldn&amp;rsquo;t remember the lock pattern.  No problem I thought I will just reset it but I had since changed or my router and the tablet wasn&amp;rsquo;t able to connect to the Internet.&lt;/p&gt;

&lt;p&gt;So my  only option was to figure out to do a factory reset of the device.  This device does not have a reset button on it.  So off to Google I went.&lt;/p&gt;

&lt;p&gt;So long story short.  After much searching I figured it out.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hold power button down to shutdown the device&lt;/li&gt;
&lt;li&gt;Power on device and immediately hold volume down button.

&lt;ol&gt;
&lt;li&gt;This will bring you to a screen where you can selected DruidBoot or Recovery.  Use could button to navigate  to Recovery option and then press the power button to select it.&lt;/li&gt;
&lt;li&gt;You will then get the Android logo will an exclamation point over it. This is Androids way of saying you don&amp;rsquo;t have a custom recovery.  Hold down the power and press the volume up to get a mini menu.&lt;/li&gt;
&lt;li&gt;Select factory reset from the options.  Use volume buttons to navigate up and down.  Press power once you have factory reset selected.&lt;/li&gt;
&lt;li&gt;On the next screen is a menu that ask are you sure you want to reset.  Use the volume buttons to navigate to the I am sure option.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;It will take several minutes to reset the device and deleted all of the data.  When done it will return you to the initial menu.&lt;/li&gt;
&lt;li&gt;Select the reboot option and when it completes the start up it will walk you through the initial setup agasetup Android.
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Figuring out these instructions was a pain.  I was ready to give up on the tablet being able to be used again and just put it in a drawer to collect dust.  Now I can use the tablet again and it only took a few minutes once I figured out the instructions.&lt;/p&gt;
</content>
    <category term="android" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 14: How To Validate Links and Images</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/jekyll-validating-links-and-images/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/jekyll-validating-links-and-images/" rel="alternate" type="text/html" title="Jekyll Part 14: How To Validate Links and Images" />
      <updated>Mon, 01 Feb 2016 00:00:00 +0000</updated>
      <published>Mon, 01 Feb 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/jekyll-validating-links-and-images/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to go through how you can validate your link and image references.&lt;/p&gt;

&lt;p&gt;As your blog grows and you get more posts, it becomes harder to validate images and links are still valid on older post.  On new post it is pretty easy since you only have one last to look for.  However, this  is a process that can be fully automated so  got don&amp;rsquo;t even have to worry about it anymore.&lt;/p&gt;

&lt;p&gt;Since Jekyll is Ruby based we  are going to use a ruby gem called &lt;a href=&#34;https://github.com/gjtorikian/html-proofer/&#34;&gt;html-proofer&lt;/a&gt;.   Html-proofer is a command line utility that will  run a set of tests to validate your HTML output. These tests check if your image references are legitimate, if they have alt tags, if your internal links are working, and so on. It&amp;rsquo;s intended to be an all-in-one checker for your output.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;You can either install the gem as part of your Gemfile or as another ruby gem.&lt;/p&gt;

&lt;p&gt;Add this line to your Gemfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;html-proofer&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then execute&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or install it yourself, just like any other ruby gems&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; gem install html-proofer 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generating-report&#34;&gt;Generating Report&lt;/h2&gt;

&lt;p&gt;To generate a report open up the command line and run the command the corresponds to how you install html-proofer.&lt;/p&gt;

&lt;h3 id=&#34;gemfile&#34;&gt;Gemfile&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;bundle exec htmlproofer ./_site/ --only-4xx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ruby-gem&#34;&gt;Ruby Gem&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;htmlproofer ./_site/ --only-4xx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The  &amp;ndash;only4xx parameter above tell it to only  reports errors for links that fall within the 4xx status code range.  This would capture not found (404) and not authorized (401) errors but would ignore 500 internal server errors.  The reason to ignore 500 errors is that we don&amp;rsquo;t want validation to fail if their web server is throwing an error  since we are only testing that the link went some place valid.&lt;/p&gt;

&lt;p&gt;You will now get a report of any broken links or image tags.  Since html-proofer is evaluating the Jekyll output,  you may need to look at some of the include or  layout file to fix links.&lt;/p&gt;

&lt;p&gt;Once you get the initial set of issues fixed, you will mainly have to worry about the new updates to your blog.&lt;/p&gt;

&lt;p&gt;Overall, this will help improve the quality of your blog by  ensuring that you fix broken links and images before your users spot them.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Calling Filters in Your Angular Controller</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/angular-calling-filters-in-your-controller/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-calling-filters-in-your-controller/" rel="alternate" type="text/html" title="Calling Filters in Your Angular Controller" />
      <updated>Thu, 28 Jan 2016 00:00:00 +0000</updated>
      <published>Thu, 28 Jan 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-calling-filters-in-your-controller/">&lt;p&gt;Here is a quick tip for how to call a filter from within your Angular controller.  This example assumes that you already know what a filter is and have one created.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Inject $filter into your controller&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module(&#39;sample&#39;).controller(&#39;SampleController&#39;, SampleController);

/* @ngInject */
function SampleController($filter) { 
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call your filter by calling $filter(&amp;ldquo;filter name&amp;rdquo;)(arg1, arg2, arg3).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;So in the view you would call your filter called myFilter on myDateVariable with arguments arg1 and arg2, you would use:&lt;/p&gt;

&lt;p&gt;{{myDateVariable | myfilter : arg1 : &#39;arg2&#39; }}&lt;/p&gt;
        &lt;/li&gt;

&lt;li&gt;&lt;p&gt;To call the same filter from within your controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function SampleController($filter) { 
    var value = $filter(&amp;quot;myFilter&amp;quot;)(myDateVariable, arg1, arg2);
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    <category term="angular" />

        
        </entry>
    
		<entry>
      <title>Angular - Communicating Between Parent And Child Scopes</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/angular-communication-between-parent-and-child-scopes/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-communication-between-parent-and-child-scopes/" rel="alternate" type="text/html" title="Angular - Communicating Between Parent And Child Scopes" />
      <updated>Mon, 25 Jan 2016 00:00:00 +0000</updated>
      <published>Mon, 25 Jan 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-communication-between-parent-and-child-scopes/">&lt;p&gt;Here is a quick tip in Angular on how to communicate between parent and child scopes.&lt;/p&gt;

&lt;p&gt;If you have a need to send notification of an event from a parent scope to a child scope, you use $scope.$broadcast to send the event.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.$broadcast(&amp;quot;parent event name&amp;quot;, dataTo Send);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you then need to send notification of an event from the child scope back to the parent scope you use $scope.$emit&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.$emit(&amp;quot;child event name&amp;quot;, dataTo Send);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To listen to the events regardless of if it sent from the parent or child scope, you use $scope.$on.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.$on(&amp;quot;parent event name&amp;quot;, function(){
});

$scope.$on(&amp;quot;child event name&amp;quot;, function(){
});
&lt;/code&gt;&lt;/pre&gt;
</content>
    <category term="angular" />

        
        </entry>
    
		<entry>
      <title>Angular In Action Book Review</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/angular-in-action-book-review/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-in-action-book-review/" rel="alternate" type="text/html" title="Angular In Action Book Review" />
      <updated>Thu, 21 Jan 2016 00:00:00 +0000</updated>
      <published>Thu, 21 Jan 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-in-action-book-review/">&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;/images/bookreviews/angular_in_action_cover.jpg&#34;&gt; At the &lt;a href=&#34;http://holidayjs.com&#34;&gt;HolidayJs&lt;/a&gt; event I won a book and I picked a copy of &lt;a href=&#34;https://www.manning.com/books/angularjs-in-action&#34;&gt;Angular In Action&lt;/a&gt; by &lt;a href=&#34;http://onehungrymind.com/&#34;&gt;Lukas Ruebbelke&lt;/a&gt;.  I had already been using Angular for a few projects and wasn&amp;rsquo;t expecting to get much out of the book.  Honestly I got it to use as more of a give away at one of my talks but figured I would at least glance through a few chapters of it first.  Needless to say I ended up reading the whole book and plan to keep it.&lt;/p&gt;

&lt;p&gt;This book is one of the best introductions to Angular that I have read.  Lukas does a fantastic jobs of explaining how it all works with lots of good code examples in a way that is very easy to understand.  The book walks you through building a Trello clone with a pre-built backend so that you can stay focused on Angular and not worry about the data storage.  After reading this book and going through the code examples you will be well on your way to being able to create your own Angular application.&lt;/p&gt;

&lt;p&gt;The book starts off explaining how all of the parts of Angular play together: configurations, routes, views, directives, controllers, services, and $scope.  It is one of the best explanation that I had read or seen.  Before this book I had  understood how it played together enough to be able to code with it but couldn&amp;rsquo;t explain it well to others.  Not anymore.  If nothing else the opening chapter was more than worth it.&lt;/p&gt;

&lt;p&gt;Before diving into the details of each component, Lukas tasks about how to structure your Angular applications.  He covers the basics and some common best practices.  For detailed style guides he refers you to John Papa and Todd Moto&amp;rsquo;s style guides.  I very much appreciate that he didn&amp;rsquo;t rehash their style guides.&lt;/p&gt;

&lt;p&gt;Next the book dives into the details of each of the components.  He starts with views and controllers, then discusses services and  finishes off with directives.  He spends a while chapter on each component and the explanation of each is extremely easy to understand.  He walks through each of the sections as he is building the sample app which really help to reinforce the concepts.&lt;/p&gt;

&lt;p&gt;Then we take a trip into polishing the UI with animations.  At first I was thinking this is a throw away chapter but it turned out to be a really fun chapter.  Lukas did a good job of explaining how to quickly and easily create both CSS and Javascript animations.  All of the code was very easy to understand and could easily be applied to any application.  I may just have to start thinking about how to use animation in my application.&lt;/p&gt;

&lt;p&gt;After animations, he jumps into how to navigate to the different views using routing with ngRoute.  Like the rest of the book, it was a well explained chapter and a good overview for how routing actually works.  I do wish that he had used UI router instead of ng-route since many of the projects that I have been working are using UI router but that is just me being greedy.  ngRoute is more than enough for the coding examples.  The loading spinner control was cool to see since this is something that every application should have to indicate something is happening to users.&lt;/p&gt;

&lt;p&gt;Next up is a quick trip into forms and forms validation.  This chapter cover the basics of form validation for textboxes using required and minimum length.  He covered a nice bit of the basic form validation code that you would need to know.  I do wish that he would have cover more of the Html controls such as drop downs, multiple select, checkboxes, etc.&lt;/p&gt;

&lt;p&gt;One more cool thing that Lukas does is include a testing with Karma section in each of the chapters.  Coming from an Agile background where I have done a good amount of automated unit tests for my projects, it was nice to see Lukas cover this topic.  Lukas covers just enough to get you started on automated testing and shows you how easy it is to get started with it.&lt;/p&gt;

&lt;p&gt;Overall, I would give this book 5 out of 5 stars.  If you are already an Angular developer or just getting into Angular this is a must have book.  Wish I would have had it a long time ago.  Great job Lukas.&lt;/p&gt;

&lt;p&gt;Link to book &lt;a href=&#34;https://www.manning.com/books/angularjs-in-action&#34;&gt;https://www.manning.com/books/angularjs-in-action&lt;/a&gt;&lt;/p&gt;
</content>
    <category term="angular" /><category term="ionic" /><category term="book reviews" />

        
        </entry>
    
		<entry>
      <title>Ionic - Stop Icons from Overlapping in Ion List</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-ion-item-multiple-icon-inline/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-ion-item-multiple-icon-inline/" rel="alternate" type="text/html" title="Ionic - Stop Icons from Overlapping in Ion List" />
      <updated>Tue, 19 Jan 2016 00:00:00 +0000</updated>
      <published>Tue, 19 Jan 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-ion-item-multiple-icon-inline/">&lt;p&gt;Today I ran into an issue using Ionic, where I was trying to put two icons on the right side of an ion list item.  There is really easy to do with the item-icon-right css class.  Unfortunately, when you have multiple icons, it overlaps instead of showing them side by side.  I was not expecting this as I had only used 1 icon before and assumed that item-icon-right would just put them side by side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic-ion-list-inline-icons/icons-overlapped.png&#34; alt=&#34;Overlapped Icons&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the code that causes the overlapped icons.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item class=&amp;quot;item item-icon-right&amp;quot;&amp;gt;
        Task 1
        &amp;lt;i class=&amp;quot;icon ion-ios-circle-outline&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;i class=&amp;quot;icon ion-close icon-accessory&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/ion-item&amp;gt;
    &amp;lt;ion-item class=&amp;quot;item item-icon-right&amp;quot;&amp;gt;
        Task 2
        &amp;lt;i class=&amp;quot;icon ion-checkmark-circled&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;i class=&amp;quot;icon ion-close icon-accessory&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/ion-item&amp;gt;
&amp;lt;/ion-list&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luckily, there is an easy fix for this using some built-in Ionic css classes.  We need to convert the icons into buttons, surround them with a div that has the class &amp;ldquo;buttons&amp;rdquo; on it, and change the ion-item class from item-icon-right to item-button-right.&lt;/p&gt;

&lt;p&gt;Also, to make the buttons still look like icons and not give them a border, we can use the button-icon class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ion-list&amp;gt;
    &amp;lt;ion-item class=&amp;quot;item item-button-right&amp;quot;&amp;gt;
        Task 1
        &amp;lt;div class=&amp;quot;buttons&amp;quot;&amp;gt;
            &amp;lt;button class=&amp;quot;button button-icon ion-ios-circle-outline&amp;quot;&amp;gt;&amp;lt;/button&amp;gt;
            &amp;lt;button class=&amp;quot;button button-icon ion-close icon-accessory&amp;quot;&amp;gt;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/ion-item&amp;gt;
    &amp;lt;ion-item class=&amp;quot;item item-button-right&amp;quot;&amp;gt;
        Task 2
       &amp;lt;div class=&amp;quot;buttons&amp;quot;&amp;gt;
            &amp;lt;button class=&amp;quot;button button-icon ion-ios-circle-outline&amp;quot;&amp;gt;&amp;lt;/button&amp;gt;
            &amp;lt;button class=&amp;quot;button button-icon ion-close icon-accessory&amp;quot;&amp;gt;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/ion-item&amp;gt;
&amp;lt;/ion-list&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/ionic-ion-list-inline-icons/icons-not-overlapped.png&#34; alt=&#34;Not Overlapped Icons&#34; /&gt;&lt;/p&gt;
</content>
    <category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Preparing A Conference Talk</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/preparing-a-presentation/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/preparing-a-presentation/" rel="alternate" type="text/html" title="Preparing A Conference Talk" />
      <updated>Thu, 14 Jan 2016 00:00:00 +0000</updated>
      <published>Thu, 14 Jan 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/preparing-a-presentation/">

&lt;p&gt;I have done a bunch of conference talks and brown bag sessions this year (~45 in the past 2 years) and here is how I prepare for those talks. Sorry that the reply is a little long but I wanted to make sure you had a process to get started with. Remember that this is my process and you have to find what works best for you.&lt;/p&gt;

&lt;p&gt;Here are the phases that I go through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Table of Contents Placeholder
{:toc}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no set time for how long each phase takes. It all depends on the presentation and the length of it. I have had talks where I spent several weeks working on it while other talks were done in less than a day.&lt;/p&gt;

&lt;p&gt;You can see a good number of my presentations at &lt;a href=&#34;http://slides.com/digitaldrummerj&#34; title=&#34;http://slides.com/digitaldrummerj&#34;&gt;Presentations by Justin&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;phase-1-brainstorming&#34;&gt;Phase 1: Brainstorming&lt;/h2&gt;

&lt;p&gt;In this phrase you are brainstorm the flow and content of the talk. I like using Post-In notes for this since it is very easy to move them around and add/remove them and I don&amp;rsquo;t get into the rut of worrying about the content/format in powerpoint. I have also used mindmapping software for this but I like the low tech post-it notes better.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jot down the goals for the talk. Essentially what do I want attendees to walk away with and what am I solving for them. Do I want attendees to be excited about a new technology? Is it having code samples that they can immediately implement into their projects? Is it helping them solve a common problem that I think they will run into?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Brainstorm the main categories/themes that the talk with be split into. I try not to have more more than 3 categories/theme. Don&amp;rsquo;t worry about wording here as long you know what the idea is.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Brainstorm the content under each category/theme. Since we are using post-in notes, it is meant to be just a few words and not the whole slide of content. I don&amp;rsquo;t have a limit on post-in notes per category. Each post-it equals 1 slide.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arrange the categories and content post-in notes for each category in the order that I think it would go in.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, the brainstorming for the overall content is done and I start drafting in powerpoint.&lt;/p&gt;

&lt;p&gt;Also, a couple of times I have review these post-it notes with other people to get their feedback before I start drafting actual slides so that I can make sure that the content is something that makes sense and that I didn&amp;rsquo;t forget anything that they would want to see.&lt;/p&gt;

&lt;h2 id=&#34;phase-2-drafting&#34;&gt;Phase 2: Drafting&lt;/h2&gt;

&lt;p&gt;Typically I move to powerpoint during this phrase but I have also times where I have done a full outline using just OneNote before moving into drafting in powerpoint.&lt;/p&gt;

&lt;p&gt;Using the post-it note order from phrase 1, I create a slides for each post-in note. As I create each slide I populate the content of it. I find many times as I am drafting that what I thought would be slides either go away or change, so that is why I create the content as I got.&lt;/p&gt;

&lt;p&gt;I do have a few rules I try to follow during this phrase to make sure that I don&amp;rsquo;t get bogged down in the details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t look for pictures for the slides. Focus on the content first. If I want a picture I make a note on the slide of what kind of picture I am looking for and once I finalize the content I go look for the pictures.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t worry about the powerpoint template. Focus on the content first. If it is an Intel presentation, I normally start with the Intel template. If I am doing the presentation outside of Intel and it is not an Intel sponsored presentation, I don&amp;rsquo;t worry about the template until later.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t worry about the number of bullet points per slide yet. That will come during the editing phase.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t worry about transitions or only showing 1 bullet point at a time. Those get added during the finalizing phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you should have a good start to the talks content and slide deck. Now we need to focus the content and edit the slide deck.&lt;/p&gt;

&lt;p&gt;Also, I normally don&amp;rsquo;t show other people the powerpoint during this phase since I have found that they get hung up the stuff you will be doing in the editing phase instead of review the overall structure and message.&lt;/p&gt;

&lt;h2 id=&#34;phase-3-editing&#34;&gt;Phase 3: Editing&lt;/h2&gt;

&lt;p&gt;In this phrase, we need to focus and tighten up the content of the presentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I edit each slide to have 3-5 single line bullet points max.&lt;/li&gt;
&lt;li&gt;I remove excess words to make each bullet point short and sweet.&lt;/li&gt;
&lt;li&gt;I make sure that I keep the font size between 24-28 pt for each bullet. This makes it so that people in the back of the room can read the bullets with ease and makes you focus each bullet point.&lt;/li&gt;
&lt;li&gt;I make sure that the slide is a summary of what I want to say and not everything that I will be saying. People don&amp;rsquo;t want to listen to you read the slide to them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the content editing is done, then I look for images and powerpoint templates.&lt;/p&gt;

&lt;p&gt;Now onto the last phase where the presentation is finalized and you are ready to give it.&lt;/p&gt;

&lt;p&gt;This is also the point that I would send out the presentation for people to review since it is essentially done.&lt;/p&gt;

&lt;h2 id=&#34;phase-4-finalizing&#34;&gt;Phase 4: Finalizing&lt;/h2&gt;

&lt;p&gt;Now it is time to put the finishing touches on the presentation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add transitions between slides. Nothing crazy, just a basic fade. I have gotten feedback from multiple presenters and attendees that having nothing makes it difficult for their eyes and brain to move to the next slide.&lt;/li&gt;
&lt;li&gt;Have bullets come in 1 at a time (appear animation in powerpoint terms). Having all of the bullets show at once normally has the effect of having people reading the slide instead of listening to you.&lt;/li&gt;
&lt;li&gt;Double check that the font is big enough&lt;/li&gt;
&lt;li&gt;Double check that the font colors have enough contrast to be readable&lt;/li&gt;
&lt;li&gt;Run though the slide in presentation mode and make sure everything works as expected (transitions, bullet animations, etc). Try to stand back 5-10 feet from the monitor and make sure that you can read the presentation.&lt;/li&gt;
&lt;li&gt;If you are going to be giving it on a projector or TV, hook it up to one and make sure that it looks rights (fonts, font size, colors, etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##Phase 5: Practice&lt;/p&gt;

&lt;p&gt;Practice you talk out loud as much as you can. By practicing the talk out loud you will find any spots where you might stumble on words or phrases or that something doesn&amp;rsquo;t make sense said out loud.&lt;/p&gt;

&lt;p&gt;If you are going to use a slide advancer, make sure to practice with it. I strongly recommend a slide advancer if you don&amp;rsquo;t have one. Not having to run back to the laptop to go to the next slide or hunting for the page down makes your presentation smoother. I have the Logitech R400 slide advancer, &lt;a href=&#34;http://www.amazon.com/Logitech-910-001354-Wireless-Presenter-R400/dp/B002GHBUTK/ref=sr_1_1?s=pc&amp;amp;ie=UTF8&amp;amp;qid=1449186602&amp;amp;sr=1-1&amp;amp;keywords=logitech+slide+advancer&#34; title=&#34;http://www.amazon.com/Logitech-910-001354-Wireless-Presenter-R400/dp/B002GHBUTK/ref=sr_1_1?s=pc&amp;amp;ie=UTF8&amp;amp;qid=1449186602&amp;amp;sr=1-1&amp;amp;keywords=logitech+slide+advancer&#34;&gt;http://www.amazon.com/Logitech-910-001354-Wireless-Presenter-R400/dp/B002GHBUTK/ref=sr_1_1?s=pc&amp;amp;ie=UTF8&amp;amp;qid=1449186602&amp;amp;s…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If giving the talk outside of an Intel facility, plan for slow network connections or no internet at all unless you tether to your phone. If you plan to tether to your phone make sure to test it out more than once to make sure it works. If you are going to be downloading anything, make sure to have an already downloaded copy in case you do have no internet.&lt;/p&gt;

&lt;p&gt;If you are doing any kind of demos, have a one click reset button.&lt;/p&gt;

&lt;p&gt;If giving the talk outside of Intel, make sure to have backup copies of your slides, demos, etc on either a usb drive just in case something happens with your computer and you are able to find a someone that can loan you one that you might have a chance to still give the talk that you would have from your laptop.&lt;/p&gt;

&lt;h2 id=&#34;phase-6-giving-the-talk&#34;&gt;Phase 6: Giving the Talk&lt;/h2&gt;

&lt;p&gt;Now is the fun part, giving the actual talk. Remember to breath and that everyone in the audience is rooting for you to do well. If you have done all of the prep work then you will be able to work through anything that comes up.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the content is something that you can give out, have your material available online for people to have as soon as you are done with your talk.&lt;/li&gt;
&lt;li&gt;If you are asked a question that you don&amp;rsquo;t know the answer to, don&amp;rsquo;t be afraid to say you have not look what they are asking or that you are not sure and can get back to them later with an answer.&lt;/li&gt;
&lt;li&gt;Make sure to have a water bottle with you. Beside your throat getting horse, it is a great way to add a pause into the talk without it feeling awkward to you.&lt;/li&gt;
&lt;li&gt;Make sure to pace yourself and not rush. It is extremely easy to rush through a talk and finish in half the time.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <category term="speaking" />

        
        </entry>
    
		<entry>
      <title>Angular - Calling Service Methods from Console</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/angular-running-service-in-console/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-running-service-in-console/" rel="alternate" type="text/html" title="Angular - Calling Service Methods from Console" />
      <updated>Mon, 11 Jan 2016 00:00:00 +0000</updated>
      <published>Mon, 11 Jan 2016 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/angular-running-service-in-console/">&lt;p&gt;Here is a quick tip for how you can run your Angular service and factory methods within the Chrome Dev Tools console.  No longer will you have to go through the process of navigating through the UI to trigger a Service/Factory method to run.  Now you can just load up the web site and do all of your debugging through the Chrome console.&lt;/p&gt;

&lt;p&gt;If your service/factory was called &amp;ldquo;YourFactory&amp;rdquo; and the ng-app attribute is on the body tag, you can get a reference to the &amp;ldquo;YourFactory&amp;rdquo; with the following line in the console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var t = angular.element(document.querySelector(&#39;body&#39;)).injector().get(&#39;YourFactory&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you have the reference, then you can call any method that is exposed by the &amp;ldquo;YourFactory&amp;rdquo; service such calling the method &amp;ldquo;myServiceMethod&amp;rdquo; and using the returned promise from the method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t.myServiceMethod().then(function(response) { console.log(response); });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can quickly debug your service/factory.&lt;/p&gt;
</content>
    <category term="angular" />

        
        </entry>
    
		<entry>
      <title>2015 Year In Review</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/year-in-review/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/year-in-review/" rel="alternate" type="text/html" title="2015 Year In Review" />
      <updated>Thu, 31 Dec 2015 00:00:00 +0000</updated>
      <published>Thu, 31 Dec 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/year-in-review/">

&lt;p&gt;2015 was a great year with lots of new adventures.   I did a bunch of travelling, started a new position at work, competed in my first hackathon (and win), and started a couple of meetups.  At the beginning of 2015 I set a few goals for myself:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Speak at more events&lt;/li&gt;
&lt;li&gt;Start blogging again&lt;/li&gt;
&lt;li&gt;Be more active in my local dev community&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;speaking&#34;&gt;Speaking&lt;/h2&gt;

&lt;p&gt;I spoke at a good amount of events this year considering this was my first year putting myself out there.   I found that I really love presenting and helping people.&lt;/p&gt;

&lt;p&gt;I presented 32 talks between 20 events.  I found that I also don&amp;rsquo;t mind presenting a bunch of talks at a single event.  In fact I like presenting more than 1 talk  events.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10 User Groups / Meetups&lt;/li&gt;
&lt;li&gt;5 Conferences&lt;/li&gt;
&lt;li&gt;4 Code Camps&lt;/li&gt;
&lt;li&gt;1 podcast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was amazing meeting all of the different people.  Many of whom I admired as speakers and developers.  It was hard to believe that I was presenting at the same event that they were.&lt;/p&gt;

&lt;p&gt;Thank you to those that attended my talks.  I couldn&amp;rsquo;t do it without you.&lt;/p&gt;

&lt;p&gt;Thank you as well to those that provided me feedback and helped me become a better speaker.&lt;/p&gt;

&lt;p&gt;I even got to fulfill a long time dream of being on the &lt;a href=&#34;http://dotnetrocks.com&#34;&gt;.Net Rocks podcast&lt;/a&gt;.  I never imagined I would be on the podcast and it was a total out of the blue thing.  I got introduced to Carl and Richard at &lt;a href=&#34;http://nebraskacode.com&#34;&gt;Nebraska Code&lt;/a&gt;.  Then I saw Richard again at &lt;a href=&#34;http://anglebrackets.org&#34;&gt;Angle Brackets&lt;/a&gt; where I was an attendee and I mentioned to him that one of my goals is to speak at the conference.  As we got to talking about potential talks, he said my Vagrant talk would be a great podcast episode.  Luckily for me, we were both going to be at NDC Oslo and he was just starting planning the NDC episodes.  You can listen to me on &lt;a href=&#34;https://www.dotnetrocks.com/?show=1158&#34;&gt;episode 1158 &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As well you can see all my  presentations at &lt;a href=&#34;http://digitaldrummerj.me/speaking&#34;&gt;http://digitaldrummerj.me/speaking/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;speaking-goals-for-2016&#34;&gt;Speaking Goals for 2016&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Submit to more conferences.  Want to put speak at more but since it is CFP for them the selection part is out of my control.&lt;/li&gt;
&lt;li&gt;Complete my Pluralsight audition and hopefully a course&lt;/li&gt;
&lt;li&gt;Come up with at least 1 new talk&lt;/li&gt;
&lt;li&gt;Turn my net promoter feedback system into an actual application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blogging&#34;&gt;Blogging&lt;/h2&gt;

&lt;p&gt;I had tried blogging in the past and it never lasted more than a few post.  Well, not this time.  In January, I created &lt;a href=&#34;http://digitaldrummerj.me&#34;&gt;http://digitaldrummerj.me &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This year I wrote 50 posts with 54,000 page views.  For my first year blogging, overall I consider it a success.&lt;/p&gt;

&lt;p&gt;I used Jekyll for the blog engine and hosted it on Github Page.  It was a lot of fun using Jekyll and creating the layout and theme for my blog.  I could have easily went with WordPress or one of the canned solutions but I took it as an opportunity to sharpen my html and css skills as well as learn some new things like using Jekyll, and integrating Google Analytics and Disqus.&lt;/p&gt;

&lt;p&gt;I even redid the theme for the blog in the middle of the year which was an adventure in itself.  However, I don&amp;rsquo;t plan on doing this very often as it took a lot of time away from writing blog post.  I  am much happier though with the new theme, so the time was at least worth it.&lt;/p&gt;

&lt;p&gt;I also figured out how to use Zapier to create a scheduling engine for the blog using Google Calendar and Github Pull Request.  Since Jekyll is a static site generator it does not have admin functions like scheduling.  It was one of the things that I did miss compared to other blogging engines.  Since using Zapier for this, I have used it as well as &lt;a href=&#34;http://ifttt.com&#34;&gt;IFTTT&lt;/a&gt; to automate a few things.&lt;/p&gt;

&lt;p&gt;It was also fun figuring out how in Jekyll to easily create a series post and get a listing of all of the post for the series in order.   Originally I did this by hand but that got old quickly.  Now I just have to add a series tag to the front matter and it does it for me.  This was important toe since several of the topics I was writing on were too big for a single blog post.&lt;/p&gt;

&lt;p&gt;I have a whole series of blog post detailing out setting up Jekyll, integrating Disqus and Google Analytics, creating series, plus several other ones.  View the series at &lt;a href=&#34;http://digitaldrummerj.me/blogging-on-github-part-1-Getting-Started/&#34;&gt;http://digitaldrummerj.me/blogging-on-github-part-1-Getting-Started/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;blogging-goals-for-2016&#34;&gt;Blogging Goals for 2016&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Double the number of post&lt;/li&gt;
&lt;li&gt;Stick to the schedule of post in Trello&lt;/li&gt;
&lt;li&gt;Write every day even if it is just 10 minutes&lt;/li&gt;
&lt;li&gt;Submit  to be a guest blogger on at least one popular blog&lt;/li&gt;
&lt;li&gt;Get ahead in my  completed post so everything is not last minute.  Be nice to have at least 2 post scheduled at all times.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dev-community&#34;&gt;Dev Community&lt;/h2&gt;

&lt;p&gt;I have been part of various user groups over the years but was never part of the organizing committee nor did I give back as much as I wanted to.&lt;/p&gt;

&lt;p&gt;This year I decided to change that.  I am now running 2 meetups, mentored at some events, and am on the planning comittee for a couple events.&lt;/p&gt;

&lt;h3 id=&#34;phoenix-version-control-meetup&#34;&gt;Phoenix Version Control Meetup&lt;/h3&gt;

&lt;p&gt;Right after I started using Jekyll and Github Pages, what is now the Phoenix Version Control meetup was started and I was asked if I wanted to be a co-organizer.  Originally it started as a Github Pages group but quickly changed to more about version control with a focus on Github.&lt;/p&gt;

&lt;p&gt;This was my first experience organizing a meetup and it had been a great learning experience.  This group has struggled a bit to get going but we have a monthly meeting with about 10 people attending regularly.   Not sure what 2016 will bring for this group.&lt;/p&gt;

&lt;h3 id=&#34;ionic-arizona-meetup&#34;&gt;Ionic Arizona Meetup&lt;/h3&gt;

&lt;p&gt;Then around August of this year I saw on meetup that Michael Iglesias was starting an Ionic Arizona meetup.  I had also been thinking about starting one as well, so I sent a message  to Michael offering to present at one of the meetings and asking if he needed a co-organizer.  He graciously accepted both offers.&lt;/p&gt;

&lt;p&gt;After some searching for a venue, we held our first meeting at the end of September with about 30 people attending.  Since then we have had 3 more meetings with 20-25 people at each meeting.&lt;/p&gt;

&lt;p&gt;For 2016,  we already have a great set of talks for the first half of the year scheduled.   We are doing &amp;ldquo;Releasing Your to the App Stores&amp;rdquo; in January, &amp;ldquo;IoT with Octoblu and Ionic&amp;rdquo; in February, &amp;ldquo;Database as a Service with Backand&amp;rdquo; in March, &amp;ldquo;ionic 2 and angular 2&amp;rdquo; in April and &amp;ldquo;An Ionic Showcase of thing members have built with Ionic&amp;rdquo; in May.  If you would like to speak at one of the meetings, please let me know.&lt;/p&gt;

&lt;p&gt;In December, I  also registered &lt;a href=&#34;http://ionic-az.org&#34;&gt;ionic-az.org&lt;/a&gt;, created a Twitter account (&lt;a href=&#34;http://twitter.com/ionic_az&#34;&gt;@ionic_az&lt;/a&gt;), created email accounts using &lt;a href=&#34;http://zoho.com&#34;&gt;Zoho&lt;/a&gt;, and  created a newsletter for the group.&lt;/p&gt;

&lt;p&gt;The reason for the newsletter is to be able to share all of the great Ionic articles that I run across without spamming the group with a ton of messages.  The first newsletter went out the week of Christmas and the next one is ready and will be going out next week.  The newsletter will be bi-weekly.  Look for a blog post soon on how I created the newsletter using a combination of a bunch of tools to automate most of the work.&lt;/p&gt;

&lt;p&gt;We have also been work hard to get sponsorship for the group.  So far we have a venue/food sponsor in &lt;a href=&#34;http://www.integrate.com&#34;&gt;Integrate&lt;/a&gt; and &lt;a href=&#34;http://jetbrains.com&#34;&gt;JetBrains&lt;/a&gt; has been gracious enough to give a free license each month for an idea of the winners choice.&lt;/p&gt;

&lt;p&gt;The one not so great part of the Ionic Az group is that my co-leader, Michael, moved out of Phoenix and back to the East Coast.   We worked well together and it was a pleasure running the group with him.  I will be continuing the group and am looking for a co-leader.&lt;/p&gt;

&lt;h3 id=&#34;conference-planning&#34;&gt;Conference Planning&lt;/h3&gt;

&lt;p&gt;I have also joined the planning comittee for an Agile Conference in Portland that is scheduled for April and I will be helping with the planning for Desert Code Camp in Phoenix.&lt;/p&gt;

&lt;h3 id=&#34;mentoring&#34;&gt;Mentoring&lt;/h3&gt;

&lt;p&gt;I also helped out as a mentor at the Chandler Startup weekend.   Was also suppose to mentor at She Hacks AZ but that event got cancelled.  It was fun doing the mentoring and being on that side of the process.&lt;/p&gt;

&lt;h3 id=&#34;community-goals&#34;&gt;Community Goals&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Continue to grow Ionic AZ  attendance.&lt;/li&gt;
&lt;li&gt;Grow Ionic AZ to where I do not have to present a topic at each meeting&lt;/li&gt;
&lt;li&gt;Continue to build my community network.&lt;/li&gt;
&lt;li&gt;Figuring out to organize more workshops locally on various topics.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Well this post turn out way longer than I thought it would be.  Guess I did a lot more in 2015 than I realized.  Every time I thought I was done I remembered something else.  2015 was a great year and I am looking forward to 2016.&lt;/p&gt;

&lt;p&gt;To start 2016 I am running an &lt;a href=&#34;https://www.eventbrite.com/e/use-your-existing-web-skills-to-create-native-mobile-applications-tickets-19830200664&#34;&gt;Ionic Workshop&lt;/a&gt; on January 16th at Gangplank Chandler, will be speaking at the Javascript Summit Virtual Conference in February and  in March will be  running an &lt;a href=&#34;http://conferences.oreilly.com/fluent/javascript-html-us/public/schedule/speaker/219565&#34;&gt;Ionic workshop&lt;/a&gt; at O&amp;rsquo;Reilly Fluent Conf.&lt;/p&gt;

&lt;p&gt;If you see me out at any events, come up and say hi.&lt;/p&gt;

&lt;p&gt;Looking forward to seeing everyone in 2016.&lt;/p&gt;
</content>
    <category term="year in review" />

        
        </entry>
    
		<entry>
      <title>Ionic - Using Local Notifications</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-local-notification/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-local-notification/" rel="alternate" type="text/html" title="Ionic - Using Local Notifications" />
      <updated>Tue, 01 Dec 2015 00:00:00 +0000</updated>
      <published>Tue, 01 Dec 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-local-notification/">

&lt;p&gt;When you are creating a mobile applications there are times where you need to notify users about something such as an upcoming appointment.  If the application is running and the user is using it in the foreground, this is easy to accomplish.  However, if the application is running in the background this can be a challenging task.   You could do push notifications but that takes a decent amount of work to setup with both iOS and Android app stores.  If all you need to do is alert them on their local device you can just use the cordova local notification plugin and skip the headache of setting up push notifications.&lt;/p&gt;

&lt;p&gt;In this post we will walk you through creating an ionic application that uses the &lt;a href=&#34;http://ngcordova.com/docs/plugins/localNotification/&#34;&gt;ngCordova local notification plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;environment-setup&#34;&gt;Environment Setup&lt;/h2&gt;

&lt;p&gt;Before we get started, we need to make sure that you have your development environment configured with either an emulator or physical device as the local notification only works on a device and not a web browser.  If you have already configured the Ionic Framework and an emulator/physical device, you can skip this section.&lt;/p&gt;

&lt;p&gt;Make sure that you meet these requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android environment configured -

&lt;ul&gt;
&lt;li&gt;Java 7+&lt;/li&gt;
&lt;li&gt;Android SDK&lt;/li&gt;
&lt;li&gt;Android Studio&lt;/li&gt;
&lt;li&gt;Either emulator, genymotion, or physical device&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;iOS environment configured (if on a MAC)

&lt;ul&gt;
&lt;li&gt;XCode&lt;/li&gt;
&lt;li&gt;Either iOS Simulator or Device&lt;/li&gt;
&lt;li&gt;XCode Command Line Tools&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;li&gt;ionic&lt;/li&gt;
&lt;li&gt;cordova&lt;/li&gt;
&lt;li&gt;gulp&lt;/li&gt;
&lt;li&gt;bower&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can refer to the following articles to configure your environment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;/images/IonicLocalNotifications/Ionic-Setup-Windows&#34;&gt;Setup Ionic on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/images/IonicLocalNotifications/ionic-setup-osx/&#34;&gt;Setup Ionic on Mac&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;creating-project&#34;&gt;Creating Project&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is create a new ionic project that we will use to test the local notifications.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic start ionic-local-notifications blank
cd ionic-local-notifications
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to add the platforms to the ionic application since we need to deploy to a device in order for the local notifications to work.  It will not work correctly in the browser.&lt;/p&gt;

&lt;p&gt;To add the android platform:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic platform add android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add the iOS platform (for Mac users):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic platform add ios
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, if you’re not using a Mac, you cannot build for the iOS platform.&lt;/p&gt;

&lt;h2 id=&#34;install-ngcordova&#34;&gt;Install ngCordova&lt;/h2&gt;

&lt;p&gt;ngCordova is a collection of 70+ AngularJS extensions on top of the Cordova API that make it easy to build, test, and deploy Cordova mobile apps with AngularJS.  These extensions allow us to interact with device features such as the camera, battery status, and geolocation.&lt;/p&gt;

&lt;p&gt;To install ngCordova run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install ngCordova --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Include ng-cordova.js or ng-cordova.min.js in your www\index.html file before cordova.js and after your AngularJS / Ionic file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;lib/ionic/js/ionic.bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;lib/ngCordova/dist/ng-cordova.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;    
&amp;lt;script src=&amp;quot;cordova.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-the-local-notification-plugin&#34;&gt;Install the local notification plugin&lt;/h2&gt;

&lt;p&gt;To install the plugin run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic plugin add https://github.com/katzer/cordova-plugin-local-notifications.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you open up the package.json file, you will see the local notification plugin add along with the other cordova plugins.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;cordovaPlugins&amp;quot;: [
    {
        &amp;quot;locator&amp;quot;: &amp;quot;https://github.com/katzer/cordova-plugin-local-notifications.git&amp;quot;,
        &amp;quot;id&amp;quot;: &amp;quot;de.appplant.cordova.plugin.local-notification&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-ngcordova-as-a-dependency&#34;&gt;Add ngCordova as a dependency&lt;/h2&gt;

&lt;p&gt;Open up the www/js/app.js file and inject ngCordova into the module&lt;/p&gt;

&lt;p&gt;angular.module(&amp;lsquo;starter&amp;rsquo;, [&amp;lsquo;ionic&amp;rsquo;, &amp;lsquo;ngCordova&amp;rsquo;])&lt;/p&gt;

&lt;h2 id=&#34;creating-a-new-controller&#34;&gt;Creating a New Controller&lt;/h2&gt;

&lt;p&gt;We need to create an Angular controller that the UI will interact with.  At the bottom of the www/js/app.js file add the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.controller(&#39;SampleController&#39;, function($scope, $cordovaLocalNotification) {

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to tell the UI what the controller is.  Open up the www/index.html page and add the controller to the ion-content.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ion-pane&amp;gt;
  &amp;lt;ion-header-bar class=&amp;quot;bar-stable&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;title&amp;quot;&amp;gt;Local Notification Sample&amp;lt;/h1&amp;gt;
  &amp;lt;/ion-header-bar&amp;gt;
  &amp;lt;ion-content ng-controller=&amp;quot;SampleController&amp;quot;&amp;gt;
  &amp;lt;/ion-content&amp;gt;
&amp;lt;/ion-pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-functions-to-create-notifications&#34;&gt;Adding Functions to Create Notifications&lt;/h2&gt;

&lt;p&gt;Within the SampleController, we need to add all of the functions to do the scheduling of the notifications.&lt;/p&gt;

&lt;p&gt;All of the local notification functions should be contained within an ionic platform ready function and inside of a check that makes sure we are running in a WebView on a device.  This will at least allow us to see the UI in the browser without error, it just won&amp;rsquo;t run any of the local notification function unless on a WebView.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ionicPlatform.ready(function () {
          if (ionic.Platform.isWebView()) {
          }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to inject $ionicPlatform into the SampleController&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.controller(&#39;SampleController&#39;, function($scope, $cordovaLocalNotification, $ionicPlatform) {

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;instant-notification&#34;&gt;Instant Notification&lt;/h3&gt;

&lt;p&gt;To schedule an immediate notification, add the following function within the ionicPlatform.ready function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.scheduleInstantNotification = function () {
      $cordovaLocalNotification.schedule({
      id: 1,
      text: &#39;Instant Notification&#39;,
      title: &#39;Instant&#39;
    }).then(function () {
      alert(&amp;quot;Instant Notification set&amp;quot;);
    });
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the www/index.html page within the ion-content, add a button and set the ng-click to call the scheduleInstantNotification function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button 
    class=&amp;quot;button&amp;quot;      
    ng-click=&amp;quot;scheduleInstantNotification()&amp;quot;&amp;gt;
    Instant 
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notification-x-seconds-from-now&#34;&gt;Notification X Seconds from Now&lt;/h3&gt;

&lt;p&gt;To schedule a notification 5 seconds from now, add the following function within the ionicPlatform.ready function.&lt;/p&gt;

&lt;p&gt;The difference between this function and the immediate notification is the date property is being set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.scheduleNotificationFiveSecondsFromNow = function () {
    var now = new Date().getTime();
    var _5SecondsFromNow = new Date(now + 5000);


    $cordovaLocalNotification.schedule({
        id: 2,
        date: _5SecondsFromNow,
        text: &#39;Notification After 5 Seconds Has Been Triggered&#39;,
        title: &#39;After 5 Seconds&#39;
    }).then(function () {
        alert(&amp;quot;Notification After 5 seconds set&amp;quot;);
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the www/index.html page within the ion-content, add a button and set the ng-click to call the scheduleNotificationFiveSecondsFromNow function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button 
    class=&amp;quot;button&amp;quot;      
    ng-click=&amp;quot;scheduleNotificationFiveSecondsFromNow()&amp;quot;&amp;gt;
        In 5 Sec
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notification-every-minute&#34;&gt;Notification Every Minute&lt;/h3&gt;

&lt;p&gt;To schedule a notification every minute, add the following function within the ionicPlatform.ready function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.scheduleEveryMinuteNotification = function () {
    $cordovaLocalNotification.schedule({
    id: 3,
    title: &#39;Every Minute&#39;,
    text: &#39;Give a real message&#39;,
    every: &#39;minute&#39;
    }).then(function (result) {
    console.log(&#39;Every Minute Notification Set&#39;);
    });
};     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: The every options possible values are second, minute, hour, day, week, month, or year.&lt;/p&gt;

&lt;p&gt;In the www/index.html page within the ion-content, add a button and set the ng-click to call the scheduleEveryMinuteNotification function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button 
    class=&amp;quot;button&amp;quot;      
    ng-click=&amp;quot;scheduleEveryMinuteNotification()&amp;quot;&amp;gt;
        Every Minute
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-notification-text&#34;&gt;Update Notification Text&lt;/h3&gt;

&lt;p&gt;To update a the every minute notification, add the following function within the ionicPlatform.ready function.  You also need to check that the notification is scheduled before trying to update it.   This functions requires that you clicked on the Every Minute button to schedule the every minute notification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.updateNotificationText = function () {
    $cordovaLocalNotification.isPresent(3).then(function (present) {
        if (present) {

            $cordovaLocalNotification.update({
                id: 3,
                title: &#39;Notificaton  Update&#39;,
                text: &#39;Notification Update Details&#39;
            }).then(function (result) {
                console.log(&#39;Updated Notification Text&#39;);
            });
        } else {
            alert(&amp;quot;Must Schedule Every Minute First&amp;quot;);
        }
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the www/index.html page within the ion-content, add a button and set the ng-click to call the updateNotification function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button 
    class=&amp;quot;button&amp;quot;      
    ng-click=&amp;quot;updateNotificationText()&amp;quot;&amp;gt;
        Update Text for Every Minute
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-notification-interval&#34;&gt;Update Notification Interval&lt;/h3&gt;

&lt;p&gt;To update a the every minute notification to be scheduled every second, add the following function within the ionicPlatform.ready function.  You also need to check that the notification is scheduled before trying to update it.  This functions requires that you clicked on the Every Minute button to schedule the every minute notification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.updateNotificationEvery = function () {
    $cordovaLocalNotification.isPresent(3).then(function (present) {
        if (present) {
            $cordovaLocalNotification.update({
                id: 3,
                title: &#39;Notification  Update&#39;,
                text: &#39;Every Minute change to second&#39;,
                every: &#39;second&#39;

            }).then(function (result) {
                console.log(&#39;Updated Notification Every&#39;);
            });
        } else {
            alert(&amp;quot;Must Schedule Every Minute First&amp;quot;);
        }
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the www/index.html page within the ion-content, add a button and set the ng-click to call the updateNotification function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button 
    class=&amp;quot;button  button-block button-positive&amp;quot;
    ng-click=&amp;quot;updateNotificationEvery()&amp;quot;&amp;gt;
    Update Every Min to Second
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cancel-notification&#34;&gt;Cancel Notification&lt;/h3&gt;

&lt;p&gt;To cancel a notification, add the following function within the ionicPlatform.ready function.  You also need to check that the notification is scheduled before trying to cancel it.  This functions requires that you clicked on the Every Minute button to schedule the every minute notification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.cancelNotification = function () {
    $cordovaLocalNotification.isPresent(3).then(function (present) {
        if (present) {
            $cordovaLocalNotification.cancel(3).then(function (result) {
                console.log(&#39;Notification EveryMinute Cancelled&#39;);
                alert(&#39;Cancelled Every Minute&#39;);
            });
        } else {
            alert(&amp;quot;Must Schedule Every Minute First&amp;quot;);
        }
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the www/index.html page within the ion-content, add a button and set the ng-click to call the cancelNotification function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button 
    class=&amp;quot;button&amp;quot;      
    ng-click=&amp;quot;cancelNotification()&amp;quot;&amp;gt;
        Cancel Every Minute
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deploy-to-device&#34;&gt;Deploy to Device&lt;/h2&gt;

&lt;p&gt;In order for the local notifications to work, you need to deploy the application to a device or an emulator.  It will not work correctly in the browser.&lt;/p&gt;

&lt;p&gt;Note: You can only compile and deploy ios application on a Mac.&lt;/p&gt;

&lt;p&gt;Android:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ionic run android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ionic run ios     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: You may need to pass in &amp;ndash;device to the command to get it to run on a device vs an emulator.&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Local notifications are a great option for being able to alert a user to something in your application.  As you saw it only took a few lines of code to enable them.  This article touched on the basic but there is more that you can do with local notifications.  You can interact with multiple notifications at once for scheduling, updating, and cancelling.  You can pass additional data into each notification that you can then use when the notification is trigger.  On the rootscope you can listen for notifications to be scheduled, tiggered, updated or cancelled.&lt;/p&gt;

&lt;p&gt;Source code for this article is available at &lt;a href=&#34;https://github.com/digitaldrummerj-ionic/ionic-local-notifications-sample&#34;&gt;https://github.com/digitaldrummerj-ionic/ionic-local-notifications-sample&lt;/a&gt;.&lt;/p&gt;
</content>
    <category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Running Gulp Task in Visual Studio</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/running-gulp-task-in-visual-studio/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/running-gulp-task-in-visual-studio/" rel="alternate" type="text/html" title="Running Gulp Task in Visual Studio" />
      <updated>Sun, 15 Nov 2015 00:00:00 +0000</updated>
      <published>Sun, 15 Nov 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/running-gulp-task-in-visual-studio/">

&lt;p&gt;When I am working in an code editor such as Visual Studio, I do not want to have to have to leave the editor to run command line programs such as Gulp task.  I want to be able to run the gulp task right from instead the editor.  Starting with Visual Studio 2013, you could do this with the &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/8e1b4368-4afb-467a-bc13-9650572db708&#34;&gt;Task Runner Explorer extension&lt;/a&gt;.  Microsoft then integrated the Task Runner Explorer into Visual Studio 2015 so you no longer have to install an extension.&lt;/p&gt;

&lt;p&gt;In this post, we will look at how to run your Gulp task within Visual Studio and then how to integrate them into the Visual Studio build process.&lt;/p&gt;

&lt;h2 id=&#34;code-for-this-tutorial&#34;&gt;Code for this tutorial&lt;/h2&gt;

&lt;p&gt;The sample code for this tutorial is available at &lt;a href=&#34;https://github.com/digitaldrummerj/pluralsight-audition&#34;&gt;https://github.com/digitaldrummerj/pluralsight-audition&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;pulling-up-the-task-runner-explorer&#34;&gt;Pulling up the Task Runner Explorer&lt;/h2&gt;

&lt;p&gt;You can get to the task runner explorer, by going under the View Menu, selecting Other Windows, and then selecting the Task Runner Explorer.&lt;br /&gt;
&lt;img src=&#34;/images/GulpInVisualStudio/TaskRunnerExplorer_FindInMenu.png&#34; alt=&#34;Open Task Runner Explorer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When the Task Runner Explorer opens it will pull up all of the task from gulpfile.js that is in the root directory of the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/GulpInVisualStudio/TaskRunnerExplorer.png&#34; alt=&#34;Task Runner Explorer Initial View&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this case it shows the 5 task that are available in the gulpfile.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default&lt;/li&gt;
&lt;li&gt;clean&lt;/li&gt;
&lt;li&gt;inject&lt;/li&gt;
&lt;li&gt;release&lt;/li&gt;
&lt;li&gt;watch&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-a-task&#34;&gt;Running a Task&lt;/h2&gt;

&lt;p&gt;After the task is opened up, to run a task, right-click on it and select the run option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/GulpInVisualStudio/TaskRunnerExplorer_TaskRun_RightClickMenu.png&#34; alt=&#34;Running a Task&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When a task it run, it will open up a tab in the Task Runner explorer and show the results of the gulp task&lt;/p&gt;

&lt;p&gt;For the demo, we have right-clicked on the default task and selected the run option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/GulpInVisualStudio/TaskRunnerExplorer_TaskRun.png&#34; alt=&#34;Results of Task Run&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;integrating-into-visual-studio-build-process&#34;&gt;Integrating into Visual Studio Build Process&lt;/h2&gt;

&lt;p&gt;Manually running a task is nice but it is even better if you can integrate it into the Visual Studio build process.  Luckily the Task Runner Explorer, give you just that option.  If you right-click on a task and select Bindings, you can see the options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/GulpInVisualStudio/TaskRunnerExplorer_BuildBindings.png&#34; alt=&#34;Task Build Options&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are 4 bindings options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before Build - task will run before the Visual Studio build.&lt;/li&gt;
&lt;li&gt;After Build - task will run after the Visual Studio Build.&lt;/li&gt;
&lt;li&gt;Clean - task will run when the project is cleaned.&lt;/li&gt;
&lt;li&gt;Project Open - task will run when the project is opened.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this example, we are going to set the &amp;ldquo;Before Build&amp;rdquo; binding for the default task.  Right-click on the default task, select Bindings, and then Before Build.&lt;/p&gt;

&lt;p&gt;When you set the binding, 2 things happened in the Task Runner Explorer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The default task now shows up in the Bindings tab under the Before Build secton.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you right-click on the default task and select binding there will be a checkmark next to the &amp;ldquo;Before Build&amp;rdquo; to indicate that it is set for this task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/GulpInVisualStudio/TaskRunnerExplorer_BindingSetForBeforeBuild.png&#34; alt=&#34;Before Build Binding&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, if you open up the gulpfile.js, you will notice that the first line now has a comment with the bindings in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/GulpInVisualStudio/TaskRunnerExplorer_GulpfileWithBeforeBuildSet.png&#34; alt=&#34;Gulpfile with BeforeBuild set&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Now as a Visual Studio user, you kow how to run your gulp task without leaving Visual Studio and how to integrate it into the Visual Studio build process.&lt;/p&gt;
</content>
    <category term="visual studio" /><category term="gulp" />

        
        </entry>
    
		<entry>
      <title>Strongloop - Fixing Security When Extending User Model</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/strongloop-extending-user-model-security/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/strongloop-extending-user-model-security/" rel="alternate" type="text/html" title="Strongloop - Fixing Security When Extending User Model" />
      <updated>Fri, 30 Oct 2015 00:00:00 +0000</updated>
      <published>Fri, 30 Oct 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/strongloop-extending-user-model-security/">&lt;p&gt;After following Raymond Camden&amp;rsquo;s &lt;a href=&#34;http://www.raymondcamden.com/tags/strongloop/&#34;&gt;Strongloop Introduction&lt;/a&gt;, I was ready to update the &lt;a href=&#34;https://github.com/Ionic-AZ/Todo-Lab1-LocalStorage&#34;&gt;todo demo application&lt;/a&gt; that I have been using for the &lt;a href=&#34;http://meetup.com/ionic-az&#34;&gt;Ionic Arizona Meetup&lt;/a&gt;.  So I created a models for projects and app users. The app users model base class was User.  Then within the project model I associated a project to an app users with a belongsTo and in the app users model I associated multiple projects to a single user with a hasMany.  At this point, when I examined the API explorer I could see that it can me a rest endpoint to get the projects associated to a user.  However, I ran into an issue with getting 401 Unauthorized errors when I tried to query any of the rest endpoints to get the projects associated to the user.&lt;/p&gt;

&lt;p&gt;I could not find anything in the Strongloop docs that told me how to get around the 401 errors or what was causing them except that the ACL security was causing the issue and that I should be able to set the ACL security for appuser.   However, after much research, it turns out that the built-in user model has security (ACL) on it to restrict everyone from being able to query the user endpoints that do not have an explictly defined security setup.  This is great except for the fact that even if you add additional ACLs in your extended user model the default security has already denied the user before it gets to the security you setup.&lt;/p&gt;

&lt;p&gt;You can view the default security by navigating to your strongloop project directory and looking in the node_modules\loopback\common\models\user.json file.  You can see looking at the ACL list that the first item in the list is to  DENY $everyone&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
        &amp;quot;principalId&amp;quot;: &amp;quot;$everyone&amp;quot;,
        &amp;quot;permission&amp;quot;: &amp;quot;DENY&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The way Strongloop orders the ACLs is that it starts at the bottom of the ACL list and reads it to the top.  Since we are extending the user class, the DENY $everyone will come before our defined ACL.  Strongloop strongly suggest that you do not modify the built-in user class, so then how do we allow users to query our additional endpoints?&lt;/p&gt;

&lt;p&gt;When you generate a model there is an accompanying file for each model in the common\models directory, that has a .js extension to write custom code to add additional functionality to the model.  For example if your model is called appuser, you will see two files: appuser.json and appuser.js.&lt;/p&gt;

&lt;p&gt;Go ahead and open up the .js extension for your model.  You will the following code where Appuser is your model&amp;rsquo;s name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(Appuser) {
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing to do is clear out the existing security for the model&lt;/p&gt;

&lt;p&gt;Appuser.settings.acls.length = 0;&lt;/p&gt;

&lt;p&gt;Next we need to create a file in the models directory to hold the ACL for the model.  My file naming convention is to add &amp;ldquo;acl&amp;rdquo; after the model name like so [Your Model]acl.json, ex: appuseracl.json&lt;/p&gt;

&lt;p&gt;To ensure that you do not lose any of the default security, copy the ACLs json from the node_modules\loopback\common\model\user.json file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;acls&amp;quot;: [
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principal&amp;quot;: &amp;quot;$everyone&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;DENY&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$everyone&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;create&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$owner&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;deleteById&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$everyone&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;login&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$everyone&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;logout&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$owner&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;findById&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$owner&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;updateAttributes&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$everyone&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;confirm&amp;quot;
  },
  {
    &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
    &amp;quot;principalId&amp;quot;: &amp;quot;$everyone&amp;quot;,
    &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
    &amp;quot;property&amp;quot;: &amp;quot;resetPassword&amp;quot;,
    &amp;quot;accessType&amp;quot;: &amp;quot;EXECUTE&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the ACL configuration is setup, you need to tell Strongloop to load it by add the following line to the [Your Model].js file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Appuser.settings.acls = require(&#39;./appuseracl.json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you test your rest endpoints, at this point you will have the security as your started with.&lt;/p&gt;

&lt;p&gt;To add the security for your added endpoints, add them before the DENY everyone configuration that is at the top of the ACL list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
        &amp;quot;principalId&amp;quot;: &amp;quot;$everyone&amp;quot;,
        &amp;quot;permission&amp;quot;: &amp;quot;DENY&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example here is the ACL for my app users model to get the list of projects associated to that user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &amp;quot;principalType&amp;quot;: &amp;quot;ROLE&amp;quot;,
        &amp;quot;principalId&amp;quot;: &amp;quot;$owner&amp;quot;,
        &amp;quot;permission&amp;quot;: &amp;quot;ALLOW&amp;quot;,
        &amp;quot;property&amp;quot;: &amp;quot;__get__projects&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you test your rest endpoints again, you will be able to successfully call the endpoints that were added when you associated projects to a user in your user model.&lt;/p&gt;
</content>
    <category term="ionic" /><category term="strongloop" />

        
        </entry>
    
		<entry>
      <title>Installing Gulp 4.x</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/installing-gulp-4/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/installing-gulp-4/" rel="alternate" type="text/html" title="Installing Gulp 4.x" />
      <updated>Thu, 29 Oct 2015 00:00:00 +0000</updated>
      <published>Thu, 29 Oct 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/installing-gulp-4/">

&lt;p&gt;Gulp 4 is not released yet but if you have a need to install it here is how to do it.  I will cover how to globally install it as well as how to update your package.json for your projects.&lt;/p&gt;

&lt;h2 id=&#34;globally-installing-gulp&#34;&gt;Globally Installing Gulp&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is install the Gulp command line to be able to run the gulp task.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a Command Prompt (Windows) or Terminal (Mac or Linux)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check if you have Gulp CLI &amp;lt; 1.2.1 installed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ gulp -v
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If a Gulp version is &amp;lt; 1.2.1, you will need to upgrade by running the following commands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g gulp-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify Gulp CLI 1.2.1 installed correctly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gulp -v
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;updating-your-projects-package-son&#34;&gt;Updating Your Projects package.son&lt;/h2&gt;

&lt;p&gt;Now we need to tell our project to use Gulp 4.0 when it runs the gulp task.&lt;/p&gt;

&lt;p&gt;If you using a previous version of Gulp in your package.json file, you can upgrade it if you would like or continue to use Gulp 3.x.  I have not had any issue with leaving my local repository at 3.9 while having Gulp 4 installed globally.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a Command Prompt (Windows) or Terminal (Mac or Linux)&lt;/li&gt;
&lt;li&gt;Navigate to the directory that contains your package.json&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uninstall gulp.  &lt;strong&gt;Note:&lt;/strong&gt; If your package.json has gulp listed as a dev dependency use  &amp;ndash;save-dev.  If gulp is listed as a dependency use &amp;ndash;save.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm uninstall gulp --save-dev
$ npm install git+https://git@github.com/gulpjs/gulp.git#4.0 --save-dev

OR

$ npm uninstall gulp --save
$ npm install git+https://git@github.com/gulpjs/gulp.git#4.0  --save
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;You can keep up to date on Gulp 4 at &lt;a href=&#34;https://github.com/gulpjs/gulp/tree/4.0&#34;&gt;https://github.com/gulpjs/gulp/tree/4.0&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/gulpjs?lang=en&#34;&gt;https://twitter.com/gulpjs?lang=en&lt;/a&gt;&lt;/p&gt;
</content>
    <category term="gulp" />

        
        </entry>
    
		<entry>
      <title>Sync your Git Fork to the Original Repo</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/git-sync-fork-to-master/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/git-sync-fork-to-master/" rel="alternate" type="text/html" title="Sync your Git Fork to the Original Repo" />
      <updated>Tue, 27 Oct 2015 00:00:00 +0000</updated>
      <published>Tue, 27 Oct 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/git-sync-fork-to-master/">

&lt;p&gt;Syncing your forked repository to the original repository is an important step before submitting any pull request to the original repository for the changes in your forked repository.  Even if you are not going to submit a pull request to the original repository, there are times that you want the additional features and/or bug fixes that have been done since you forked the original repository.&lt;/p&gt;

&lt;p&gt;You could do a pull request but this adds an additional commit into your forked repository instead of making your forked repository match the original repository.  In order to sync the forked repository without adding any additional commits as part of the process you need to configure the original repository as an upstream remote, merge in the changes from the original repository and then push the merged version back to Github.&lt;/p&gt;

&lt;h2 id=&#34;adding-original-repo-as-an-upstream-repo&#34;&gt;Adding Original Repo As an Upstream Repo&lt;/h2&gt;

&lt;p&gt;In order to pull the changes from the original repository into your forked version, you need to add the original git repo as an upstream repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a Command Prompt (Windows) or Terminal (Mac or Linux)&lt;/li&gt;
&lt;li&gt;Navigate to the directory that contains your forked repository&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to list the currently configured remote repositories&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v

origin https://github.com/[Your UserName]/[Your Fork].git (fetch)
origin https://github.com/[Your UserName]/[Your Fork].git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the original repository as an upstream repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add upstream https://github.com/[Original Owner Username]/[Original Repository].git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you run the git remote command again, you will now see both origin and upstream are configured&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v

origin https://github.com/[Your UserName]/[Your Fork].git (fetch)
origin https://github.com/[Your UserName]/[Your Fork].git (push)
upstream https://github.com/[Original Owner UserName]/[Original Repository].git (fetch)
upstream https://github.com/[Original Owner UserName]/[Original Repository].git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to pull the changes from the original repository to the your forked repository.&lt;/p&gt;

&lt;h2 id=&#34;merging-original-repo-into-your-fork&#34;&gt;Merging Original Repo Into Your Fork&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open a Command Prompt (Windows) or Terminal (Mac or Linux)&lt;/li&gt;
&lt;li&gt;Navigate to the directory that contains your forked repository that you configured with the upstream repository&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first thing is to fetch all of the changes from the original repository.  Note that commits to the original repository will be stored in a local branch called, upstream/master&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fetch upstream

remote: Counting objects: 75, done.
remote: Compressing objects: 100% (53/53), done.
remote: Total 62 (delta 27), reused 44 (delta 9)
Unpacking objects: 100% (62/62), done.
From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
 * [new branch]      master     -&amp;gt; upstream/master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure that you are on your fork&amp;rsquo;s master branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master

Switched to branch &#39;master&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Merge the changes from the upstream/master into your local master branch.  This will bring your fork&amp;rsquo;s master branch into sync with the upstream repository without losing your local changes.  If you have made any changes that create a conflict, you will obviously have to resolve those before you can complete the merge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge upstream/master

Updating a422352..5fdff0f
Fast-forward
....
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At this point your local branch is synced to the original repositories master branch.  If you want to update the Github repository, you need to push your changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;To summarize, with the 5 commands below you can sync your forked repository with the original repository and push the changes to your Github repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ git remote add upstream https://github.com/[Original Owner Username]/[Original Repository].git
    $ git fetch upstream
    $ git checkout master
    $ git merge upstream/master
    $ git push
&lt;/code&gt;&lt;/pre&gt;
</content>
    <category term="git" /><category term="github" />

        
        </entry>
    
		<entry>
      <title>Do Not Swallow The Exceptions</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/dont-swallow-the-exceptions/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/dont-swallow-the-exceptions/" rel="alternate" type="text/html" title="Do Not Swallow The Exceptions" />
      <updated>Mon, 05 Oct 2015 00:00:00 +0000</updated>
      <published>Mon, 05 Oct 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/dont-swallow-the-exceptions/">

&lt;p&gt;Throwing away exceptions in your code is just a bad practice and makes it harder to support your application.  It may make it easier for you as a developer to get something working but in the long run it cost way more money to do the maintenance and troubleshooting then if you had just put in proper exception handling to start with.&lt;/p&gt;

&lt;p&gt;I have worked on several codebases recently where methods returned false if either a business rule failed or an unexpected exception occurred with no logging of the error anywhere.  This made it extremely difficult to figure out what the issue was.  In several cases, even when you hooked up a debugger there was no way to get at the exception details since the exception was not passed into the catch block.&lt;/p&gt;

&lt;h2 id=&#34;examples-of-issue&#34;&gt;Examples of Issue&lt;/h2&gt;

&lt;p&gt;Here are a couple of examples of what I am talking about when I say swallowing the exception.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Totally Throwing Away Exception&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this example, the code does nothing with the exception and does not even tell the caller that something failed.  I have spent many hours troubleshooting projects with this exact try/catch block and wondering why something that I thought should have worked was not, just to discover that deep down in the call stack it was swallowing the exception.  Since the catch block is empty, there is no way to put a breakpoint in the catch block but even if you could, there is no way to get at the exception in the catch block since it was not passed into it.  You would need to make a temp code change to add an exception parameter to the catch block and a bogus line in the catch block to be able to get at the exception.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void SomeMethod()
{
    try
    {
        //Some Code That Errors
    }
    catch
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: At Least Tells You Something Went Wrong&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this example, the code at least returns false back from the method so you can assume that something didn&amp;rsquo;t go right but you don&amp;rsquo;t know if it was an exception or if it was business logic that failed.  This example is also not logging any information about the exception and there is no way in a debugger to get the exception details.  You can at least put a breakpoint in the catch block, but you would need to make a code change to add pass the exception into the catch block.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool SomeMethod()
{
    try
    {
       //Some code
       if (&amp;quot;Business Logic Failed&amp;quot;)
       {
            return false;   
       }

       //everything passed
       return true;  
    }
    catch 
    {
        return false;    
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fixing-this-issue&#34;&gt;Fixing This Issue&lt;/h2&gt;

&lt;p&gt;Now that you understand the issue, lets examine how to fix it.  The fix is really simple.  There are two options that I use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pass the exception variable into the catch block and log the information somewhere.&lt;/li&gt;
&lt;li&gt;Let the exception bubble up the call stack and handle it at a higher level.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Fix Example #1: Logging The Exception&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this example, the exception along with all of the inner exceptions are logged and the business rules are checked.  You can also put a breakpoint inside the catch block to get details on the exception.  This code still returns a false though if something went wrong which doesn&amp;rsquo;t make it obvious if it was an exception or business logic that didn&amp;rsquo;t pass without looking at the logs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool SomeMethod()
{
    try
    {
       //Some code
       if (&amp;quot;Business Logic Failed&amp;quot;)
       {
            throw new ApplicationException(&amp;quot;Business Logic Failed...Give details on what failed&amp;quot;);  
       }

       return true;  
    }  
    catch (Exception ex)
    {
        //Logs StackTrace, Message, and all InnerException Message/StackTrace
        LogMessage(ex);   
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Fix Example #2: Bubbling Exception Up Call Stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This example lets the full exception go up the call stack with a custom exception so that the calling method can figure out how it wants to handle the exception.  You should handle this exception at some point.  It is bad practice to let it become an unhandled exception and crash your application.&lt;/p&gt;

&lt;p&gt;The reason for using a custom exception is to be able to catch your business logic errors versus an unexpected exception.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void SomeMethod()
{
    //Some Code        
    if (&amp;quot;Business Logic Failed&amp;quot;)
    {
        //Let Exception Bubble Up the Call Stack with a custom exception
        //Can also use ApplicationException but harder to catch specific exceptions without examining the exception message
        throw new MyCustomException(&amp;quot;Business Logic Failed...Give details on what failed&amp;quot;);  
    }

}    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Fix Example #3: Ability to Put in a Breakpoint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes I know I said there is 2 days to fix it but you can also do it this way.  However this is my least favorite way to not swallow exception as you are still technically swallowing the error but you can at least hook up the debugger, put a breakpoint on the return statement, and get at the exception details.  This only is of value in your development machine but it is at least better than nothing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void SomeMethod()
{
    try
    {

        //Some Code    
    }   
    catch (Exception ex)
    {
        return;
    }    
}    
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;As you can see it does not take much more work to be able to do something with the exception.  It will save you hours of troubleshooting work just by handling the exception and not throwing it away.  Don&amp;rsquo;t take the easy way out by swallowing exceptions.  Be nice to your fellow developers and don&amp;rsquo;t throw away the exceptions.&lt;/p&gt;
</content>
    <category term="programming" /><category term="c#" />

        
        </entry>
    
		<entry>
      <title>Vagrant - Fixing Opentable Basebox looking for Windows Plugin</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-fixing-opentable-basebox/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-fixing-opentable-basebox/" rel="alternate" type="text/html" title="Vagrant - Fixing Opentable Basebox looking for Windows Plugin" />
      <updated>Sun, 04 Oct 2015 00:00:00 +0000</updated>
      <published>Sun, 04 Oct 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-fixing-opentable-basebox/">

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;As part of my &lt;a href=&#34;https://github.com/digitaldrummerj/VagrantTalk/tree/master/ExampleVagrantFiles/WindowsWithChocolatey&#34;&gt;demo&lt;/a&gt; during my Vagrant talk, I use the &lt;a href=&#34;https://atlas.hashicorp.com/opentable/boxes/win-8.1-enterprise-amd64-nocm&#34;&gt;opentable/win-8.1-enterprise-amd64-nocm&lt;/a&gt; vagrant base box with the virtualbox provider.  This vagrant base box unfortunately has an issue with the vagrantfile that is included with it looking for the old/unneeded vagrant windows plugin to be installed and trying to port forward the WinRM and RDP ports without detecting if the port is already in use.&lt;/p&gt;

&lt;p&gt;Luckily, it is really easy to fix the included vagrantfile so that you can create vagrant machines but you have to do some prework before running a vagrant up using this base box.&lt;/p&gt;

&lt;h2 id=&#34;downloading-the-box&#34;&gt;Downloading the Box&lt;/h2&gt;

&lt;p&gt;Normally with vagrant you do not need to download the vagrant box before running vagrant up but in this case you do need to download the &lt;a href=&#34;https://atlas.hashicorp.com/opentable/boxes/win-8.1-enterprise-amd64-nocm&#34;&gt;opentable/win-8.1-enterprise-amd64-nocm&lt;/a&gt; box first.  We can download the box by running the following command from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box add opentable/win-8.1-enterprise-amd64-nocm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will take a bit to download the vagrant box as it is several gigs in size.&lt;/p&gt;

&lt;h2 id=&#34;fix-for-unneeded-check-for-vagrant-windows-plugin&#34;&gt;Fix for Unneeded Check for Vagrant Windows Plugin&lt;/h2&gt;

&lt;p&gt;Once the box is downloaded, you need to go to the .vagrant.d directory that contains the box you just downloaded.  On Windows this directory is located at %userprofile%.vagrant.d\boxes\opentable-VAGRANTSLASH-win-8.1-enterprise-amd64-nocm\1.0.0\virtualbox&lt;/p&gt;

&lt;p&gt;This directory contained the Vagrantfile that we need to update.  You can open this file in any text editor.&lt;/p&gt;

&lt;p&gt;When you open up the file you will see this section of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if !Vagrant.has_plugin?(&#39;vagrant-windows&#39;)
  puts &amp;quot;vagrant-windows missing, please install the vagrant-windows plugin!&amp;quot;
  puts &amp;quot;Run this command in your terminal:&amp;quot;
  puts &amp;quot;vagrant plugin install vagrant-windows&amp;quot;
  exit 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section is no longer need and can be deleted.  The vagrant-windows plugins is how Vagrant used to supported the Windows OS before it was supported out of the box.&lt;/p&gt;

&lt;h2 id=&#34;fix-for-port-forwarding-auto-correct&#34;&gt;Fix for Port Forwarding Auto Correct&lt;/h2&gt;

&lt;p&gt;We are going to edit the same Vagrantfile as the previous section.  Again this file is located at %userprofile%.vagrant.d\boxes\opentable-VAGRANTSLASH-win-8.1-enterprise-amd64-nocm\1.0.0\virtualbox&lt;/p&gt;

&lt;p&gt;Open up the Vagrantfile in any text editor.&lt;/p&gt;

&lt;p&gt;When you open up the file you will see this section of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.network :forwarded_port, guest: 3389, host: 3389
config.vm.network :forwarded_port, guest: 5985, host: 5985
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this section is that if ports 3389 or 5985 are already in use on your host machine, then the command will fail.&lt;/p&gt;

&lt;p&gt;To correct this we need to add the auto_correct parameter to each of the port forwarding commands so that Vagrant will automatically pick an unused port if it detects either 3389 or 5985 are in use on your host machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.network :forwarded_port, guest: 3389, host: 3389, auto_correct: true
config.vm.network :forwarded_port, guest: 5985, host: 5985, auto_correct: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Now you can use the &lt;a href=&#34;https://atlas.hashicorp.com/opentable/boxes/win-8.1-enterprise-amd64-nocm&#34;&gt;opentable/win-8.1-enterprise-amd64-nocm&lt;/a&gt; vagrant base box with the vagrant up command to create a new virtual machine.&lt;/p&gt;

&lt;p&gt;Not all vagrant base boxes have this issue but if you do run across one you know how to fix it.&lt;/p&gt;
</content>
    <category term="vagrant" />

        
        </entry>
    
		<entry>
      <title>Sync your Git Fork to the Original Repo</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/git-syncing-fork-with-original-repo/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/git-syncing-fork-with-original-repo/" rel="alternate" type="text/html" title="Sync your Git Fork to the Original Repo" />
      <updated>Mon, 28 Sep 2015 00:00:00 +0000</updated>
      <published>Mon, 28 Sep 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/git-syncing-fork-with-original-repo/">

&lt;p&gt;Syncing your forked repository to the original repository is an important step before submitting any pull request to the original repository for the changes in your forked repository.  Even if you are not going to submit a pull request to the original repository, there are times that you want the additional features and/or bug fixes that have been done since you forked the original repository.&lt;/p&gt;

&lt;p&gt;You could do a pull request but this adds an additional commit into your forked repository instead of making your forked repository match the original repository.  In order to sync the forked repository without adding any additional commits as part of the process you need to configure the original repository as an upstream remote, merge in the changes from the original repository and then push the merged version back to Github.&lt;/p&gt;

&lt;h2 id=&#34;adding-original-repo-as-an-upstream-repo&#34;&gt;Adding Original Repo As an Upstream Repo&lt;/h2&gt;

&lt;p&gt;In order to pull the changes from the original repository into your forked version, you need to add the original git repo as an upstream repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a Command Prompt (Windows) or Terminal (Mac or Linux)&lt;/li&gt;
&lt;li&gt;Navigate to the directory that contains your forked repository&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to list the currently configured remote repositories&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v

origin https://github.com/[Your UserName]/[Your Fork].git (fetch)
origin https://github.com/[Your UserName]/[Your Fork].git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the original repository as an upstream repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add upstream https://github.com/[Original Owner Username]/[Original Repository].git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you run the git remote command again, you will now see both origin and upstream are configured&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v

origin https://github.com/[Your UserName]/[Your Fork].git (fetch)
origin https://github.com/[Your UserName]/[Your Fork].git (push)
upstream https://github.com/[Original Owner UserName]/[Original Repository].git (fetch)
upstream https://github.com/[Original Owner UserName]/[Original Repository].git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to pull the changes from the original repository to the your forked repository.&lt;/p&gt;

&lt;h2 id=&#34;merging-original-repo-into-your-fork&#34;&gt;Merging Original Repo Into Your Fork&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open a Command Prompt (Windows) or Terminal (Mac or Linux)&lt;/li&gt;
&lt;li&gt;Navigate to the directory that contains your forked repository that you configured with the upstream repository&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first thing is to fetch all of the changes from the original repository.  Note that commits to the original repository will be stored in a local branch called, upstream/master&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fetch upstream

remote: Counting objects: 75, done.
remote: Compressing objects: 100% (53/53), done.
remote: Total 62 (delta 27), reused 44 (delta 9)
Unpacking objects: 100% (62/62), done.
From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
 * [new branch]      master     -&amp;gt; upstream/master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure that you are on your fork&amp;rsquo;s master branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master

Switched to branch &#39;master&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Merge the changes from the upstream/master into your local master branch.  This will bring your fork&amp;rsquo;s master branch into sync with the upstream repository without losing your local changes.  If you have made any changes that create a conflict, you will obviously have to resolve those before you can complete the merge.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge upstream/master

Updating a422352..5fdff0f
Fast-forward
....
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At this point your local branch is synced to the original repositories master branch.  If you want to update the Github repository, you need to push your changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;To summarize, with the 5 commands below you can sync your forked repository with the original repository and push the changes to your Github repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ git remote add upstream https://github.com/[Original Owner Username]/[Original Repository].git
    $ git fetch upstream
    $ git checkout master
    $ git merge upstream/master
    $ git push
&lt;/code&gt;&lt;/pre&gt;
</content>
    <category term="git" /><category term="github" />

        
        </entry>
    
		<entry>
      <title>Getting Visual Studio Cordova Tooling Working with the Ionic Framework</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-2015-cordova-tools-and-ionic-framework/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-2015-cordova-tools-and-ionic-framework/" rel="alternate" type="text/html" title="Getting Visual Studio Cordova Tooling Working with the Ionic Framework" />
      <updated>Thu, 17 Sep 2015 00:00:00 +0000</updated>
      <published>Thu, 17 Sep 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-2015-cordova-tools-and-ionic-framework/">

&lt;p&gt;I am doing an &lt;a href=&#34;http://www.ionicframework.com&#34;&gt;Ionic Framework&lt;/a&gt; presentation and I wanted to use the Visual Studio 2015 Cordova Tooling.&lt;/p&gt;

&lt;p&gt;I have done this presentation twice in the past couple of months using my Intel Nuc machine with the Visual Studio 2015 RTM Cordova tooling but it is kind of pain to do this since the Nuc is a desktop machine and doesn&amp;rsquo;t have a monitor so I have to look at the projector screen or being a laptop to use as well. Setting up 2 machines in 15 minutes as well is a pain and hoping that the remoting from the laptop to the Nuc is stable just asking for trouble even with a travel router that I have.&lt;/p&gt;

&lt;p&gt;So I decided I would just get my laptop working with my demos since I already had Visual Studio 2015 installed and had everything I needed for Ionic already working.&lt;/p&gt;

&lt;p&gt;I thought this shouldn&amp;rsquo;t take that long but unfortunately I ran into a bunch of issues.  Luckily I have managed to fix all of the issue and can move on with the prep work for my presentation.&lt;/p&gt;

&lt;h3 id=&#34;software-installed-on-laptop&#34;&gt;Software Installed on Laptop&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Windows 8.1 Enterprise&lt;/li&gt;
&lt;li&gt;Visual Studio 2015 with Cordova Tooling Update 2&lt;/li&gt;
&lt;li&gt;Node 4.1.0 tried both 32bit and 64bit versions.  Note that the Intel NUC machine had 0.12.4 when I last presented.&lt;/li&gt;
&lt;li&gt;Npm 2.14.3 (version that comes with Node 4.1.0)&lt;/li&gt;
&lt;li&gt;Npm Global Modules: gulp, bower, Ionic, Cordova, and pjup&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;steps-to-create-visual-studio-ionic-project-that-caused-issue&#34;&gt;Steps to Create Visual Studio Ionic Project that caused issue&lt;/h3&gt;

&lt;p&gt;To create the project I first created the Ionic project using the Ionic CLI and then created a Cordova project in Visual Studio based on the Ionic CLI project that was created.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Command Line&lt;/li&gt;
&lt;li&gt;Navigate to c:\projects&lt;/li&gt;
&lt;li&gt;Run ionic start Demo blank&lt;/li&gt;
&lt;li&gt;cd into c:\projects\Demo&lt;/li&gt;
&lt;li&gt;open up the package.json file and removed the gulp-sass line.  This version doesn&amp;rsquo;t work with Node 4.1.0.&lt;/li&gt;
&lt;li&gt;Run npm install gulp-sass &amp;ndash;save&lt;/li&gt;
&lt;li&gt;Run npm install&lt;/li&gt;
&lt;li&gt;Open Visual Studio&lt;/li&gt;
&lt;li&gt;Go File -&amp;gt; New -&amp;gt; Project From Existing Code&lt;/li&gt;
&lt;li&gt;Select Cordova as the project type and click Next&lt;/li&gt;
&lt;li&gt;Click the browse button, navigate to the c:\projects\Demo folder, and click the Select Folder button&lt;/li&gt;
&lt;li&gt;Name the project Demo&lt;/li&gt;
&lt;li&gt;Click the Finish button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now the fun begins.  Below I have documented the different issues that I ran into.&lt;/p&gt;

&lt;h3 id=&#34;issue-1-opening-cordova-project-took-100-cpu&#34;&gt;Issue 1: Opening Cordova project took 100% CPU&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I would open up a Cordova project it would try to parse the Npm global packages and it would fail everytime on the cordova dependency, graceful-fs.  When I opened up Task Manager, I would see Visual Studio and Node taking all of the CPU.  I would also see anywhere between 2-15 node processes that Visual Studio had started.&lt;/p&gt;

&lt;p&gt;I wondered what node processes were doing so I used Process Explorer and I found that they were all running npm config ls -g.&lt;/p&gt;

&lt;p&gt;My only guess is that Visual Studio didn&amp;rsquo;t like something about my npm global packages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since Visual Studio and Node were taking all of the CPU, I had to open up the Task Manager and kill all of the node processes in order to get Visual Studio to close so that the CPU went back to a normal level.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Visual Studio without a project open&lt;/li&gt;
&lt;li&gt;Under the Tools Menu -&amp;gt; Options -&amp;gt; Projects and Solutions -&amp;gt; External Web Tools, I reset it to the defaults which has the Visual Studio path higher than the System Path.&lt;/li&gt;
&lt;li&gt;Open the Demo project from c:\projects\Demo&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The CPU this time should stay at a normal level&lt;/p&gt;

&lt;h3 id=&#34;issue-2-node-sass-would-fail-due-to-not-having-the-32-bit-version-installed&#34;&gt;Issue 2: node-sass would fail due to not having the 32 bit version installed&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was caused by running npm install from the command line outside of Visual Studio and also not having a version of gulp-sass in the package.json that worked with Node 4.1.0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2 steps to get around this issue:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the command line in c:\projects\Demo, run the pjup command to update the npm package vesion in package.json to the latest versions.&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Warning: Make sure that you have the loglevel for npm set to the default of warn.  You can reset your custom loglevel with npm config delete loglevel.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Delete the node_modules directory from your project directory and do the package restore from within Visual Studio. You may need to do a rm -rf node_modules from the command line.&lt;/li&gt;
&lt;li&gt;Open the Demo project from c:\projects\Demo in Visual Studio&lt;/li&gt;
&lt;li&gt;In the Solution Explorer, right-click on the Dependencies folder and select Restore Packages&lt;/li&gt;
&lt;li&gt;After a few minutes the package restore should be completed.

&lt;ul&gt;
&lt;li&gt;Now the Task Runner Explorer should also be working&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;issue-3-typescript-error-on-visual-studio-build&#34;&gt;Issue 3: Typescript error on Visual Studio build&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;
This issue actually had nothing to do with Visual Studio itself but with the angular bower packages.&lt;/p&gt;

&lt;p&gt;It turns out that the angular-ui-router bower package that is installed as part of the ionic install when you do a bower install, has the typescript api file included in the package but the other angular packages do not have their typescript files included, so typescript doesn&amp;rsquo;t know what some of the types are that are referenced in the angular-ui-router typescript api file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I just deleted the angular-ui-router\api folder.&lt;/p&gt;

&lt;h3 id=&#34;issue-4-cordova-error-on-visual-studio-build&#34;&gt;Issue 4: Cordova error on Visual Studio build&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cordova CLI is set to 5.1.1 when you create the project.&lt;/p&gt;

&lt;p&gt;When you build the project in Visual Studio, it generates the following error due to being set to Cordova 5.1.1.  I had also seen this issue on my Intel NUC machine and had to drop the npm global Cordova version back to 5.0.0 but they have since fixed this issue with Cordova.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1&amp;gt;  ------ Adding platform: android
    1&amp;gt;  No version supplied. Retrieving version from config.xml...
    1&amp;gt;  _http_client.js:51
    1&amp;gt;      throw new TypeError(&#39;Request path contains unescaped characters.&#39;);
    1&amp;gt;      ^
    1&amp;gt;
    1&amp;gt;  TypeError: Request path contains unescaped characters.
    1&amp;gt;      at new ClientRequest (_http_client.js:51:11)
    1&amp;gt;      at TunnelingAgent.exports.request (http.js:31:10)
    1&amp;gt;      at TunnelingAgent.createSocket (C:\Users\jpjames\AppData\Roaming\npm\node_modules\vs-tac\node_modules\cordova\5.1.1\node_modules\cordova\node_modules\cordova-lib\node_modules\npm\node_modules\request\node_modules\tunnel-agent\index.js:117:25)
    1&amp;gt;      at TunnelingAgent.createSecureSocket [as createSocket] (C:\Users\jpjames\AppData\Roaming\npm\node_modules\vs-tac\node_modules\cordova\5.1.1\node_modules\cordova\node_modules\cordova-lib\node_modules\npm\node_modules\request\node_modules\tunnel-agent\index.js:184:41)
    1&amp;gt;      at TunnelingAgent.addRequest (C:\Users\jpjames\AppData\Roaming\npm\node_modules\vs-tac\node_modules\cordova\5.1.1\node_modules\cordova\node_modules\cordova-lib\node_modules\npm\node_modules\request\node_modules\tunnel-agent\index.js:80:8)
    1&amp;gt;      at new ClientRequest (_http_client.js:133:16)
    1&amp;gt;      at Object.exports.request (http.js:31:10)
    1&amp;gt;      at Object.exports.request (https.js:163:15)
    1&amp;gt;      at Request.start (C:\Users\[UserName]\AppData\Roaming\npm\node_modules\vs-tac\node_modules\cordova\5.1.1\node_modules\cordova\node_modules\cordova-lib\node_modules\npm\node_modules\request\index.js:594:30)
    1&amp;gt;MSBUILD : cordova-build error BLD104: Error : BLD00104 : There was an error installing a component from NPM, most likely because this device is behind a proxy or firewall. Please see the following link for possible solutions: http://go.microsoft.com/fwlink/?LinkID=623434
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I believe that this error has nothing to do with the firewall since I can restore npm and bower packages without an issue and I have the http_proxy and https_proxy set as system environment variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the taco.json file&lt;/li&gt;
&lt;li&gt;Change the Cordova version to 5.3.1&lt;/li&gt;
&lt;li&gt;Rebuild the solution and the build should be complete successfully&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;issue-5-visual-studio-seems-to-randomly-decide-to-use-my-node-4-1-0-install&#34;&gt;Issue 5: Visual Studio seems to randomly decide to use my node 4.1.0 install&lt;/h3&gt;

&lt;p&gt;It appear that Visual Studio sometimes wants to use its version of node and other times uses my 4.1.0 install.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visual Studio Version&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm package restore

&lt;ul&gt;
&lt;li&gt;I see lines like this in the output window: npm WARN engine get-stdin@5.0.0: wanted: {&amp;ldquo;node&amp;rdquo;:&amp;ldquo;&amp;gt;=0.12.0&amp;rdquo;} (current: {&amp;ldquo;node&amp;rdquo;:&amp;ldquo;v0.10.31&amp;rdquo;,&amp;ldquo;npm&amp;rdquo;:&amp;ldquo;1.4.9&amp;rdquo;})&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;task runner explorer

&lt;ul&gt;
&lt;li&gt;I assume on this one since it complained about the gulp-sass package in Visual Studio but worked fine from the command line with node 4.1.0.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4.1.0 Install&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cordova build

&lt;ul&gt;
&lt;li&gt;I see that at the start of the output windows for the build:  Your environment has been set up for using Node.js 4.1.0 (ia32) and npm.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;issue-6-visual-studio-seem-to-have-a-bunch-of-updates-that-were-needed-as-well&#34;&gt;Issue 6: Visual Studio seem to have a bunch of updates that were needed as well&lt;/h3&gt;

&lt;p&gt;Here is a list of different installed/re-installs/uninstalls that I did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cordova tooling from RTM to update 1 (update 2 wasn&amp;rsquo;t out yet)&lt;/li&gt;
&lt;li&gt;Due to the CPU issues with #1, I uninstall Visual Studio Cordova tooling and re-installed it, selecting update 1&lt;/li&gt;
&lt;li&gt;Updated Cordova tooling from update 1 to update 2.  It came out during all of this troubleshooting&lt;/li&gt;
&lt;li&gt;Tried out npm 3.x.  Didn&amp;rsquo;t see any changes.&lt;/li&gt;
&lt;li&gt;Tried install the npm taco package to see if it would help and it didn&amp;rsquo;t.  Uninstall it from the node 4.1.0 npm global.&lt;/li&gt;
&lt;li&gt;At once point I even managed to break the Cordova tools and I uninstalled and re-installed them with update 2.&lt;/li&gt;
&lt;li&gt;Uninstalled Node 4.1.0 64 bit and installed the 32 bit version&lt;/li&gt;
&lt;li&gt;Tried out the NodeJSTools for Visual Studio latest RC release.  Didn&amp;rsquo;t see any changes so uninstalled it&lt;/li&gt;
&lt;li&gt;Uninstall all of the NodeJsTools for Visual Studio&lt;/li&gt;
&lt;li&gt;Upgraded TypeScript for Visual Studio since the Visual Studio installer said there was a new version out&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;working-steps&#34;&gt;Working Steps&lt;/h3&gt;

&lt;p&gt;To create the project I first created the Ionic project using the Ionic CLI and then created a Cordova project in Visual Studio based on the Ionic CLI project that was created.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Command Line&lt;/li&gt;
&lt;li&gt;Navigate to c:\projects&lt;/li&gt;
&lt;li&gt;Run ionic start Demo blank&lt;/li&gt;
&lt;li&gt;cd into c:\projects\Demo&lt;/li&gt;
&lt;li&gt;run npm config delete loglevel&lt;/li&gt;
&lt;li&gt;run pjup to update all of the npm package.  Say Y to everything except the run npm install&lt;/li&gt;
&lt;li&gt;run ionic setup sass&lt;/li&gt;
&lt;li&gt;run rm -rf node_modules&lt;/li&gt;
&lt;li&gt;Open Visual Studio&lt;/li&gt;
&lt;li&gt;Go File -&amp;gt; New -&amp;gt; Project From Existing Code&lt;/li&gt;
&lt;li&gt;Select Cordova as the project type and click Next&lt;/li&gt;
&lt;li&gt;Click the browse button, navigate to the c:\projects\Demo folder, and click the Select Folder button&lt;/li&gt;
&lt;li&gt;Name the project Demo&lt;/li&gt;
&lt;li&gt;Click the Finish button&lt;/li&gt;
&lt;li&gt;Let Visual Studio do an npm package restore&lt;/li&gt;
&lt;li&gt;Ignore the gulp-sass error popup as this appears to be task runner explorer related and will go away after the npm package restore&lt;/li&gt;
&lt;li&gt;Run the gulp default task to generate the sass file using the Task Runner Explorer&lt;/li&gt;
&lt;li&gt;Open the taco.json file and update the version to 5.3.1&lt;/li&gt;
&lt;li&gt;Delete the www\lib\angular-ui-router\api directory&lt;/li&gt;
&lt;li&gt;Build the Visual Studio project&lt;/li&gt;
&lt;li&gt;Deploy it to a Device/Emulator&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;After all of this Visual Studio is now performing like I expected it to and like it does on my Intel NUC machine.  The CPU is operating at normal levels.  I am able to build everything in Visual Studio and deploy to either the Visual Studio Android Emulator or an actual Android device.&lt;/p&gt;

&lt;p&gt;With all of the fixes in place, I have been able to run through creating my Ionic project, then creating a Visual Studio project from it, and finally deploying it to the Emulator/Device.&lt;/p&gt;

&lt;p&gt;I am very happy I got this all working since I am a huge fan of Visual Studio and wanted to show people all of the goodness in Visual Studio like the package restore, task runner explorer, and debugging.&lt;/p&gt;
</content>
    <category term="ionic" /><category term="visual studio" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 13: Creating an Article Series</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-13-creating-an-article-series/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-13-creating-an-article-series/" rel="alternate" type="text/html" title="Jekyll Part 13: Creating an Article Series" />
      <updated>Tue, 15 Sep 2015 00:00:00 +0000</updated>
      <published>Tue, 15 Sep 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-13-creating-an-article-series/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to go through how to create the series listing like you see for this blog series.&lt;/p&gt;

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Sometimes a blog post gets too big and you need to split it into multiple articles or you want to do a series like this one that builds upon each other but you don&amp;rsquo;t want to have to manage a listing of all of the post in the series.  Instead you can easily create a liquid template that does all of the work for you.&lt;/p&gt;

&lt;h3 id=&#34;section-1-creating-the-template&#34;&gt;Section 1: Creating the Template&lt;/h3&gt;

&lt;p&gt;In this section we are going to create the html template that will get the series listings for you.&lt;/p&gt;

&lt;p&gt;Note: I assume that you have alrady cloned your jekyll repo to your machine.  This tutorial is based off the jekyll repo at &lt;a href=&#34;https://github.com/digitaldrummerj/jekyllforblogseries&#34;&gt;https://github.com/digitaldrummerj/jekyllforblogseries&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the _includes directory create a new file called series.html&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first thing we are going to do is add an if statement to make sure that the it is a series before trying to output the listing.  Without this, it would output every page if the post didnt have a series and you included the series.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{%  raw %}
{% if page.series %}

{% endif %}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;All of the code for the rest of this section will go in between the if and endif statements&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we are going to figure out how many post are part of the series and which article number in the series this post is.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total count will store in the count variable&lt;/li&gt;
&lt;li&gt;The article number for this post in the idx variable.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We will loop through the post and increment the count if the Front Matter series tag match the current page&amp;rsquo;s series tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{%  raw %}
{% assign count = &#39;0&#39; %}
{% assign idx = &#39;0&#39; %}
{% for post in site.posts reversed %}
    {% if post.series == page.series %}
        {% capture count %}{{ count | plus: &#39;1&#39; }}{% endcapture %}
        {% if post.url == page.url %}
            {% capture idx %}{{count}}{% endcapture %}
        {% endif %}
    {% endif %}
{% endfor %}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we need to output the actual html code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note: We are using the panel css from bootstrap.  If you have bootstrap you are good, if not we will add just the panel css in the next section.&lt;/li&gt;
&lt;li&gt;First, we output a header for the series that says which part # this post is and how many total parts there are for the series.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Second, we loop through the post and increment the count if the Front Matter series tag match the current page&amp;rsquo;s series tag so that we can append Part # onto each post title.  If the url for the post in the series matches the current page&amp;rsquo;s url, then it outputs &amp;ldquo;This Article&amp;rdquo; instead of the actual title.&lt;/p&gt;

&lt;p&gt;{%  raw %}&lt;br /&gt;
    &lt;div class=&#34;panel seriesNote&#34;&gt;
        &lt;p&gt;
        This article is &lt;strong&gt;Part {{ idx }}&lt;/strong&gt; in a &lt;strong&gt;{{ count }}-Part&lt;/strong&gt; Series.
        &lt;/p&gt;
        &lt;ul&gt;
        {% assign count = &amp;lsquo;0&amp;rsquo; %}
        {% for post in site.posts reversed %}
        {% if post.series == page.series %}
            {% capture count %}{{ count | plus: &amp;lsquo;1&amp;rsquo; }}{% endcapture %}
            &lt;li&gt;Part {{ count }} -
            {% if page.url == post.url %}
                This Article
            {% else %}
                &lt;a href=&#34;{{post.url}}&#34;&gt;{{post.title}}&lt;/a&gt;
            {% endif %}
            &lt;/li&gt;
        {% endif %}
        {% endfor %}
        &lt;/ul&gt;
    &lt;/div&gt;
{% endraw %}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the next section, we will add the series listing onto a couple of post so you can see them in action&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;section-2-add-series-tag-to-post&#34;&gt;Section 2: Add Series Tag to Post&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The first thing we need to do is create 2 new blog post article so that we can add the series to them.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In both articles, add a front matter tag called series and make the value &amp;ldquo;Intro to Series&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
title: You&#39;re up and running!
published: true
series: &amp;quot;Intro to Series&amp;quot;   
---
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In both article, include the series.html at the point in the html that you want the series listing to show.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% include series.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now run jekyll serve and view one of the new blog post.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do not have the bootstrap css include in your blog, then you will notice that the series listing does not stand out at all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/ScreenshotOfSeriesWithNoCss.png&#34; alt=&#34;Series Listing with No Css&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the next section we will add the missing panel css to make it look more like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/ScreenshotOfSeriesWithCss.png&#34; alt=&#34;Series Listing with Css&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;section-3-adding-css&#34;&gt;Section 3: Adding CSS&lt;/h3&gt;

&lt;p&gt;In this section we will add in the css to make the series listing stand out and look like it is a section that goes together instead of just some text on the page.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the css\style.scss file&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the bottom of the file paste in the following CSS.  This css is directly from the bootstrap css.  I didn&amp;rsquo;t want to include all of the bootstrap framework just for the panel css.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.panel {
    padding: 15px;
    margin-bottom: 20px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    -webkit-box-shadow: 0 1px 1px rgba(0,0,0,0.05);
    box-shadow: 0 1px 1px rgba(0,0,0,0.05)
}

.panel-heading {
    padding: 10px 15px;
    margin: -15px -15px 15px;
    background-color: #f5f5f5;
    border-bottom: 1px solid #ddd;
    border-top-right-radius: 3px;
    border-top-left-radius: 3px
}

.panel-title {
    margin-top: 0;
    margin-bottom: 0;
    font-size: 17.5px;
    font-weight: 500
}

.panel-footer {
    padding: 10px 15px;
    margin: 15px -15px -15px;
    background-color: #f5f5f5;
    border-top: 1px solid #ddd;
    border-bottom-right-radius: 3px;
    border-bottom-left-radius: 3px
}

.panel-primary {
    border-color: #428bca
}

.panel-primary .panel-heading {
    color: #fff;
    background-color: #428bca;
    border-color: #428bca
}

.panel-success {
    border-color: #d6e9c6
}

.panel-success .panel-heading {
    color: #468847;
    background-color: #dff0d8;
    border-color: #d6e9c6
}

.panel-warning {
    border-color: #fbeed5
}

.panel-warning .panel-heading {
    color: #c09853;
    background-color: #fcf8e3;
    border-color: #fbeed5
}

.panel-danger {
    border-color: #eed3d7
}

.panel-danger .panel-heading {
    color: #b94a48;
    background-color: #f2dede;
    border-color: #eed3d7
}

.panel-info {
    border-color: #bce8f1
}

.panel-info .panel-heading {
    color: #3a87ad;
    background-color: #d9edf7;
    border-color: #bce8f1
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save the file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run jekyll serve and view one of the new blog post.  If should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/ScreenshotOfSeriesWithCss.png&#34; alt=&#34;Series Listing with Css&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Now if you do an article series, you can easily have a professional looking series listing and it requires very little to get it working.&lt;/p&gt;

&lt;p&gt;In the next lesson, I will show you how to get the code highlighting working when your code includes liquid syntax such as we did in the code examples in this article.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 12: Editing Locally</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-12-editing-locally/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-12-editing-locally/" rel="alternate" type="text/html" title="Jekyll Part 12: Editing Locally" />
      <updated>Fri, 11 Sep 2015 00:00:00 +0000</updated>
      <published>Fri, 11 Sep 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-12-editing-locally/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to set it up so that we can do draft posts that we can check into our repo but not have them show up on the production site.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;In the last couple of articles, we installed jekyll locally but we didn&amp;rsquo;t talk about editing existing blog post or adding in new ones.  There will be times where you will start a blog post but not have time to finish it all in one sitting.  You could just create all of the files in the post directory and set the publish flag to false but over time it will become harder and harder to tell which articles have actually been published.&lt;/p&gt;

&lt;p&gt;Thankfully, jekyll supports having draft posts that by default don&amp;rsquo;t show even if the publish flag is set to true unless you tell jekyll to run with drafts.  On Github, jekyll runs without the drafts flag so you don&amp;rsquo;t have to worry about drafts accidentally showing up.&lt;/p&gt;

&lt;h2 id=&#34;section-1-creating-a-draft&#34;&gt;Section 1: Creating a draft&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In your blog repo, create a folder called _drafts&lt;/li&gt;
&lt;li&gt;Create a new blog post in there called DraftsTest.md&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following to the DraftsTest.md file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
published: true
layout: post
title: &#39;Drafts Test&#39;
categories: [&#39;How-To&#39;]
date: 2015-09-11 06:00  
---
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you run the jekyll serve command, you will not see this post showing up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve --config _config.yml,_configdev.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-running-with-drafts&#34;&gt;Section 2: Running with Drafts&lt;/h2&gt;

&lt;p&gt;To run jekyll with drafts, you just need to pass in the &amp;ndash;drafts argument to the serve command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    jekyll serve --config _config.yml,_configdev.yml --drafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you view your site in your web browser, you will see your draft post.&lt;/p&gt;

&lt;p&gt;With the drafts argument, it does respect the publish front matter, so if you don&amp;rsquo;t want a draft to show up even with the &amp;ndash;drafts argument, just set the published to false for that article.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you can do all of your editing locally and check the drafts into your git repo without having to fear they will accidentally get published before they are ready.&lt;/p&gt;

&lt;p&gt;In our next lesson, I will show you how to create the series listing like you see below and how to be able to easily create a blog article series&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 09: Installing Jekyll On Windows</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-9-installing-jekyll-on-windows/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-9-installing-jekyll-on-windows/" rel="alternate" type="text/html" title="Jekyll Part 09: Installing Jekyll On Windows" />
      <updated>Wed, 09 Sep 2015 00:00:00 +0000</updated>
      <published>Wed, 09 Sep 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-9-installing-jekyll-on-windows/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to setup your Windows computer to be able to edit your blog on your computer.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Up to this point we have been using the Github web site to edit all of our files but the downside to this is that any chances you want to make show up live in your blog before you have had a chance to test them.&lt;/p&gt;

&lt;p&gt;Instead, it is better if you can test out all of your changes and review your blog post before letting the world see them.  It will also let you have draft post where you can see them locally but on github they will not be visible.&lt;/p&gt;

&lt;p&gt;Note that Jekyll is not officially supported on Windows but it does work and I have not had any issues with it.&lt;/p&gt;

&lt;h2 id=&#34;section-1-installing-software&#34;&gt;Section 1: installing Software&lt;/h2&gt;

&lt;p&gt;I am a big fan of Chocolatey and luckily a good majority of the software that we need had a chocolatey package so I wrote a gist file that we will install using Boxstarter.&lt;/p&gt;

&lt;h3 id=&#34;section-1-1-installing-chocolatey&#34;&gt;Section 1.1: Installing Chocolatey&lt;/h3&gt;

&lt;p&gt;If you are not familiar with Chocolatey, check it out at &lt;a href=&#34;http://chocolatey.org&#34;&gt;http://chocolatey.org&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to install Chocolatey&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Close the command prompt and re-open it so that we can get the Chocolatey environment variables&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next we are going to install Boxstarter.&lt;/p&gt;

&lt;h3 id=&#34;section-1-2-installing-boxstarer&#34;&gt;Section 1.2: Installing Boxstarer&lt;/h3&gt;

&lt;p&gt;Boxstarter gives you the ability to bulk install Chocolatey packages plus several helper functions for Windows configuration options.&lt;/p&gt;

&lt;p&gt;When you bulk install using Boxstarter, it will detect any reboots that are triggered by MSI installers, reboot the machine and then run the Boxstarter script again.&lt;/p&gt;

&lt;p&gt;The Windows configuration helper functions that Boxstarter provides to enable or disable Windows features include items such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remote desktop.&lt;/li&gt;
&lt;li&gt;Microsoft update.&lt;/li&gt;
&lt;li&gt;User access control (UAC).&lt;/li&gt;
&lt;li&gt;Set taskbar options like size, postion, and lock the size.&lt;/li&gt;
&lt;li&gt;Set Windows explorer options like showing hidden files, protected OS files, and file extensions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the following commands to install Boxstarter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    chocolatey feature enable -n=allowGlobalConfirmation
    choco install BoxStarter
    chocolatey feature disable -n=allowGlobalConfirmation   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-1-3-installing-the-rest-of-the-software&#34;&gt;Section 1.3: Installing the rest of the software&lt;/h3&gt;

&lt;p&gt;We are going to be installing Ruby, Ruby DevKit, and Python using Chocolatey and Boxstarter.&lt;/p&gt;

&lt;p&gt;Now that you have Boxstarter installed, you will notice on your desktop a new icon called Boxstarter Shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/BoxStarterShellIcon.png&#34; alt=&#34;Boxstarter Shell Icon&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the Boxstarter Shell&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to install the gist file commands. You can view the contents of the gist file &lt;a href=&#34;https://gist.githubusercontent.com/digitaldrummerj/f290a11d16e98beabd8b/raw/de3d6d551a0f881e0e66cf6c8ec2cc49c35525e0/jekyll&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-BoxStarterPackage -PackageName https://gist.githubusercontent.com/digitaldrummerj/f290a11d16e98beabd8b/raw/de3d6d551a0f881e0e66cf6c8ec2cc49c35525e0/jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If there were no errors, you are now ready to install jekyll.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-getting-your-blog-onto-your-computer&#34;&gt;Section 2: Getting your Blog onto your computer&lt;/h2&gt;

&lt;p&gt;In this section, you will clone the blog repo from github and install jekyll.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the directory c:\projects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:
mkdir \projects
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into c:\projects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c: 
cd \projects
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone your github blog repo to your local machine with the &amp;ldquo;git clone [Repo Name]&amp;rdquo; command.  Below is the example if you were to clone the jekyll repo for this blog series.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/digitaldrummerj/jekyllforblogseries.git 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into the repo that you just cloned&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd jekyllforblogseries
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure that you have a GemFile with no file extension in the root of your repo with the following contents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;
gem &#39;github-pages&#39;
gem &#39;jekyll-redirect-from&#39;
gem &#39;wdm&#39;, &#39;~&amp;gt; 0.1.0&#39; if Gem.win_platform?
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the command to install the github-pages gem which has all of the required modules to make jekyll work and the jekyll redirect from plugin.  It is one of the few plugins that Github pages supports and allows you to move pages around and have them automatically redirect so that people with bookmarks can still find a moved page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The last thing we need to do is update the github-pages dependencies to be able to use the latest pygments.rb gem as the version included with the github-pages gem is not compatible with Windows&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle update github-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we have jekyll installed.  Time to test it out&lt;/p&gt;

&lt;h2 id=&#34;section-3-testing-your-blog-works-on-your-computer&#34;&gt;Section 3: Testing Your Blog Works on Your Computer&lt;/h2&gt;

&lt;p&gt;Now that we have everything installed for jekyll it is time to test it out.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;From a command prompt in your blog repo directory run the following command to tell jekyll to build and run the web site locally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If it build successfully you will see something like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/jekyllserve.png&#34; alt=&#34;Jekyll Serve Success&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now if you open up your browser and navigate to &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; you will see you blog.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-3-1-setting-up-dev-config-yml&#34;&gt;Section 3.1: Setting Up Dev _config.yml&lt;/h2&gt;

&lt;p&gt;However, by default your _config.yml file will be set for production which will cause any place that you have referenced the site.url to not working on your local machine.  You don&amp;rsquo;t want to change your _config.yml file though for development since you will accidentally check it in at some point and break your blog.  Instead we can tell jekyll to use multiple configuration files.  When you load multiple files it will load them in order and then override any settings from a previously loaded config.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new file in the root of your repo called _configdev.yml&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the _configdev.yml add the following lines to set the url, turn off disqus/google analytics and google search.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# then add this to the url as well &amp;quot;/repository-name&amp;quot;
url: http://localhost:4000
disqus:
disquscommentcount: 
google_analytics: 
google_search: 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If your jekyll serve is still running do a ctrl+c to stop it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now run the following command to tell jekyll the config yml files to load&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve --config _config.yml,_configdev.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If it build successfully you will see something like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/jekyllserve_multipleconfigs.png&#34; alt=&#34;Jekyll Serve Success&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now if you open up your browser and navigate to &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; you will see you blog and any place that reference site.url will be working..&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you are ready to do all of your editing locally and  test it out before the world gets to see it.&lt;/p&gt;

&lt;p&gt;In our next lesson, I will show you how to install jekyll on OSx and Linux.  Then you will learn how to create draft blog post that will only show on your local machine so that you don&amp;rsquo;t have to either clutter up your post directory with drafts or worry about accidentally publishing an unfinished article.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 10: Installing Jekyll On Linux</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-10-installing-jekyll-on-linux/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-10-installing-jekyll-on-linux/" rel="alternate" type="text/html" title="Jekyll Part 10: Installing Jekyll On Linux" />
      <updated>Wed, 09 Sep 2015 00:00:00 +0000</updated>
      <published>Wed, 09 Sep 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-10-installing-jekyll-on-linux/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to setup your Ubuntu Linux computer to be able to edit your blog on your computer.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Up to this point we have been using the Github web site to edit all of our files but the downside to this is that any chances you want to make show up live in your blog before you have had a chance to test them.&lt;/p&gt;

&lt;p&gt;Instead, it is better if you can test out all of your changes and review your blog post before letting the world see them.  It will also let you have draft post where you can see them locally but on github they will not be visible.&lt;/p&gt;

&lt;h2 id=&#34;section-1-installing-software&#34;&gt;Section 1: installing Software&lt;/h2&gt;

&lt;p&gt;We need to install nodejs, ruby 2.x, python pip, and git.&lt;/p&gt;

&lt;h3 id=&#34;section-1-1-installing-nodejs&#34;&gt;Section 1.1: Installing NodeJs&lt;/h3&gt;

&lt;p&gt;First we are going to install NodeJS using the command below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Note the new setup script name for Node.js v0.12
curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -

# Then install with:
sudo apt-get install -y nodejs

node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-1-2-installing-ruby&#34;&gt;Section 1.2: Installing Ruby&lt;/h3&gt;

&lt;p&gt;Ubuntu Trusty 14.04 unfortunately comes with Ruby 1.9.x and we need 2.x.  There is also a bug in the ubuntu packages where the Ruby 2.0 install is actually the 1.9.3 branch.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are going to use &lt;a href=&#34;https://github.com/postmodern/ruby-install&#34;&gt;ruby-install&lt;/a&gt; to get the latest version of Ruby installed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz
tar -xzvf ruby-install-0.5.0.tar.gz
cd ruby-install-0.5.0/
sudo make install
sudo ruby-install --system ruby     
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to install chruby to change the ruby version to the one that we just installed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -O chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz
tar -xzvf chruby-0.3.9.tar.gz
cd chruby-0.3.9/
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To make chruby auto run we need to add the following lines to our ~/.bashrc or ~/.bash_profile script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source /usr/local/share/chruby/chruby.sh
source /usr/local/share/chruby/auto.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In order to it to take effect run replace .bashrc with .bash_profile if you are using that instead&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verify your ruby version changed with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure that the Ruby Gems are updated and then install the bundler GEM&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem update --system    
sudo gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;section-1-3-python&#34;&gt;Section 1.3: Python&lt;/h3&gt;

&lt;p&gt;In order to use the Pygments code syntax highlighter, we need to install python pip&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pip -y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-1-4-installing-git&#34;&gt;Section 1.4: Installing Git&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install git -y 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-2-getting-your-blog-onto-your-computer&#34;&gt;Section 2: Getting your Blog onto your computer&lt;/h2&gt;

&lt;p&gt;In this section, you will clone the blog repo from github and install jekyll.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a terminal&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the directory ~/projects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/projects
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into c:\projects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/projects
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone your github blog repo to your local machine with the &amp;ldquo;git clone [Repo Name]&amp;rdquo; command.  Below is the example if you were to clone the jekyll repo for this blog series.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/digitaldrummerj/jekyllforblogseries.git  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into the repo that you just cloned&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd jekyllforblogseries
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure that you have a GemFile with no file extension in the root of your repo with the following contents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;
gem &#39;github-pages&#39;
gem &#39;jekyll-redirect-from&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the command to install the github-pages gem which has all of the required modules to make jekyll work and the jekyll redirect from plugin.  It is one of the few plugins that Github pages supports and allows you to move pages around and have them automatically redirect so that people with bookmarks can still find a moved page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we have jekyll installed.  Time to test it out&lt;/p&gt;

&lt;h2 id=&#34;section-3-testing-your-blog-works-on-your-computer&#34;&gt;Section 3: Testing Your Blog Works on Your Computer&lt;/h2&gt;

&lt;p&gt;Now that we have everything installed for jekyll it is time to test it out.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;From a command prompt in your blog repo directory run the following command to tell jekyll to build and run the web site locally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If it build successfully you will see something like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/jekyllserve.png&#34; alt=&#34;Jekyll Serve Success&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now if you open up your browser and navigate to &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; you will see you blog.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, by default your _config.yml file will be set for production which will cause any place that you have referenced the site.url to not working on your local machine.  You don&amp;rsquo;t want to change your _config.yml file though for development since you will accidentally check it in at some point and break your blog.  Instead we can tell jekyll to use multiple configuration files.  When you load multiple files it will load them in order and then override any settings from a previously loaded config.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new file in the root of your repo called _configdev.yml&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the _configdev.yml add the following lines to set the url, turn off disqus/google analytics and google search.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # then add this to the url as well &amp;quot;/repository-name&amp;quot;
    url: http://localhost:4000
    disqus:
    disquscommentcount: 
    google_analytics: 
    google_search: 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If your jekyll serve is still running do a ctrl+c to stop it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now run the following command to tell jekyll the config yml files to load&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve --config _config.yml,_configdev.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If it build successfully you will see something like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/jekyllserve_multipleconfigs.png&#34; alt=&#34;Jekyll Serve Success&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now if you open up your browser and navigate to &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; you will see you blog and any place that reference site.url will be working..&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you are ready to do all of your editing locally and  test it out before the world gets to see it.&lt;/p&gt;

&lt;p&gt;In our next lesson, I will show you how to install jekyll on OSx.  Then you will learn how to create draft blog post that will only show on your local machine so that you don&amp;rsquo;t have to either clutter up your post directory with drafts or worry about accidentally publishing an unfinished article.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 11: Installing Jekyll On OSx</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-11-installing-jekyll-osx/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-11-installing-jekyll-osx/" rel="alternate" type="text/html" title="Jekyll Part 11: Installing Jekyll On OSx" />
      <updated>Wed, 09 Sep 2015 00:00:00 +0000</updated>
      <published>Wed, 09 Sep 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-11-installing-jekyll-osx/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to setup your MAC (OSx) computer to be able to edit your blog on your computer.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Up to this point we have been using the Github web site to edit all of our files but the downside to this is that any chances you want to make show up live in your blog before you have had a chance to test them.&lt;/p&gt;

&lt;p&gt;Instead, it is better if you can test out all of your changes and review your blog post before letting the world see them.  It will also let you have draft post where you can see them locally but on github they will not be visible.&lt;/p&gt;

&lt;h2 id=&#34;section-1-installing-software&#34;&gt;Section 1: Installing Software&lt;/h2&gt;

&lt;p&gt;We need to install XCode command line tools, nodejs and python pip.&lt;/p&gt;

&lt;h3 id=&#34;section-1-1-installing-nodejs&#34;&gt;Section 1.1: Installing NodeJs&lt;/h3&gt;

&lt;p&gt;Head over to &lt;a href=&#34;https://nodejs.org&#34;&gt;nodejs.org&lt;/a&gt; and download the NodeJs Installer and run it.  Take all of the defaults.&lt;/p&gt;

&lt;h3 id=&#34;section-1-2-installing-xcode-command-line-tools&#34;&gt;Section 1.2: Installing XCode Command Line Tools&lt;/h3&gt;

&lt;p&gt;Unfortunately to get the XCode command line tools, you first need to install XCode.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go the App Store&lt;/li&gt;
&lt;li&gt;Search for XCode&lt;/li&gt;
&lt;li&gt;Hit the Install Button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once XCode is installed, open up a terminal windows (Application -&amp;gt; Other -&amp;gt; Terminal) and run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will bring up a windows asking you to install the command line tools package that we need and just click the Install button.&lt;/p&gt;

&lt;h3 id=&#34;section-1-3-installing-pygments-code-highlighter&#34;&gt;Section 1.3: Installing Pygments Code Highlighter&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    pip install Pygments
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;section-1-4-install-ruby-gems&#34;&gt;Section 1.4: Install Ruby Gems&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo gem update --system    
sudo gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-2-getting-your-blog-onto-your-computer&#34;&gt;Section 2: Getting your Blog onto your computer&lt;/h2&gt;

&lt;p&gt;In this section, you will clone the blog repo from github and install jekyll.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a terminal&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the directory ~/projects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/projects
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into c:\projects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/projects
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone your github blog repo to your local machine with the &amp;ldquo;git clone [Repo Name]&amp;rdquo; command.  Below is the example if you were to clone the jekyll repo for this blog series.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/digitaldrummerj/jekyllforblogseries.git  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into the repo that you just cloned&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd jekyllforblogseries
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure that you have a GemFile with no file extension in the root of your repo with the following contents.  Warning that Github Pages supports very few jekyll plugins.  The jekyll-redirect-from is one of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;
gem &#39;github-pages&#39;
gem &#39;jekyll-redirect-from&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From the jekyllforblogseries directory or your blogs directory, run the following command to install gems listed in the Gemfile.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we have jekyll installed.  Time to test it out&lt;/p&gt;

&lt;h2 id=&#34;section-3-testing-your-blog-works-on-your-computer&#34;&gt;Section 3: Testing Your Blog Works on Your Computer&lt;/h2&gt;

&lt;p&gt;Now that we have everything installed for jekyll it is time to test it out.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;From a command prompt in your blog repo directory run the following command to tell jekyll to build and run the web site locally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If it build successfully you will see something like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/jekyllserve.png&#34; alt=&#34;Jekyll Serve Success&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now if you open up your browser and navigate to &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; you will see you blog.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, by default your _config.yml file will be set for production which will cause any place that you have referenced the site.url to not working on your local machine.  You don&amp;rsquo;t want to change your _config.yml file though for development since you will accidentally check it in at some point and break your blog.  Instead we can tell jekyll to use multiple configuration files.  When you load multiple files it will load them in order and then override any settings from a previously loaded config.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new file in the root of your repo called _configdev.yml&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the _configdev.yml add the following lines to set the url, turn off disqus/google analytics and google search.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# then add this to the url as well &amp;quot;/repository-name&amp;quot;
url: http://localhost:4000
disqus:
disquscommentcount: 
google_analytics: 
google_search: 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If your jekyll serve is still running do a ctrl+c to stop it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now run the following command to tell jekyll the config yml files to load&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve --config _config.yml,_configdev.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If it build successfully you will see something like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/jekyllserve_multipleconfigs.png&#34; alt=&#34;Jekyll Serve Success&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now if you open up your browser and navigate to &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; you will see you blog and any place that reference site.url will be working..&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you are ready to do all of your editing locally and  test it out before the world gets to see it.&lt;/p&gt;

&lt;p&gt;In our next lesson, I will show you how to create draft blog post that will only show on your local machine so that you don&amp;rsquo;t have to either clutter up your post directory with drafts or worry about accidentally publishing an unfinished article.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Camtasia 8.5 - How to Record to Mono</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/camtasia-8.5-record-to-mono/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/camtasia-8.5-record-to-mono/" rel="alternate" type="text/html" title="Camtasia 8.5 - How to Record to Mono" />
      <updated>Tue, 25 Aug 2015 00:00:00 +0000</updated>
      <published>Tue, 25 Aug 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/camtasia-8.5-record-to-mono/">&lt;p&gt;Today I upgraded from Camtasia 8.3 to Camtasia 8.5 and ran into an issue with my audio settings only recording to the left speaker.  I know that my microphone only records in mono so this was not surprising.&lt;/p&gt;

&lt;p&gt;What was surprising is that the audio settings for the Camtasia Recorder were greyed out when using the TREC format.&lt;/p&gt;

&lt;p&gt;In Camtasia 8.3 I could tell the Camtasia Recorder to record in mono so that it would be in both left and right speakers.&lt;/p&gt;

&lt;p&gt;After a little bit of searching I came across this &lt;a href=&#34;https://feedback.techsmith.com/techsmith/topics/audio_settings_greyed_out_disabled&#34;&gt;forum post&lt;/a&gt; that had the answer at the bottom.&lt;/p&gt;

&lt;p&gt;When you are in Camtasia Studio, click on your clip, select audio options and check the mix to mono option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/Camtasia8_5_MixToMono.png&#34; alt=&#34;Camtasia Mix To Mono&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note: You may have to separate the audio from the video by right clicking on the clip and selecting the separate video and audio.   Then click on the audio track and follow the steps above.&lt;/p&gt;

&lt;p&gt;Problem solved and I can go back to finishing my video.&lt;/p&gt;
</content>
    <category term="camtasia" />

        
        </entry>
    
		<entry>
      <title>Visual Studio 2015 - External Web Tools</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-2015-external-web-tools/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-2015-external-web-tools/" rel="alternate" type="text/html" title="Visual Studio 2015 - External Web Tools" />
      <updated>Thu, 20 Aug 2015 00:00:00 +0000</updated>
      <published>Thu, 20 Aug 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-2015-external-web-tools/">&lt;p&gt;I ran into an issue with an npm package mis-behaving in Visual Studio 2015 but working just fine from the command line.&lt;/p&gt;

&lt;p&gt;After scratching my head for awhile trying to figure out what was going on, I discovered that Visual Studio was pointing to its own version of npm and node and not that ones that were available in my path that the command line was using. Visual Studio 2015 ships with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these tools are installed as part of Visual Studio but they are installed into the Visual Studio install directory and are not used by the command line.&lt;/p&gt;

&lt;p&gt;If you have manually installed any of these tools like I had, then most likely you have a difference in versions between what the command line is using versus Visual Studio.&lt;/p&gt;

&lt;p&gt;Luckily you can easily tell Visual Studio which versions to use.&lt;/p&gt;

&lt;p&gt;The settings in Visual Studio are under Tools -&amp;gt; Options -&amp;gt; Projects and Solutions -&amp;gt; External Web Tools&lt;/p&gt;

&lt;p&gt;By default the system path is set to be looked at after the Visual Studio versions ($(DevEnvDir)\Extensions\Microsoft\Web Tools\External).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/VisualStudio/VisualStudio2015-ExternalWebTools.png&#34; alt=&#34;Visual Studio External Web Tools Options&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To use the system PATH environment variable instead, click on the $(PATH) and use the arrows at the top-right to move it up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/VisualStudio/VisualStudio2015-ExternalWebTools_PathHigher.png&#34; alt=&#34;Visual Studio External Web Tools Path Moved Higher&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This will ensure that the version of the tools used matches what the command line is using.&lt;/p&gt;
</content>
    <category term="visual studio" /><category term="ionic" /><category term="npm" /><category term="nodejs" /><category term="bower" /><category term="git" />

        
        </entry>
    
		<entry>
      <title>Visual Studio Code Snippets</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-code-snippets/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-code-snippets/" rel="alternate" type="text/html" title="Visual Studio Code Snippets" />
      <updated>Tue, 18 Aug 2015 00:00:00 +0000</updated>
      <published>Tue, 18 Aug 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-code-snippets/">

&lt;p&gt;There are a bunch of built-in Visual Studio code snippets that will generate code for you with a short keyword and then a tab key press.  These shortcuts will make you more efficient when writing code such as creating properties, loops, exceptions, etc.&lt;/p&gt;

&lt;p&gt;Below I have listed the code snippets  that I most frequently use and what the output from them looks like.&lt;/p&gt;

&lt;p&gt;To use these snippets type they keyword and then press the tab key.&lt;/p&gt;

&lt;h2 id=&#34;loops&#34;&gt;Loops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do
{
} while (b);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;while&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while (true)
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; UPPER; i++)
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;foreach&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (var VARIABLE in COLLECTION)
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (b)
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;else&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;else
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;switch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch (@enum)
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;error-trapping&#34;&gt;Error Trapping&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try
{
}
catch (Exception)
{
    throw;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tryf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try
{
}
finally
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exception&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Serializable]
public class MyException : Exception
{
    //
    // For guidelines regarding the creation of new exception types, see
    // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/cpconerrorraisinghandlingguidelines.asp
    // and
    // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dncscol/html/csharp07192001.asp
    public MyException()
    {
    }

    public MyException(string message) : base(message)
    {
    }

    public MyException(string message, Exception inner) : base(message, inner)
    {
    }

    protected MyException(
        SerializationInfo info,
        StreamingContext context) : base(info, context)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;properties&#34;&gt;Properties&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;prop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public TYPE Type { get; set; }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;propfull&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private int myVar;

public int MyProperty
{
    get { return myVar; }
    set { myVar = value; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;propg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public int I { get; private set; }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;misc&#34;&gt;Misc&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ctor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Misc
{
    public Misc()
    {   
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;enum&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum MyEnum
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;struct&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct MyStruct
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;num;region&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#region MyRegion
#endregion
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are several more code snippets that are available at &lt;a href=&#34;http://tinyurl.com/vscodesnippets&#34;&gt;http://tinyurl.com/vscodesnippets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With these few code snippets you will be amazed at how much less code you end up writing by hand.  Ever little bit helps to make you more productive and efficient as a developer.&lt;/p&gt;

&lt;p&gt;Let me know what you favorite snippets are or ones that you have created.&lt;/p&gt;
</content>
    <category term="productivity" /><category term="visual studio" />

        
        </entry>
    
		<entry>
      <title>Favorite Visual Studio Shortcuts</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-shortcuts/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-shortcuts/" rel="alternate" type="text/html" title="Favorite Visual Studio Shortcuts" />
      <updated>Thu, 13 Aug 2015 00:00:00 +0000</updated>
      <published>Thu, 13 Aug 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/visual-studio-shortcuts/">

&lt;p&gt;Here is a list of  Visual Studio Community Edition shortcuts that I use.&lt;/p&gt;

&lt;h2 id=&#34;building-solution&#34;&gt;Building Solution&lt;/h2&gt;

&lt;table class=&#34;exampleTable&#34;&gt;
&lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
        &lt;td&gt;Build Solution&lt;/td&gt;
    &lt;td&gt;Ctrl+Shift+B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;

    &lt;td&gt;Run Code Analysis on Solution&lt;/td&gt;
    &lt;td&gt;Alt+F11&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;building-current-project&#34;&gt;Building Current Project&lt;/h2&gt;

&lt;p&gt;There is no default shortcut for building the current project or running code analysis on it.  You can go  under the Build menu and select to build just the current project but this is a manual step that requires you to navigate through the menus.&lt;/p&gt;

&lt;p&gt;To accomplish this, I set the keyboard shortcut Ctrl + \ .&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tools -&amp;gt; Options -&amp;gt; Keyboard or Ctrl + Q, type Keyboard, and hit Enter&lt;/li&gt;
&lt;li&gt;Set shortcut for Build.BuildSelection.&lt;/li&gt;
&lt;li&gt;Open a file and Ctrl+\ should now build that project&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Run Code Analysis on Current Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also run code analysis on the current project like you can on the whole solution.&lt;/p&gt;

&lt;p&gt;To accomplish this, I set the keyboard shortcut Ctrl+Alt+&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tools -&amp;gt; Options -&amp;gt; Keyboard or Ctrl + Q, type Keyboard, and hit Enter&lt;/li&gt;
&lt;li&gt;Set shortcut for Build.RunCodeAnalysisonSelection.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Open a file and Ctrl+Alt+\ to run the the code analysis for the project&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;table class=&#34;exampleTable&#34;&gt;
&lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
        &lt;td&gt;Start Debugging&lt;/td&gt;
    &lt;td&gt;F5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;

    &lt;td&gt;Start without Debugging&lt;/td&gt;
    &lt;td&gt;Ctrl+F5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Toggle Breakpoint On/Off for line&lt;/td&gt;
    &lt;td&gt;F9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Run to Cursor and then stop like there is a breakpoint on that line&lt;/td&gt;
    &lt;td&gt;Ctrl+F10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Step Through the Code Line by Line&lt;/td&gt;
    &lt;td&gt;F11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Modify what the debugger displays for an object&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://tinyurl.com/vsdebugattrib&#34;&gt;http://tinyurl.com/vsdebugattrib&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;h2 id=&#34;searching&#34;&gt;Searching&lt;/h2&gt;

&lt;table class=&#34;exampleTable&#34;&gt;
&lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Quick Search&lt;/td&gt;
    &lt;td&gt;Ctrl+Q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Find in Files&lt;/td&gt;
    &lt;td&gt;Ctrl+Shift+F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Next Search Result&lt;/td&gt;
    &lt;td&gt;F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Previous Search Result&lt;/td&gt;
    &lt;td&gt;Shift+F8&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;

&lt;table class=&#34;exampleTable&#34;&gt;
&lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;
&lt;tr &gt;
    &lt;td&gt;Go To Definition&lt;/td&gt;
    &lt;td&gt;F12 &lt;br /&gt;Ctrl+Click with &lt;a href=&#34;http://tinyurl.com/vsprodpower&#34;&gt;Productivity Power Tools&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Close All Documents&lt;/td&gt;
    &lt;td&gt;Alt+W,L&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;h2 id=&#34;visual-studio-windows-layout&#34;&gt;Visual Studio Windows Layout&lt;/h2&gt;

&lt;p&gt;In Visual Studio 2015, you can now save the Windows Layout and change them with a shortcut key.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To Save:  In Visual Studio 2015, under the Windows menu, click the Save Windows Layout&lt;/li&gt;
&lt;li&gt;To Apply Layout: In Visual Studio 2015, under the Windows menu, select the Apply Windows layout popout and pick the layout to apply.  There is also a shortcut key for each of the saved Windows layouts.  By default it is Ctrl+Alt+# (e.g. Ctrl+Alt+1 for the 1st saved layout)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have Visual Studio 2013 and below, you can use use the Visual Studio extension, &lt;a href=&#34;http://tinyurl.com/vslayout&#34;&gt;Layouts O Rama&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;resharper-searching-navigation&#34;&gt;Resharper Searching/Navigation&lt;/h2&gt;

&lt;p&gt;If you have Resharper there are several additional options that you get for searching.&lt;/p&gt;

&lt;p&gt;Note: Assumes Visual Studio keyboard layout for Resharper&lt;/p&gt;

&lt;table class=&#34;exampleTable&#34;&gt;
&lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Go to Everything&lt;/td&gt;
    &lt;td&gt;Ctrl + T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Go to File&lt;/td&gt;
    &lt;td&gt;Ctrl + Shift + T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Go to Member in File&lt;/td&gt;
    &lt;td&gt;Alt + \&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Find Current File In Solution Explorer&lt;/td&gt;
    &lt;td&gt;Alt + Shift + L&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;h2 id=&#34;format-document&#34;&gt;Format Document&lt;/h2&gt;

&lt;table class=&#34;exampleTable&#34;&gt;
&lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Format Document&lt;/td&gt;
    &lt;td&gt;Ctrl+K,D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;alt&#34;&gt;
    &lt;td&gt;Resharper Format Document&lt;/td&gt;
    &lt;td&gt;Ctrl+E,F
    &lt;br /&gt;Note: Assumes Visual Studio keyboard layout
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&#34;additional-shortcuts&#34;&gt;Additional Shortcuts&lt;/h2&gt;

&lt;p&gt;There are a lot more shortcuts that are set in Visual Studio.  I have only covered the ones that I use the most.  To see the full list, visit &lt;a href=&#34;http://visualstudioshortcuts.com&#34;&gt;http://visualstudioshortcuts.com&lt;/a&gt;.&lt;/p&gt;
</content>
    <category term="productivity" /><category term="visual studio" />

        
        </entry>
    
		<entry>
      <title>Favorite Visual Studio Extensions</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/favorite-visual-studio-extensions/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/favorite-visual-studio-extensions/" rel="alternate" type="text/html" title="Favorite Visual Studio Extensions" />
      <updated>Tue, 11 Aug 2015 00:00:00 +0000</updated>
      <published>Tue, 11 Aug 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/favorite-visual-studio-extensions/">

&lt;p&gt;In the Visual Studio Extension Gallery there are hundreds of extensions that are available.  The extensions add additional functionality to Visual Studio.  Below are the extensions that I typically have installed.&lt;/p&gt;

&lt;h2 id=&#34;web-essentials&#34;&gt;Web Essentials&lt;/h2&gt;

&lt;p&gt;Big pile of awesome for web developers.  If you are doing web development you need to have this installed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vswebessentials.com/&#34;&gt;http://vswebessentials.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enhanced browser link&lt;/li&gt;
&lt;li&gt;Markdown Editor/Preview&lt;/li&gt;
&lt;li&gt;Minification of javascript files&lt;/li&gt;
&lt;li&gt;JSHint / CSSHint integration&lt;/li&gt;
&lt;li&gt;TypeScript preview of compiled ts file&lt;/li&gt;
&lt;li&gt;Plus much much more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ghostdoc&#34;&gt;GhostDoc&lt;/h2&gt;

&lt;p&gt;Auto generate Xml doc comments based on your method/parameter names, exceptions through and return types.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/ghostdoc&#34;&gt;http://tinyurl.com/ghostdoc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Default shortcut: ctrl+shift+d&lt;/p&gt;

&lt;h2 id=&#34;i-hate-regions&#34;&gt;I Hate Regions&lt;/h2&gt;

&lt;p&gt;Regions is one of those features that you either love or hate.  If you are not a fan of regions then this extension is for you.  No longer will you even care that a file has a region in it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/regionssuck&#34;&gt;http://tinyurl.com/regionssuck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto expand regions when file opens&lt;/li&gt;
&lt;li&gt;Make the region text smaller and blend more into background so that it stays out of the way&lt;/li&gt;
&lt;li&gt;Can be configure to not allow shrinking of the regions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;productiviy-power-tools&#34;&gt;Productiviy Power Tools&lt;/h2&gt;

&lt;p&gt;This extension is written by Microsoft adds a lot of productivity enhancements to Visual Studio that you just wish came out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/vsprodpower&#34;&gt;http://tinyurl.com/vsprodpower&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collapse projects to folders&lt;/li&gt;
&lt;li&gt;Copy and paste references between projects&lt;/li&gt;
&lt;li&gt;Copy and paste project as a reference&lt;/li&gt;
&lt;li&gt;Fix mixed tabs and spaces&lt;/li&gt;
&lt;li&gt;Peek definition&lt;/li&gt;
&lt;li&gt;Open containing folder for project&lt;/li&gt;
&lt;li&gt;Open command line&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Solution error visualizer&lt;/li&gt;
&lt;li&gt;Sort using statements&lt;/li&gt;
&lt;li&gt;Remove unused using statements
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vs-commands&#34;&gt;VS Commands&lt;/h2&gt;

&lt;p&gt;Another productivity tool for Visual Studio.  Unfortunately, there is not yet a Visual Studio 2015 version.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/vscommands13&#34;&gt;http://tinyurl.com/vscommands13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cancel build on first error&lt;/li&gt;
&lt;li&gt;Keep documents open when reloading project&lt;/li&gt;
&lt;li&gt;Start new instance without debugging&lt;/li&gt;
&lt;li&gt;Start new instance with debugging&lt;/li&gt;
&lt;li&gt;Sync zoom levels between pages
&lt;br /&gt;

&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;switch-startup-project&#34;&gt;Switch Startup Project&lt;/h2&gt;

&lt;p&gt;Easily configure different startup project configurations and be able to switch between them or a select single project to start up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/vsswitchstart&#34;&gt;http://tinyurl.com/vsswitchstart&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;layout-o-rama&#34;&gt;Layout O Rama&lt;/h2&gt;

&lt;p&gt;Store Visual Studio windows layout and be able to quickly change to a new layout.  This is really useful when moving to different monitor setups/resolution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Visual Studio 2015 this is backed into Visual Studio.  You can save layouts under the Windows menu in Visual Studio and quickly apply those saved layouts with a shortcut key or under the Windows -&amp;gt; Apply Layout menu.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/vslayout&#34;&gt;http://tinyurl.com/vslayout&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;task-runner-explorer&#34;&gt;Task Runner Explorer&lt;/h2&gt;

&lt;p&gt;Run Grunt or Gulp task directly in Visual Studio.&lt;/p&gt;

&lt;p&gt;Can hook Grunt/Gulp task up to the Visual Studio build system (before/after build, on clean or solution open)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Visual Studio 2015, this is included out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/vstaskrunner&#34;&gt;http://tinyurl.com/vstaskrunner&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;file-nesting&#34;&gt;File Nesting&lt;/h2&gt;

&lt;p&gt;Easily group files by name and be able to collapse the group.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tinyurl.com/vsfilenest&#34;&gt;http://tinyurl.com/vsfilenest&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-new-file&#34;&gt;Add New File&lt;/h2&gt;

&lt;p&gt;Fast and easy way to add new files to any project including files that start with a dart.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/3f820e99-6c0d-41db-aa74-a18d9623b1f3&#34;&gt;https://visualstudiogallery.msdn.microsoft.com/3f820e99-6c0d-41db-aa74-a18d9623b1f3&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;package-intellisense&#34;&gt;Package Intellisense&lt;/h2&gt;

&lt;p&gt;NPM and Bower package intellisense directly in the Visual Studio JSON editor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/65748cdb-4087-497e-a394-2e3449c8e61e&#34;&gt;https://visualstudiogallery.msdn.microsoft.com/65748cdb-4087-497e-a394-2e3449c8e61e&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;bundler-minifier&#34;&gt;Bundler &amp;amp; Minifier&lt;/h2&gt;

&lt;p&gt;Bundle and minify JS, CSSS, and Html files. Can be wired into the build system in Visual Studio.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/9ec27da7-e24b-4d56-8064-fd7e88ac1c40&#34;&gt;https://visualstudiogallery.msdn.microsoft.com/9ec27da7-e24b-4d56-8064-fd7e88ac1c40&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;open-command-line&#34;&gt;Open Command Line&lt;/h2&gt;

&lt;p&gt;Open a command line at the root of the project.  Supports all consoles: CMD, Powershell, Bash, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A similar feature is also available as part of the Productivity Power Tools.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/4e84e2cf-2d6b-472a-b1e2-b84932511379&#34;&gt;https://visualstudiogallery.msdn.microsoft.com/4e84e2cf-2d6b-472a-b1e2-b84932511379&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;stop-on-first-build-error&#34;&gt;Stop on First build Error&lt;/h2&gt;

&lt;p&gt;Stops a solution build immediately after a project has a failed to build error.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/91aaa139-5d3c-43a7-b39f-369196a84fa5&#34;&gt;https://visualstudiogallery.msdn.microsoft.com/91aaa139-5d3c-43a7-b39f-369196a84fa5&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;resharper&#34;&gt;Resharper&lt;/h2&gt;

&lt;p&gt;This is the one extension that I cannot live without.  It makes Visual Studio a much better IDE.  Once you start using it, you will wonder how you ever lived without it.  I could easily do several blog post on the features of Resharper.  Below I picked out some of my favorite features.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jetbrains.com/resharper&#34;&gt;http://jetbrains.com/resharper&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to Everything / Type - quick navigation to all possible destinations (types, symbols or files).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Go to file - quickly navigate to any file within your solution.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Go to File member - quickly navigate to a particular method or field in the current file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docs:  &lt;a href=&#34;https://www.jetbrains.com/resharper/features/navigation_search.html&#34;&gt;https://www.jetbrains.com/resharper/features/navigation_search.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Generation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create from usage&lt;/li&gt;
&lt;li&gt;Generate Type members&lt;/li&gt;
&lt;li&gt;Implement/Override Methods&lt;/li&gt;
&lt;li&gt;Generate formatting or equality members&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docs: &lt;a href=&#34;https://www.jetbrains.com/resharper/features/code_generation.html&#34;&gt;https://www.jetbrains.com/resharper/features/code_generation.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Analysis / Refactoring / Code Templates&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous code quality analysis&lt;/li&gt;
&lt;li&gt;Detect errors and code smells&lt;/li&gt;
&lt;li&gt;Quick fixes&lt;/li&gt;
&lt;li&gt;Code Templates (snippets, surround with, and file)&lt;/li&gt;
&lt;li&gt;Lots of refactoring options:  &lt;a href=&#34;https://www.jetbrains.com/resharper/features/code_refactoring.html&#34;&gt;https://www.jetbrains.com/resharper/features/code_refactoring.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code Cleanup&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code formatting&lt;/li&gt;
&lt;li&gt;Optimize namespace declarations&lt;/li&gt;
&lt;li&gt;Remove code redundancies&lt;/li&gt;
&lt;li&gt;File and type layout&lt;/li&gt;
&lt;li&gt;Code style configuration and sharing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Camelhumps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not so much a feature but an option that you can turn on.  I like it so much though that I consider it a feature.&lt;/p&gt;

&lt;p&gt;When turned on it allows you to auto filter intellisense and any search dialogs by typing the first letter of each capitalized word in what you are looking for.  For example, if you have a class called MyClassExample you would search for it by typing MCE.&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;Warning:&lt;/font&gt; Camelhumps changes the behavior of Ctrl+Backspace to now  only delete the previous word instead of the whole declaration.  For example, MyClassExample would only delete Example and leave MyClass.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unit Test Runner&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run and debug test&lt;/li&gt;
&lt;li&gt;Can run multiple unit test sessions simultaneously and independently of each other&lt;/li&gt;
&lt;li&gt;Docs: &lt;a href=&#34;https://www.jetbrains.com/resharper/features/unit_testing.html&#34;&gt;https://www.jetbrains.com/resharper/features/unit_testing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complete feature list at &lt;a href=&#34;https://www.jetbrains.com/resharper/features/&#34;&gt;https://www.jetbrains.com/resharper/features/&lt;/a&gt;&lt;/p&gt;
</content>
    <category term="productivity" /><category term="visual studio" />

        
        </entry>
    
		<entry>
      <title>Favorite Windows Shortcuts</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/windows-shortcuts/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/windows-shortcuts/" rel="alternate" type="text/html" title="Favorite Windows Shortcuts" />
      <updated>Thu, 06 Aug 2015 00:00:00 +0000</updated>
      <published>Thu, 06 Aug 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/windows-shortcuts/">

&lt;p&gt;So many times I watch Windows users spending lots of time doing task that should just take a few seconds but instead are taking several minutes because they are taking the long way around to get the task completed.&lt;/p&gt;

&lt;p&gt;Here are some examples that I see people doing and below I will show you how to get them done the easiest way possible.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Getting 2 programs side by side half screened&lt;/li&gt;
&lt;li&gt;Navigating in Windows Explorer to find the Visual Studio solution or project directory&lt;/li&gt;
&lt;li&gt;Open programs as an administrator&lt;/li&gt;
&lt;li&gt;Just opening up task manager.&lt;br /&gt;

&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  All of these shortcuts are built directly into Windows.&lt;/p&gt;

&lt;h2 id=&#34;moving-program-between-half-screen-full-screen-and-monitors&#34;&gt;Moving Program between half screen, full screen and monitors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Move program to half screen on the left side: Windows Key + Left Arrow&lt;/li&gt;
&lt;li&gt;Move Program to half screen on the right side: Windows Key + Right Arrow&lt;/li&gt;
&lt;li&gt;Move to next monitor in same position: Add Shift key to commands&lt;/li&gt;
&lt;li&gt;Minimze Program: Windows Key + Down Arrow&lt;/li&gt;
&lt;li&gt;Maximize Program: Windows Key + Up Arrow&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;start-program-as-administrator&#34;&gt;Start Program as Administrator&lt;/h2&gt;

&lt;p&gt;Windows 8:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Windows Key&lt;/li&gt;
&lt;li&gt;Start typing program name to bring up search bar&lt;/li&gt;
&lt;li&gt;Find the program that you want to open as admin in the results list&lt;/li&gt;
&lt;li&gt;Either Ctrl + Shift + Left Mouse Click or Ctrl + Shift + Enter&lt;/li&gt;
&lt;li&gt;When prompted to open as adminstrative, click the yes button&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;quickly-opening-up-visual-studio-solutions&#34;&gt;Quickly Opening up Visual Studio Solutions&lt;/h2&gt;

&lt;p&gt;Windows has a feature called Jump List that allows you to pick items to an icon in the taskbar that are available when you right-click on the icons.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pin Visual Studio icon to taskbar&lt;/li&gt;
&lt;li&gt;Open a Visual Studio Solution&lt;/li&gt;
&lt;li&gt;Right-click on Visual Studio icon in taskbar&lt;/li&gt;
&lt;li&gt;Find the project that you just opened and click the pin icon next to it&lt;/li&gt;
&lt;li&gt;Now instead of having to open Visual Studio and navigating to the solution file, you can right-click on the Visual Studio icon and select the solution from the pinned item.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;quickly-opening-task-manager&#34;&gt;Quickly Opening Task Manager&lt;/h2&gt;

&lt;p&gt;Ctrl+Shift+Esc&lt;/p&gt;

&lt;h2 id=&#34;windows-explorer-favorites&#34;&gt;Windows Explorer Favorites&lt;/h2&gt;

&lt;p&gt;Windows explorer has the favorites links section that you can drag folders onto.&lt;/p&gt;

&lt;p&gt;This is a great place to put commonly used folders such as the folders for current project that you are working on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; That adding or removing folders from the Favorites list does not have any affect on the actual folder, it only removes it from the Favorites list.&lt;/p&gt;
</content>
    <category term="productivity" /><category term="windows" />

        
        </entry>
    
		<entry>
      <title>Favorite Windows Programs</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/favorite-windows-software/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/favorite-windows-software/" rel="alternate" type="text/html" title="Favorite Windows Programs" />
      <updated>Tue, 28 Jul 2015 08:00:00 +0000</updated>
      <published>Tue, 28 Jul 2015 08:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/favorite-windows-software/">

&lt;p&gt;Developer productivity is not just about maximizing your speed in editor.  It also includes additional software to help you be more productive.    Below is some of my favorite Windows software that I use.&lt;/p&gt;

&lt;h2 id=&#34;password-management&#34;&gt;Password Management&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lastpass.com&#34;&gt;LastPass&lt;/a&gt; - Password Manager.  Remembers passwords so you don&amp;rsquo;t have to.  Auto log you into web sites, store secure notes, wifi passwords, etc.  Web interface and desktop is free.  Mobile device application is premium version at $12 per year.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;readers&#34;&gt;Readers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getpocket.com&#34;&gt;Pocket&lt;/a&gt; - Save web pages/rss feed articles for later and view when ready including offline.  Way better than keeping a ton of bookmarks around that you never get back to.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://feedly.com&#34;&gt;Feedly&lt;/a&gt; - RSS Feed Reader with Pocket integration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;editors&#34;&gt;Editors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linqpad.net&#34;&gt;Linqpad&lt;/a&gt; - Scratchpad for .NET.  Rich formatted output.  Intellisense.  If you are a .NET program this is a much have application.  Well worth the small amount of money to get the license to use the Intellisense.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; - great all around text editor and development environment.  Focused on code first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;planning&#34;&gt;Planning&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kanbanflow.com&#34;&gt;Kanban Flow / Pomodoro&lt;/a&gt; - I used Kanban Flow to plan my week and use the Pomodoro technique to work on my tasks.  I use the setup that John Sonmez talks about at &lt;a href=&#34;https://www.youtube.com/watch?v=W9k0OhJkjQ0&#34;&gt;https://www.youtube.com/watch?v=W9k0OhJkjQ0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://todoist.com&#34;&gt;Todoist&lt;/a&gt; - Todo Tasks list.  Quick and easy way to add tasks from Chrome or mobile device.  Ultimately I import move these into Kanban Flow but it is much quicker on a mobile device to use Todoist.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;utilities&#34;&gt;Utilities&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; - Install Windows software the easy way.  Take the guess work out of where to download software and how to get it installed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dropbox.com&#34;&gt;Dropbox&lt;/a&gt; - sync directories and files between machines.  Can either sync all or selectively sync file.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getgreenshot.org&#34;&gt;Greenshot&lt;/a&gt; - free utility to take and edit screenshots.  has a basic built-in editor, can copy to clipboard or open an office product (Word, Excel, PowerPoint, outlook) if installed.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.launchy.net&#34;&gt;Launchy&lt;/a&gt; - Forget about the start menu.  Launch programs with a few keystrokes.  Setup shortcuts for common web sites you use.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; - Easily create lightweight and reproducible virtual machines.  If you are using virtual machines on your Windows machine, let Vagrant manage the configurations of it.  No longer will it only work on your machine.  I have a blog series on using Vagrant and Chocolatey together at &lt;a href=&#34;{{ &amp;quot;/vagrant-overview&amp;quot; | prepend: site.baseurl | prepend: site.url }}&#34;&gt;{{ &amp;ldquo;/vagrant-overview&amp;rdquo; | prepend: site.baseurl | prepend: site.url }}&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term="productivity" /><category term="windows" />

        
        </entry>
    
		<entry>
      <title>Presentation Environment Setup</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/presentation-setup/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/presentation-setup/" rel="alternate" type="text/html" title="Presentation Environment Setup" />
      <updated>Thu, 09 Jul 2015 00:00:00 +0000</updated>
      <published>Thu, 09 Jul 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/presentation-setup/">

&lt;p&gt;One of the first things that you learn when giving presentations is that fonts and font size matters just as much as the content.  Below is a listing of the various font settings that I have found to be effective and how to set them in the programs that I use.&lt;/p&gt;

&lt;p&gt;If you have other programs that you use, feel free to leave a comment on the font settings that you use.&lt;/p&gt;

&lt;h2 id=&#34;notepad&#34;&gt;Notepad&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Format -&amp;gt; Fonts

&lt;ul&gt;
&lt;li&gt;Font: Lucida Console&lt;/li&gt;
&lt;li&gt;Font Style: Regular&lt;/li&gt;
&lt;li&gt;Size: 18-22&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;notepad-1&#34;&gt;Notepad++&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Settings -&amp;gt; Style Configurator &amp;hellip;

&lt;ul&gt;
&lt;li&gt;Select Theme: Default (stylers.xml)&lt;/li&gt;
&lt;li&gt;Language: Default Styles&lt;/li&gt;
&lt;li&gt;Style: Global Override&lt;/li&gt;
&lt;li&gt;Font Name: Lucida Console&lt;/li&gt;
&lt;li&gt;Font Size: 18&lt;/li&gt;
&lt;li&gt;Bold: sometimes checked depending on the day
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;command-prompt&#34;&gt;Command Prompt&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open cmd&lt;/li&gt;
&lt;li&gt;Click on menu and select Defaults&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Font&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Font: Lucida Console&lt;/li&gt;
&lt;li&gt;Size: 14pt-18pt&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Bold fonts&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Colors&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Screen Text: Lime (Kermit Green or Green: 255, Red: 0, Blue: 9)&lt;/li&gt;
&lt;li&gt;Screen Background: Black&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;powershell-and-azure-powershell-command-prompt&#34;&gt;Powershell and Azure Powershell Command Prompt&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;For Win 8.1 On Start find PowerShell or Azure Powershell&lt;/li&gt;
&lt;li&gt;Open file location.&lt;/li&gt;
&lt;li&gt;Open shortcut Properties (right click menu).&lt;/li&gt;
&lt;li&gt;Security tab -&amp;gt; Edit your permissions to Modify.&lt;/li&gt;
&lt;li&gt;Select Font tab. (skip errors - nothing is set hence problem)&lt;/li&gt;
&lt;li&gt;Select Font Tab

&lt;ul&gt;
&lt;li&gt;Font: Lucida Console&lt;/li&gt;
&lt;li&gt;Size: 20&lt;/li&gt;
&lt;li&gt;Bold Fonts: Checked&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Select Colors Tag

&lt;ul&gt;
&lt;li&gt;Screen Text: Gray / Red: 238, Green: 237, Blue: 240&lt;/li&gt;
&lt;li&gt;Screen background: blue / Red: 1, Green: 36, Blue: 86&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Select Layout Tab

&lt;ul&gt;
&lt;li&gt;Windows Size Width: 80 (match screen buffer size)&lt;/li&gt;
&lt;li&gt;Window Size Height: 27 (various depending on resolution)&lt;/li&gt;
&lt;li&gt;Let system position window: checked&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Apply Button&lt;/li&gt;
&lt;li&gt;Security tab Edit permissions remove modify.&lt;/li&gt;
&lt;li&gt;Click Ok&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember to always launch powershell from the start menu.  For some reason this does not seem to affect the fonts if you do win+r.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to pin to start menu or task bar if going to be using for demo.&lt;/p&gt;

&lt;h2 id=&#34;powershell-ise&#34;&gt;Powershell ISE&lt;/h2&gt;

&lt;p&gt;Powershell ISE: C:\Windows\System32\WindowsPowerShell\v1.0&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For Win 8.1, on start find powershell_ise.exe&lt;/li&gt;
&lt;li&gt;Tools -&amp;gt; Options -&amp;gt; Colors and Fonts

&lt;ul&gt;
&lt;li&gt;Click &amp;ldquo;Manage Themse&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Select Presentation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don&amp;rsquo;t forget to pin to start menu or task bar if going to be using for demo.&lt;/p&gt;

&lt;h2 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;File -&amp;gt; Preferences -&amp;gt; User Settings&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
        // Wrap based on screen size
        &amp;quot;editor.wrappingColumn&amp;quot;: 0, 

        // Version: 1.03
        //Controls the indentation of wrapped lines. Can be one of &#39;none&#39;, &#39;same&#39; or &#39;indent&#39;.
        //&amp;quot;editor.wrappingIndent&amp;quot;: &amp;quot;indent&amp;quot;,    

        &amp;quot;editor.tabSize&amp;quot;: &amp;quot;2&amp;quot;,

        // Controls the font family.
        &amp;quot;editor.fontFamily&amp;quot;: &amp;quot;Consolas&amp;quot;,

        // Controls the font size.
        &amp;quot;editor.fontSize&amp;quot;: 22,

        // Version: 1.0.3
        //&amp;quot;editor.formatOnType&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;visual-studio-community-ultimate-enterprise&#34;&gt;Visual Studio Community / Ultimate / Enterprise&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Tools -&amp;gt; Options&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment -&amp;gt; General&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Change the color theme back to &amp;ldquo;Blue&amp;rdquo; if you changed it.  You color scheme might be cool but it will distract attendees.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Environment -&amp;gt; Fonts and Colors&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Under the &lt;strong&gt;Show Settings For&lt;/strong&gt; drop down make the following changes:

&lt;ul&gt;
&lt;li&gt;Text Editor: Arial 14&lt;/li&gt;
&lt;li&gt;Editor Tooltip: Calibri 14&lt;/li&gt;
&lt;li&gt;Statement Completion: Calibri 14,&lt;/li&gt;
&lt;li&gt;All Text Tool Windows: Tahoma 13&lt;/li&gt;
&lt;li&gt;Watch, Locals, and Autos Tool Windows: Tahoma 14&lt;/li&gt;
&lt;li&gt;Environment Font: Calibri 14&lt;/li&gt;
&lt;li&gt;Package Manager Console:  ??? (if using it for demos)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Environment -&amp;gt; Start up&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Change At startup dropdown to &amp;ldquo;Show Empty Environment&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Uncheck Download content every&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Environment -&amp;gt; Synchronized Settings&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Uncheck &amp;ldquo;Synchronize settings across devices when signed into Visual Studio&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Note: This is done so that your presentation settings do affect any other machines&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Environment -&amp;gt; Keyboard&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Build.BuildSelection -&amp;gt; Ctrl + &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go To &lt;strong&gt;Projects and Solutions&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Check &amp;ldquo;Track Active Item in Solution Explorer&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Always Show Solution&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Always show Error List if build finishes with errors&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Show Output windows when build starts&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go To &lt;strong&gt;Text Editor&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;** All Languages**

&lt;ul&gt;
&lt;li&gt;Check &amp;ldquo;Word Wrap&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Line Numbers&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Navigation Bar&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Auto Brace Completion&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Go To &lt;strong&gt;All Languages -&amp;gt; Tabs&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Set &amp;ldquo;Indenting&amp;rdquo; to Smart&lt;/li&gt;
&lt;li&gt;Set &amp;ldquo;Tab size&amp;rdquo; to 2&lt;/li&gt;
&lt;li&gt;Set &amp;ldquo;Indent size&amp;rdquo; to 2&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Keep tabs&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;sources-used&#34;&gt;Sources Used&lt;/h2&gt;

&lt;p&gt;Here are some various sources that I got information from.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/saraford/archive/2008/06/09/did-you-know-how-to-increase-your-visual-studio-environment-fonts-for-presentations-233.aspx&#34;&gt;http://blogs.msdn.com/b/saraford/archive/2008/06/09/did-you-know-how-to-increase-your-visual-studio-environment-fonts-for-presentations-233.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hanselman.com/blog/PresentationTipsForPeopleRunningVirtualPCOrVMWare.aspx&#34;&gt;http://www.hanselman.com/blog/PresentationTipsForPeopleRunningVirtualPCOrVMWare.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hanselman.com/blog/11TopTipsForASuccessfulTechnicalPresentation.aspx&#34;&gt;http://www.hanselman.com/blog/11TopTipsForASuccessfulTechnicalPresentation.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <category term="speaking" /><category term="windows" />

        
        </entry>
    
		<entry>
      <title>Vagrant Part 6 - Behind A Proxy Server</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-behind-proxy-server/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-behind-proxy-server/" rel="alternate" type="text/html" title="Vagrant Part 6 - Behind A Proxy Server" />
      <updated>Mon, 06 Jul 2015 00:00:00 +0000</updated>
      <published>Mon, 06 Jul 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-behind-proxy-server/">

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;If you are working behind a proxy server you will need to configure both the host computer and the Vagrant virtual machines to communicate through the proxy server.   It is easy to configure the proxy settings but finding the documentation is a different story.  Below we will go through how to configure the proxy for the vagrant commands (up, status, box add, etc) and then how to configure the virtual machine proxy settings.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-commands&#34;&gt;Vagrant Commands&lt;/h2&gt;

&lt;p&gt;In order for the Vagrant commands that talk out to the internet to work there are several environment variables that need to be set.&lt;/p&gt;

&lt;p&gt;The typical proxy environment variables are http_proxy and https_proxy.  You can either permanently set them so they are always available or you can set them only for the current open command prompt/terminal.&lt;/p&gt;

&lt;h2 id=&#34;on-windows&#34;&gt;On Windows&lt;/h2&gt;

&lt;h3 id=&#34;current-open-command-prompt&#34;&gt;Current Open Command Prompt&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;set http_proxy=http://yourproxyserver:port
set https_proxy=https://yourproxyserver:port
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;permantly-set&#34;&gt;Permantly Set&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;setx http_proxy=http://yourproxyserver:port
setx https_proxy=https://yourproxyserver:port
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;view-proxy-settings&#34;&gt;View Proxy Settings&lt;/h3&gt;

&lt;p&gt;If the commands below just echo out the text instead of the actual proxy server, it means that the proxy server is not set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo %http_proxy%
echo %https_proxy%
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;removing-proxy-setting&#34;&gt;Removing Proxy Setting&lt;/h3&gt;

&lt;p&gt;Unfortunately there is no way to remove the proxy settings from the command line without issuing a reg delete.  For whatever reason, Microsoft only allows you to blank out an environment variable with setx but not remove it.  Luckily, this does make it so that Vagrant will not use a proxy to connect to the internet.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-boxes-virtual-machines&#34;&gt;Vagrant Boxes (Virtual Machines)&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;panel&#34;&gt;
&lt;span style=&#34;color: red&#34;&gt;WARNING: &lt;/span&gt;As of September 13, 2015, the vagrant-proxyconf appears to no longer work on Windows machines.  It has been throwing powershell errors on vagrant up.   It still works on Linux vagrant machines.
&lt;/div&gt;
In order to configure the vagrant virtual machines to use a proxy server, you need to install the vagrant-proxyconf plugin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant plugin install vagrant-proxyconf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The vagrant-proxyconf can configure the proxy settings for Generic Proxy environment variables, Chef, Apt, Docker, Git, npm, PEAR, Subversion, Yum, and Windows.&lt;/p&gt;

&lt;p&gt;Below we will walk through the basics of using the vagrant-proxyconf plugin.  You can read the full documentation at &lt;a href=&#34;https://github.com/tmatilai/vagrant-proxyconf&#34;&gt;https://github.com/tmatilai/vagrant-proxyconf&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;ensuring-the-plugin-is-installed&#34;&gt;Ensuring the plugin is installed&lt;/h3&gt;

&lt;p&gt;There is no built-in vagrant command to make sure that a plugin is installed but since the Vagrantfile is a Ruby file, it is very easy to write a little bit of Ruby code to ensure that the plugin is installed.&lt;/p&gt;

&lt;p&gt;In the Vagrantfile before the &lt;strong&gt;Vagrant.configure(2) do |config|&lt;/strong&gt; line added the following code snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if !Vagrant.has_plugin?(&amp;quot;vagrant-proxyconf&amp;quot;) 
        system(&#39;vagrant plugin install vagrant-proxyconf&#39;)     

     raise(&amp;quot;vagrant-proxyconf installed. Run command again.&amp;quot;);
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;generic-proxy-settings&#34;&gt;Generic Proxy Settings&lt;/h3&gt;

&lt;p&gt;You can either configure the Vagrant proxy settings on a per Vagrant virtual machine basis or globally.&lt;/p&gt;

&lt;p&gt;To configure on a per machine basis, add the code snippet below to the the machines VagrantFile.&lt;/p&gt;

&lt;p&gt;To configure global add the code snippet below to VagrantFile at .vagrant.d/Vagrantfile.  You may need to create this file.  To learn more about a global VagrantFile and the order that the VagrantFile&amp;rsquo;s are read see &lt;a href=&#34;http://docs.vagrantup.com/v2/vagrantfile/&#34;&gt;http://docs.vagrantup.com/v2/vagrantfile/&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  if Vagrant.has_plugin?(&amp;quot;vagrant-proxyconf&amp;quot;)
    config.proxy.http     = &amp;quot;http://192.168.0.2:3128/&amp;quot;
    config.proxy.https    = &amp;quot;http://192.168.0.2:3128/&amp;quot;
    config.proxy.no_proxy = &amp;quot;localhost,127.0.0.1,.example.com&amp;quot;
  end
  # ... rest of the configurations
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Now you have everything you need to configure Vagrant to work from behind a proxy server.  In the next lesson we will cover the different networking options for Vagrant.&lt;/p&gt;
</content>
    <category term="vagrant" /><category term="chocolatey" />

        
        </entry>
    
		<entry>
      <title>Vagrant Part 2 - Provisioning Introduction</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-provisioning-intro/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-provisioning-intro/" rel="alternate" type="text/html" title="Vagrant Part 2 - Provisioning Introduction" />
      <updated>Thu, 18 Jun 2015 00:00:00 +0000</updated>
      <published>Thu, 18 Jun 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-provisioning-intro/">

&lt;p&gt;Welcome to the Vagrant lesson on what Vagrant provisioning is.&lt;/p&gt;

&lt;h2 id=&#34;what-is-vagrant-provisioning&#34;&gt;What is Vagrant Provisioning?&lt;/h2&gt;

&lt;p&gt;Provisioners allow you to automatically install software and alter configurations during the Vagrant up process.&lt;/p&gt;

&lt;p&gt;This is useful since boxes typically aren&amp;rsquo;t built perfectly for your use case. Granted you could just login to the box and install all of the software by hand.  However, by using the provisioning it automates the process, make it repeatable, and requires no human interaction.&lt;/p&gt;

&lt;p&gt;This means that you can run vagrant destory, then vagrant up and have a fully configured environment. This makes provisioning super powerful.&lt;/p&gt;

&lt;p&gt;Vagrant gives you multiple options for provisioning the machine, from simple command line scripts to more complex configuration management systems such as chef and puppet.&lt;/p&gt;

&lt;h2 id=&#34;when-does-vagrant-provisioning-happens&#34;&gt;When Does Vagrant Provisioning Happens?&lt;/h2&gt;

&lt;p&gt;Provisioning happens at certain points during the lifetime of your Vagrant environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the first vagrant up that creates the environment, provisioning is run.&lt;/li&gt;
&lt;li&gt;When vagrant provision is used on a running environment.&lt;/li&gt;
&lt;li&gt;When vagrant reload &amp;ndash;provision is called. The &amp;ndash;provision flag must be present to force provisioning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also bring up your environment and explicitly not run provisioners by specifying &amp;ndash;no-provision.  You would typically only do this if you need to test out something in your vagrant configuration.&lt;/p&gt;

&lt;h2 id=&#34;vagrant-provisioning-providers&#34;&gt;Vagrant Provisioning Providers&lt;/h2&gt;

&lt;p&gt;For this tutorial, we are going to use the shell and file providers as they are the simpliest to get started with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shell Provider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The shell provider will run either batch files or powershell scripts depending on the file extension.  The script needs to be able to run without user interaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Provider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The file provider, copies a file from your machine to the virtual machine but does not run the script.  This is useful for scripts that need user interaction or configuration files that need to be put into place on the virtual machine.&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Now that we understand what provisioning is, in the next couple of lessons we are going to expand on the provisioning to have it install Chocolatey, Boxstarter, and then all of our software using Chocolatey/BoxStarter.&lt;/p&gt;
</content>
    <category term="virtualbox" /><category term="vagrant" /><category term="chocolatey" />

        
        </entry>
    
		<entry>
      <title>Vagrant Part 3 - Provisioning With Chocolatey</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-provisioning-with-chocolatey/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-provisioning-with-chocolatey/" rel="alternate" type="text/html" title="Vagrant Part 3 - Provisioning With Chocolatey" />
      <updated>Thu, 18 Jun 2015 00:00:00 +0000</updated>
      <published>Thu, 18 Jun 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-provisioning-with-chocolatey/">

&lt;p&gt;Welcome to the Vagrant lesson on installing Chocolatey as part of the Vagrant provisioning process.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The first thing we are going to do as part our provisioning is to install Chocolatey onto the virtual machine.&lt;/p&gt;

&lt;p&gt;As we saw in the &lt;a href=&#34;{{&amp;quot;/vagrant-overview&amp;quot; | prepend: site.baseurl | prepend: site.url }}&#34;&gt;Easy Virtual Machine Management&lt;/a&gt; post, having Chocolatey on a machine allows you to easily install all of our software in an automated and repeatable fashion.&lt;/p&gt;

&lt;h2 id=&#34;how-to-install-as-part-of-vagrant-provision&#34;&gt;How to install as part of Vagrant provision?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open Windows Explorer and navigate to the MyFirstMachine directory that we created in the &lt;a href=&#34;{{ &amp;quot;/vagrant-overview&amp;quot; | prepend: site.baseurl | prepend: site.url }}&#34;&gt;Easy Virtual Machine Management&lt;/a&gt; post.&lt;/li&gt;
&lt;li&gt;Create a directory called shell&lt;/li&gt;
&lt;li&gt;In the shell directory, create a file called main.cmd&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the main.cmd in your text editor and add the following line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This will tell powershell to run the file c:\vagrant\shell\InstallChocolatey.ps1 and set the execution policy to bypass so that the powershell script can be run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy Bypass -File &amp;quot;%systemdrive%\vagrant\shell\InstallChocolatey.ps1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the shell directory, create a file called InstallChocolatey.ps1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The file will check to see if Chocolatey is installed and if not, it will install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ChocoInstallPath = &amp;quot;$env:SystemDrive\ProgramData\Chocolatey\bin&amp;quot;

if (!(Test-Path $ChocoInstallPath)) {
    iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The last step is to tell VagrantFile to run the main.cmd file as part of the provisioning.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.provision :shell, path: &amp;quot;shell/main.cmd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;We now have Chocolatey installed on the virtual machine and are ready to start installing software.  The next lesson will install Boxstarter and then you will bulk install all of our software.&lt;/p&gt;
</content>
    <category term="virtualbox" /><category term="vagrant" /><category term="chocolatey" />

        
        </entry>
    
		<entry>
      <title>Vagrant Part 4 - Install Boxstarter</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-installing-boxstarter/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-installing-boxstarter/" rel="alternate" type="text/html" title="Vagrant Part 4 - Install Boxstarter" />
      <updated>Thu, 18 Jun 2015 00:00:00 +0000</updated>
      <published>Thu, 18 Jun 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-installing-boxstarter/">

&lt;p&gt;Welcome to the Vagrant lesson on installing Boxstarter as part of the Vagrant provisioning process.&lt;/p&gt;

&lt;h2 id=&#34;what-does-boxstarter-give-you&#34;&gt;What does Boxstarter give you?&lt;/h2&gt;

&lt;p&gt;Boxstarter gives you the ability to bulk install Chocolatey packages plus several helper functions for Windows configuration options.&lt;/p&gt;

&lt;p&gt;When you bulk install using Boxstarter, it will detect any reboots that are triggered by MSI installers, reboot the machine and then run the Boxstarter script again.&lt;/p&gt;

&lt;p&gt;The Windows configuration helper functions that Boxstarter provides  to enable or disable Windows features include items such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remote desktop.&lt;/li&gt;
&lt;li&gt;Microsoft update.&lt;/li&gt;
&lt;li&gt;User access control (UAC).&lt;/li&gt;
&lt;li&gt;Set taskbar options like size, postion, and lock the size.&lt;/li&gt;
&lt;li&gt;Set Windows explorer options like showing hidden files, protected OS files, and file extensions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-install-boxstarter-part-of-vagrant-provision&#34;&gt;How to install Boxstarter part of Vagrant provision?&lt;/h2&gt;

&lt;p&gt;Since we already have Chocolatey installed as part of the previous lesson, installing Boxstarter just requires use to call the choco install Boxstarter command.&lt;/p&gt;

&lt;p&gt;However, there are a few things we need to do in order for this to work without user interaction.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have to run the install command as separate shell provision command in Vagrant instead of the main.cmd that we used to install Chocolatey. The reason for this is due to the environment path updates that are part of the Chocolatey install are not picked up until you open a new command prompt.&lt;/li&gt;
&lt;li&gt;You have to turn off the Chocolatey confirmation prompts that ask you if you want to install this package or not.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-the-provisioning-scripts&#34;&gt;Creating the Provisioning Scripts&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the shell directory in the MyFirstMachine directory that we created in previous lessons.&lt;/li&gt;
&lt;li&gt;Create a new file called InstallBoxStarter.bat&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following contents to the InstallBoxStarter.bat file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chocolatey feature enable -n=allowGlobalConfirmation
choco install BoxStarter
chocolatey feature disable -n=allowGlobalConfirmation
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the MyFirstMachine folder, open the VagrantFile in a text editor and add the following provision command after the provision command that is running the main.cmd file in the previous lesson.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.provision :shell, path: &amp;quot;shell/InstallBoxStarter.bat&amp;quot;    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;So far in the provisioning process, we have had Vagrant install both Chocolatey and Boxstarter.  In the next lesson, we will use Boxstarter to bulk install our software and configure Windows.&lt;/p&gt;
</content>
    <category term="virtualbox" /><category term="vagrant" /><category term="chocolatey" />

        
        </entry>
    
		<entry>
      <title>Vagrant Part 5 - Installing Your Software</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-installing-your-software/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-installing-your-software/" rel="alternate" type="text/html" title="Vagrant Part 5 - Installing Your Software" />
      <updated>Thu, 18 Jun 2015 00:00:00 +0000</updated>
      <published>Thu, 18 Jun 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-installing-your-software/">

&lt;p&gt;Welcome to the Vagrant lesson on how to use Boxstarter to configure Windows and install software as part of the Vagrant provisioning process.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;We have all of the needed software in place to start configuring and installing software onto our virtual machine.&lt;/p&gt;

&lt;p&gt;In this lesson, we will create an file with all of the install and configuration commands that will be executed with Boxstarter.&lt;/p&gt;

&lt;h2 id=&#34;can-i-only-install-chocolatey-packages&#34;&gt;Can I only install Chocolatey Packages?&lt;/h2&gt;

&lt;p&gt;Even though Boxstarter is a Chocolatey package, you can install and configure more than just Chocolatey packages.  At the end of the day it is running a Powershell script, so anything that you can do with Powershell you can put into your file to execute through Boxstarter.&lt;/p&gt;

&lt;h2 id=&#34;example-file&#34;&gt;Example File&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the shell directory for MyFirstMachine, create a file called BoxStarterGist.txt.&lt;/li&gt;
&lt;li&gt;In the shell directory for MyFirstMachine, create a 2nd file called  RunBoxStarterGist.bat.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the RunBoxStarterGist.bat file and add the following command to copy the file to the temp directory and execute it with Boxstarter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The reason to copy the BoxStarterGist.txt file to a temp directory is that sometimes when Boxstarter reboots, the vagrant synced folder for Virtualbox is not mounted until after Boxstarter tries to continue executing the bat file, so it then fails.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;copy &amp;quot;%systemdrive%\vagrant\shell\BoxStarterGist.txt&amp;quot; &amp;quot;%temp%\BoxStarterGist.txt&amp;quot;

@powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;Install-BoxStarterPackage -PackageName %temp%\\BoxstarterGist.txt&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;populating-the-boxstartergist-txt-file&#34;&gt;Populating the BoxstarterGist.txt file&lt;/h2&gt;

&lt;p&gt;We are going to do several things in the BoxstarterGist.txt file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set some Windows configurations such as taskbar size, Windows explorer show extensions/protected OS file/hidden files, and enable rdp.&lt;/li&gt;
&lt;li&gt;Install some Chocolatey packages such as Visual Studio Code, nodejs, git, and Google Chrome.&lt;/li&gt;
&lt;li&gt;Install some npm packages such as Ionic and Cordova&lt;/li&gt;
&lt;li&gt;Run a git clone to pull down source code for a project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all examples of things that you can do.  At the end of the day it is just a Powershell script so that options are nearly limitless.  I encourage you to read up on Boxstarter at &lt;a href=&#34;http://boxstarter.org&#34;&gt;http://boxstarter.org&lt;/a&gt; to see all of options that you have.&lt;/p&gt;

&lt;p&gt;Open up the BoxstarterGist.txt file in your favorite text editor and proceed to the configuration sections.  I have the sections in the order that I like to install/configure but you can have them in any order in the BoxstarterGist.txt file.&lt;/p&gt;

&lt;h3 id=&#34;windows-configurations&#34;&gt;Windows Configurations&lt;/h3&gt;

&lt;p&gt;This section is the Windows configuration options that we want to set.  The full Windows configuration documentation for Boxstarter is available at &lt;a href=&#34;http://boxstarter.org/WinConfig&#34;&gt;http://boxstarter.org/WinConfig&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enable Remote Desktop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Enable-RemoteDesktop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tell Windows that you want to use Powershell instead of a command prompt when you use the corner navigation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Set-CornerNavigationOptions -EnableUsePowerShellOnWinX
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In Windows exploer turn on hidden files, protected operating system files, show file extensions, and show the full path in the title bar.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Set-ExplorerOptions -EnableShowHiddenFilesFoldersDrives -EnableShowProtectedOSFiles -EnableShowFileExtensions   -EnableShowFullPathInTitlebar
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the taskbar size to small and lock it in place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Set-TaskbarOptions -Size Small -Lock
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;chocolatey-installs&#34;&gt;Chocolatey Installs&lt;/h3&gt;

&lt;p&gt;Now it is time to install all of our Chocolatey Packages.&lt;/p&gt;

&lt;p&gt;The first step is to turn off the prompting from Chocolatey asking if you are sure you want to install this package.  Don&amp;rsquo;t worry will turn it back on in a few lines after the Chocolatey package installs are completed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chocolatey feature enable -n=allowGlobalConfirmation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we are going to install the Chocolatey packages that you want.  I picked a few but go to the Chocolatey gallery at &lt;a href=&#34;http://chocolatey.org&#34;&gt;http://chocolatey.org&lt;/a&gt; and find the packages that meet your needs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install git 
choco install nodejs 
choco install visualstudiocode 
choco install GoogleChrome 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we are done installing Chocolatey packages we are going to turn back on the prompting for confirmation that you wanted to install the packages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chocolatey feature disable -n=allowGlobalConfirmation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last thing we are going to do is pin a couple of items that we installs to the taskbar using a built-in helper from Chocolatey called Install-ChocolateyPinnedTaskBarItem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-ChocolateyPinnedTaskBarItem &amp;quot;${env:UserProfile}\Desktop\code.lnk&amp;quot;

Install-ChocolateyPinnedTaskBarItem &amp;quot;${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;npm-installs&#34;&gt;npm installs&lt;/h3&gt;

&lt;p&gt;I play around with npm a lot and don&amp;rsquo;t like the spinner when running an npm command, so I turn that off and set the log level that I like.  I then install the Ionic framework and Cordova npm packages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm config set loglevel http
npm config set spin false

npm install -g ionic
npm install -g cordova
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;git-clone-repositories&#34;&gt;git clone repositories&lt;/h3&gt;

&lt;p&gt;The last thing that I do as part of the BoxStarterGist.txt file is to create c:\projects which is where I store my project source code at and pull it down from Github.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$projectDir = &amp;quot;${env:systemdrive}\projects&amp;quot;

If (!(Test-Path $projectDir)) {
    New-Item -Path $projectDir -ItemType Directory
}

cd $projectDir

git clone https://github.com/digitaldrummerj/VagrantTalk
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-install-your-software-part-of-vagrant-provision&#34;&gt;How to install your software part of Vagrant provision?&lt;/h2&gt;

&lt;p&gt;Now that we have the BoxStarterGist.txt file configured the way that we want it, we need to tell Vagrant what to do with it.&lt;/p&gt;

&lt;p&gt;For this one we are using the file provision which copies the files to the virutal machine but does not execute it.  The reason for this is that when Boxstarter reboots the machine, Vagrant thinks the script is done and proceeds to the next provision call which sometimes interfers with the Boxstarter run.  So instead I put it on the desktop and manually login to the machine and execute the RunBoxStarterGist.bat file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  config.vm.provision &amp;quot;file&amp;quot;,
           source: &amp;quot;shell/RunBoxStarterGist.bat&amp;quot;,
           destination: &amp;quot;desktop\\RunBoxStarterGist.bat&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-the-runboxstartergist-bat-file&#34;&gt;Running the RunBoxStarterGist.bat file&lt;/h2&gt;

&lt;p&gt;After you do vagrant up and all of the provisioners runs, you will see the RunBoxstarterGist.bat on the desktop for the vagrant user.  You will just need to manually execute this file.  Once you kick it off you can walk away and let it do all of the installs.&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;The next lesson will cover the different networking options that vagrant supports.  By default Vagrant sets up the virtual machine with a NAT network so that you can only get to the machine from the host.  You an however setup both a public and private network.  We will dive into how to do this.&lt;/p&gt;
</content>
    <category term="virtualbox" /><category term="vagrant" /><category term="chocolatey" />

        
        </entry>
    
		<entry>
      <title>Vagrant Part 1 - Easy Virtual Machine Management</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-overview/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-overview/" rel="alternate" type="text/html" title="Vagrant Part 1 - Easy Virtual Machine Management" />
      <updated>Tue, 16 Jun 2015 00:00:00 +0000</updated>
      <published>Tue, 16 Jun 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/vagrant-overview/">

&lt;p&gt;Welcome to an overview of Vagrant and creating of your first Vagrant machine.&lt;/p&gt;

&lt;h2 id=&#34;what-is-vagrant&#34;&gt;What is Vagrant?&lt;/h2&gt;

&lt;p&gt;Vagrant allows you to create and manage lightweight reproducible virtual machines.&lt;/p&gt;

&lt;p&gt;Essentially, all of the configurations to create and configure a virtual machine are kept separate from the virtual machine.  This allows you to delete the virtual machine and then re-create it with all of the same configurations at any point.&lt;/p&gt;

&lt;p&gt;No longer do you have to be afraid to delete a virtual machine for a project that isn&amp;rsquo;t active.  You can also give the Vagrant configuration to a co-worker or move it to another machine and be assured that everything will get setup correctly when you create the virtual machine on the new machine.&lt;/p&gt;

&lt;p&gt;Before, we can see Vagrant in action, we first need to install a little bit of software onto your machine.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;In this section, we will install all of the software needed to be able to Vagrant.&lt;/p&gt;

&lt;p&gt;There are 3 pieces of software that we need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Chocolatey&lt;/li&gt;
&lt;li&gt;Virtualbox&lt;/li&gt;
&lt;li&gt;Vagrant&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h2&gt;

&lt;p&gt;Chocolatey is a Windows software install manager.  It solves several common issues with software installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where do I find the installer for software?&lt;/li&gt;
&lt;li&gt;How do I find the 64 bit vs 32 bit version?&lt;/li&gt;
&lt;li&gt;What default options should I select?&lt;/li&gt;
&lt;li&gt;Where should  I install the software to?&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install Chocolatey, open an administrative command prompt and  run the command below or get the command right on the home for Chocolatey at  &lt;a href=&#34;http://chocolatey.org&#34;&gt;http://chocolatey.org&lt;/a&gt;  .&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead and close the command prompt that you used to install Chocolatey.  This is needed so that all of the environment variables get refresh that are part of the Chocolatey installer.&lt;/p&gt;

&lt;p&gt;Now that we have Chocolatey installed, we can start installing software or as Chocolatey calls them, packages.&lt;/p&gt;

&lt;p&gt;To install a package, you would run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install [package name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the package names on the Chocolatey Gallery at &lt;a href=&#34;http://chocolatey.org&#34;&gt;http://chocolatey.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next we are going to install Virtualbox using Chocolatey.&lt;/p&gt;

&lt;h2 id=&#34;virtualbox&#34;&gt;Virtualbox&lt;/h2&gt;

&lt;p&gt;For this tutorial, I am using Virtualbox as the virtual machine provider.  You could also use Hyper-V (free)  or VMWare (paid).  If you are using Hyper-V already, you can not use Virtualbox at the same as they conflict with each other.&lt;/p&gt;

&lt;p&gt;If you already have Virtualbox installed, you can skip this step.&lt;/p&gt;

&lt;p&gt;Open an administrative command prompt and run the following Chocolatey command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install virtualbox.extensionpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command above will also instal Virtualbox as it is listed as a dependency for the virtualbox.extensionpack package.&lt;/p&gt;

&lt;h2 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;To install Vagrant, from the administrative command prompt, run the following Chocolatey command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now ready to create our first virtual machine using Vagrant.&lt;/p&gt;

&lt;h2 id=&#34;your-first-machine&#34;&gt;Your First Machine&lt;/h2&gt;

&lt;p&gt;Vagrant create a file called VagrantFile for each virtual machine,  The VagrantFile contains the information about the box the virtual machine is based off of, how to setup the network, the virtualization provider (virtualbox, vmare, hyper-v, azure, etc), and any provisioning scripts to run (shell , puppet, chef, etc) .&lt;/p&gt;

&lt;p&gt;Vagrant starts with a base box which nothing more than the a portable skelton for building virtual machine.  There are 2 types of boxes for Vagrant.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pre-Build:&lt;/strong&gt;  meaning that everything that you need is installed on the box.  You just create the vagrant machine and are ready to start developing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base OS:&lt;/strong&gt; just the OS is installed and as part of the  creation of the vagrant machine, you install all of the needed software.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this tutorial, we are going to use the Base OS box and build out the box with all of the software we need.&lt;/p&gt;

&lt;h2 id=&#34;creating-vagrantfile&#34;&gt;Creating VagrantFile&lt;/h2&gt;

&lt;p&gt;The first step is to create a directory to hold the VagrantFile.  I use c:\VagrantBoxes to hold all of the my Vagrant machines configurations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Within c:\VagrantBoxes, create a directory called MyFirstMachine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up a command prompt and navigate to the MyFirstMachine directory that you just created.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To initalize the Vagrant box, you need to run the vagrant init command.   This command will initialize the directory to hold Vagrant information and creates the VagrantFile.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For this tutorial, we are going to use the box &amp;ldquo;opentable/win-8.1-enterprise-amd64-nocm&amp;rdquo;.  The command below will initalize the MyFirstMachine directory.&lt;/p&gt;

&lt;p&gt;vagrant init &amp;ldquo;opentable/win-8.1-enterprise-amd64-nocm&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additional boxes can be from the cloud at &lt;a href=&#34;https://atlas.hashicorp.com/boxes/search&#34;&gt;https://atlas.hashicorp.com/boxes/search&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuring-the-vagrantfile&#34;&gt;Configuring the VagrantFile&lt;/h2&gt;

&lt;p&gt;In the MyFirstMachine directory there is now a file called VagrantFile.  Open this file up in your favorite text editor.&lt;/p&gt;

&lt;p&gt;Within the VagrantFile, there is a basic configuration already setup and a lot of very useful comments that explain the different possible configurations.&lt;/p&gt;

&lt;h3 id=&#34;vagrant-general-configurations&#34;&gt;Vagrant general configurations&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;config.vm.box is the name of the Vagrant base box to use to start up the machine with.  If this base box does not already exist on your machine it will attempt to download it from the Vagrant cloud.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.box = &amp;quot;opentable/win-8.1-enterprise-amd64-nocm&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the actual machine name of the virtual machine&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.hostname = &amp;quot;MyFirstMachine&amp;quot;   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How long Vagrant will keep trying to connect to the virtual machine before it assume something went wrong and times out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.boot_timeout = 600
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How to commumicate with the machine.  The two options are SSH and WinRM.  Typically SSH is used for Linux and WinRM for Windows machines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.communicator = &amp;quot;winrm&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;virtualbox-configurations&#34;&gt;Virtualbox Configurations&lt;/h3&gt;

&lt;p&gt;In the configuration below, it will configure the virtual machine with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4 gigs of RAM&lt;/li&gt;
&lt;li&gt;Set it to use 2 CPUs&lt;/li&gt;
&lt;li&gt;Make the video ram 128 megs&lt;/li&gt;
&lt;li&gt;Set the clipboard as bidirectional so you can copy and paste from the host machine to virtual machine as well as from the virtual machine to host machine.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the machine in the Virtualbox Manager UI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.memory = &amp;quot;4096&amp;quot;
        vb.cpus = 2
        vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--vram&amp;quot;, &amp;quot;128&amp;quot;]
        vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--clipboard&amp;quot;, &amp;quot;bidirectional&amp;quot;]
        vb.name = &amp;quot;My First Machine&amp;quot;   
    end     
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we are ready to start up the machine and start using it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt.&lt;/li&gt;
&lt;li&gt;Navigate to the MyFirstMachine folder.&lt;/li&gt;
&lt;li&gt;Run vagrant up to start up the machine.

&lt;ul&gt;
&lt;li&gt;The first time you run this command using a new base box, it will take a bit as it has to download the box from the cloud.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the machine is started up, there are some additional Vagrant commands that you will need to know to be able to hibernate, reboot, shutdown, and delete the virtual machine&lt;/p&gt;

&lt;h2 id=&#34;vagrant-commands&#34;&gt;Vagrant Commands&lt;/h2&gt;

&lt;p&gt;The commands below all need to run from the command line from within the MyFirstMachine folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See Status of Machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hibernate Machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant suspend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Reboot Machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Shutdown Machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remove Virtual Machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Re-Create Machine after Destroying it&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;You have just create and started up your first Vagrant managed Virtual machine.  This is only the beginning of what you can do with Vagrant.  In future lessons in this series we will install software and configure the OS as part of the vagrant up command, we will create multiple machine with a single vagrant command, create azure virtual machines, and create own own base boxes.&lt;/p&gt;

&lt;p&gt;The next lesson, will cover the start of provisioning.  We will install Chocolatey as part of the vagrant up command.&lt;/p&gt;
</content>
    <category term="vagrant" /><category term="virtualbox" />

        
        </entry>
    
		<entry>
      <title>Add Git Branch Name to Bash Prompt</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/add-git-branch-to-bash-shell/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/add-git-branch-to-bash-shell/" rel="alternate" type="text/html" title="Add Git Branch Name to Bash Prompt" />
      <updated>Thu, 11 Jun 2015 00:00:00 +0000</updated>
      <published>Thu, 11 Jun 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/add-git-branch-to-bash-shell/">&lt;p&gt;When I am working on a git repository and using the git command line, one of the things that I often end up checking it which git branch I am on and if there are any pending changes.  How awesome would it be if the bash shell prompt, told you the branch name if the directory is part of a git repository and if there are any changes.  Well, thankfully someone has done this work already and with a little bit of configuration on your part, you can implement the changes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mkdir ~/.bash&lt;/li&gt;
&lt;li&gt;cd ~/.bash&lt;/li&gt;
&lt;li&gt;git clone git://github.com/jimeh/git-aware-prompt.git&lt;/li&gt;
&lt;li&gt;edit your bash profile (~/.bashrc or ~/.bash_profile)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the top of your bash profile, add the following 2 lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GITAWAREPROMPT=~/.bash/git-aware-prompt
source $GITAWAREPROMPT/main.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the end of your bash profile, update the prompt with the following line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PS1=&amp;quot;\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]\$ &amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are in a git repository directory like I am in the ~blog directory, your prompt will now look like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No Uncommited changes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trustry-64:~/blog (master) $[]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Changes that have not been committed.  Notice the star after the word master&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trustry-64:~/blog (master)* $[]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are in a non-git repository directory such as the ~/ directory, your prompt will now look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trustry-64:~/ $ 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    <category term="git" /><category term="github" />

        
        </entry>
    
		<entry>
      <title>Windows 8.1 - Powershell Script to Uninstall Default Programs</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/windows8-script-uninstall-default-programs/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/windows8-script-uninstall-default-programs/" rel="alternate" type="text/html" title="Windows 8.1 - Powershell Script to Uninstall Default Programs" />
      <updated>Wed, 27 May 2015 00:00:00 +0000</updated>
      <published>Wed, 27 May 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/windows8-script-uninstall-default-programs/">

&lt;p&gt;When I am provisioning a new development virtual machine with vagrant, I do not need all of the Windows 8 modern applications such as bing maps, finance, skype, etc to be installed onto the virtual machine.  These applications are nice on a non-virtualized machine but on a virtual machine it just uses extra resources that aren&amp;rsquo;t needed.&lt;/p&gt;

&lt;p&gt;The base install of Windows has all of these programs installed with live tiles turned on that I don&amp;rsquo;t need.  This is a huge amount of clutter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vagrant/Vagrant-Pre-RemoveDefaultProgramsProvisioning.png&#34; alt=&#34;&amp;quot;Windows before removing start menu default programs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily enough Ben Hunter, wrote a powershell script that we will be going through and setting up as part of the vagrant provisioning process.    &lt;a href=&#34;http://blogs.technet.com/b/deploymentguys/archive/2013/10/21/removing-windows-8-1-built-in-applications.aspx&#34;&gt;View Original Script&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will be going through 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Figure out which applications that you want to remove.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Update the script with the list of applications to remove.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Add the vagrant provisioning configuration to run the script when you initially run vagrant up&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;getting-a-list-of-possible-applications-to-remove&#34;&gt;Getting a List of Possible Applications to Remove&lt;/h2&gt;

&lt;p&gt;The first step is to get the list of possible application to remove.  We are going to get this list by running the Get-AppxPackage powershell function,  saving output to a file named ModernApps.txt that will be saved to the Windows temp directory and open it in notepad.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open up a powershell command prompt.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use Windows Key + R, type powershell and press enter
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to get the list of applications, save the output to a file and open it in notepad.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get-AppxPackage | Format-Wide -Property Name -Column 1 | Out-File &amp;quot;${env:temp}\ModernApps.txt&amp;quot; | notepad &amp;quot;${env:temp}\ModernApps.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the script in the next section, modify the $AppsList variable with the programs that you wish to uninstall.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;powershell-script-to-remove-specified-applications&#34;&gt;Powershell Script to Remove Specified Applications&lt;/h2&gt;

&lt;p&gt;The second step is to create the script to remove the specific applications.  The script below takes a list of application and calls the Remove-AppxPackage command to uninstall the application.  The list of applications to remove is stored in the $AppsList variable within the script.&lt;/p&gt;

&lt;p&gt;Some applications such as camera and photos are not programs that you can be uninstall and may still be pinned to your start menu after this script has run.  Unfortunately, starting with Windows 8.1 Microsoft removed the ability to programmatically pin and unpin applications from the start menu, so you will have to manually unpin them.  Having to manually unpin a couple of application is much better than having to manually uninstall 19 applications.&lt;/p&gt;

&lt;p&gt;Note:  If you are testing out the script below by running it from the Powershell ISE, you will get a warning that the environment does not support Transcripts.  This warning will not happen when run from the powershell command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#********************* 
# Purpose:    Remove built in apps specified in list 
# Pre-Reqs:    Windows 8.1 
#********************* 

#------------------------ 
# Main Routine 
#------------------------

# Get log path. 
# Will log to Task Sequence log folder if the script is running in a Task Sequence 
# Otherwise log to \windows\temp

try
{
    $tsenv = New-Object -COMObject Microsoft.SMS.TSEnvironment  
    $logPath = $tsenv.Value(&amp;quot;LogPath&amp;quot;)
}
catch
{
    Write-Host &amp;quot;This script is not running in a task sequence&amp;quot;  
    $logPath = $env:windir + &amp;quot;\temp&amp;quot;
}

$logFile = &amp;quot;$logPath\$($myInvocation.MyCommand).log&amp;quot;

# Start logging
Start-Transcript $logFile
Write-Host &amp;quot;Logging to $logFile&amp;quot;

# ********************* 
# Update the List of Applications to be removed with your own
#********************* 
$AppsList = 
    &amp;quot;microsoft.windowscommunicationsapps&amp;quot;,
    &amp;quot;Microsoft.BingFinance&amp;quot;,
    &amp;quot;Microsoft.BingMaps&amp;quot;,`
    &amp;quot;Microsoft.BingWeather&amp;quot;,
    &amp;quot;Microsoft.ZuneVideo&amp;quot;,
    &amp;quot;Microsoft.ZuneMusic&amp;quot;,
    &amp;quot;Microsoft.Media.PlayReadyClient.2&amp;quot;,`
    &amp;quot;Microsoft.XboxLIVEGames&amp;quot;,
    &amp;quot;Microsoft.HelpAndTips&amp;quot;,
    &amp;quot;Microsoft.BingSports&amp;quot;,`
    &amp;quot;Microsoft.BingNews&amp;quot;,
    &amp;quot;Microsoft.BingFoodAndDrink&amp;quot;,
    &amp;quot;Microsoft.BingTravel&amp;quot;,
    &amp;quot;Microsoft.WindowsReadingList&amp;quot;,`
    &amp;quot;Microsoft.BingHealthAndFitness&amp;quot;,
    &amp;quot;Microsoft.WindowsAlarms&amp;quot;,
    &amp;quot;Microsoft.WindowsScan&amp;quot;,
    &amp;quot;Microsoft.WindowsSoundRecorder&amp;quot;,
    &amp;quot;Microsoft.SkypeApp&amp;quot;

ForEach ($App in $AppsList)
{
    $Packages = Get-AppxPackage | Where-Object {$_.Name -eq $App}

    if ($Packages -ne $null)
    {
          Write-Host &amp;quot;Removing Appx Package: $App&amp;quot;

          foreach ($Package in $Packages)
          {
              Remove-AppxPackage -package $Package.PackageFullName  
          }
    }
    else    
    {
          Write-Host &amp;quot;Unable to find package: $App&amp;quot;
    }

    $ProvisionedPackage = Get-AppxProvisionedPackage -online | Where-Object {$_.displayName -eq $App}

    if ($ProvisionedPackage -ne $null)
    {
          Write-Host &amp;quot;Removing Appx Provisioned Package: $App&amp;quot;
          Remove-AppxProvisionedPackage -online -packagename $ProvisionedPackage.PackageName
    }
    else
    {
          Write-Host &amp;quot;Unable to find provisioned package: $App&amp;quot;
    }
}

# Stop logging  
Stop-Transcript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Executing Powershell Script as Part of Vagrant Provisioning&lt;/p&gt;

&lt;p&gt;The last step is to add the running of the script to the vagrant provisioning process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the directory where you have your VagrantFile, create a directory called shell.&lt;/li&gt;
&lt;li&gt;Create a new file called RemoveDefaultPrograms.ps1 int the shell folder.&lt;/li&gt;
&lt;li&gt;In the shell directory, create a file called main.cmd.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following contents to the main.cmd file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;Removing Default Windows Programs&#39;        
@powershell -NoProfile -ExecutionPolicy Bypass -File &amp;quot;%systemdrive%\vagrant\shell\RemoveDefaultPrograms.ps1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open up your VagrantFile in a text editor of your choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following line in the area where you have your provisioning setup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.provision :shell, path: &amp;quot;shell/main.cmd&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you run vagrant up, the last step it will run is the provisioning scripts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you already have a machine controlled by vagrant up and running, you can run vagrant provision to rerun the provisioning scripts.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Sample Output from the vagrant provisioning&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; default: C:\Windows\system32&amp;gt;echo &#39;Removing Default Windows Programs&#39;
==&amp;gt; default:
==&amp;gt; default: &#39;Removing Default Windows Programs&#39;
==&amp;gt; default: This script is not running in a task sequence
==&amp;gt; default: Transcript started, output file is C:\Windows\temp\RemoveDefaultPrograms.ps1.log
==&amp;gt; default:
==&amp;gt; default: Logging to C:\Windows\temp\RemoveDefaultPrograms.ps1.log
==&amp;gt; default: Unable to find package: microsoft.windowscommunicationsapps
==&amp;gt; default: Removing Appx Provisioned Package: microsoft.windowscommunicationsapps
==&amp;gt; default:
==&amp;gt; default: Path           :
==&amp;gt; default: Online         : True
==&amp;gt; default: Restart Needed : False
==&amp;gt; default:
==&amp;gt; default:
==&amp;gt; default: Unable to find package: Microsoft.BingFinance
==&amp;gt; default: Removing Appx Provisioned Package: Microsoft.BingFinance
==&amp;gt; default: Path           :
......
==&amp;gt; default:
==&amp;gt; default: Transcript stopped, output file is C:\Windows\temp\RemoveDefaultPrograms.ps1.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After we have run the script, if you used the application list that I had in the script, the start menu will look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vagrant/Vagrant-Post-RemoveDefaultProgramsProvisioning.png&#34; alt=&#34;Windows start menu after removing default programs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;##Conclusion&lt;/p&gt;

&lt;p&gt;Now the start menu is mine again control again and I can actually make it useful.  No longer is the first 30 minutes of creating a new virtual machine nothing more than uninstall the default programs and messing with the start menu.&lt;/p&gt;
</content>
    <category term="vagrant" /><category term="windows" /><category term="powershell" />

        
        </entry>
    
		<entry>
      <title>Javascript Debugging Made Easier with Sourcemaps</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/javascript-sourcemaps/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/javascript-sourcemaps/" rel="alternate" type="text/html" title="Javascript Debugging Made Easier with Sourcemaps" />
      <updated>Sun, 17 May 2015 00:00:00 +0000</updated>
      <published>Sun, 17 May 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/javascript-sourcemaps/">&lt;p&gt;Updated: Add clean task that uses rimraf to delete the bundle.min.js file if it already exist.  Without this it would just append to the existing bundle.min.js file.&lt;/p&gt;

&lt;p&gt;When you release your web site to production, you should minify and concatenate your javascript files.  You will have much better performance by doing this but unfortunately debugging becomes difficult with the minified code as it shortens all of the variable and method names.  Luckily there is a simple solution to tell the browser developer tools to use the original javascript files when debugging the code, called source maps.&lt;/p&gt;

&lt;p&gt;Sourcemaps bacically are a way to map the combined/minified file back to the original file. As part of the minification process you generate a source map which holds the information about your original files.  The developer tools will then parse the source map and make it appear as though you&amp;rsquo;re running unminified and uncombined files.&lt;/p&gt;

&lt;p&gt;##Creating Sourcemaps&lt;/p&gt;

&lt;p&gt;To generate the sourcemaps we are going to gulp with the gulp-concat, gulp-uglify, and gulp-sourcemaps modules.   If you are not familiar with gulp, it is basically a javascript build system that allows you to write code to automate tasks.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&#34;http://nodejs.org&#34;&gt;node.js&lt;/a&gt; if you don&amp;rsquo;t have it installed already.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Gulp and the Gulp modules that we need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install --save gulp
$ npm install --save gulp-concat
$ npm install --save-dev gulp-uglify  
$ npm install --save-dev gulp-sourcemaps
$ npm install --save-dev rimraf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a file called gulpfile.js if you don&amp;rsquo;t already have one.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the required gulp modules to the gulpfile.js.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require(&#39;gulp&#39;);
var gutil = require(&#39;gulp-util&#39;);
var concat = require(&#39;gulp-concat&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var sourcemaps = require(&#39;gulp-sourcemaps&#39;);
var rimraf = require(&#39;rimraf&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the input paths variable to hold what files we should minify/concatenate.  I keep my files in the www folder.  The ! in the 2nd input path means to exclude this path.  I typically keep my vendor skips like angular, ionic, jquery, etc in the lib folder, so I don&amp;rsquo;t want to minify those scripts again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var inputPaths = {
    javascript: [&#39;./www/**/*.js&#39;, &#39;!./www/lib/**&#39;]
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the output path variable to tell gulp where to output the minified file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var outputPaths = {
    &#39;javascript&#39;: &#39;./www/js&#39;
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we need to create the actual gulp task that does the minification and source map creation.  This tasks takes  the inputPaths.javscript files, combines them, minifies them, creates the source maps and save it all as a file called bundle.min.js.  By default the gulp.dest call will append the minified text to the bundle.min.js instead of overwriting it.  Instead we need to call the clean task task first which will delete the minified file if it already exist.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var minifiedJsFileName = &#39;bundle.min.js&#39;;

  gulp.task(&#39;build-js&#39;, [&#39;clean&#39;], function() {
    return gulp.src(inputPaths.javascript)
      .pipe(sourcemaps.init())
      .pipe(concat(minifiedJsFileName))
      .pipe(uglify())
      .pipe(sourcemaps.write())
      .pipe(gulp.dest(outputPaths.javascript));
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the clean task&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  gulp.task(&amp;quot;clean&amp;quot;, function (cb) {
    rimraf(outputPaths.javascript + &#39;/&#39; + minifiedJsFileName, cb);
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once the task is created, we want to setup a gulp watch to regenerate the file when any of the javascript changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;watch&#39;, function() {
  gulp.watch(inputPaths.javascript, [&#39;build-js&#39;]);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, we are going to create a default task to run the build-js task we created.  The default task will typically what you want to run anytime you start up the web server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;default&#39;, [&#39;build-js&#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##Running Task&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt or terminal.&lt;/li&gt;
&lt;li&gt;Navigate to the directory that contain the gulpfile.js we created.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gulp build-js
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If it worked successfully, you should have a minified file in your www/js folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To use the file, open up the index.html file and remove all of your javascript script tags that reference your js files in the www folder and replace it with a single script tag that references the www/js/bundle.min.js file.  Make sure to leave any vendor script tags.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##Enabling Sourcemaps in Chrome Developer Tools&lt;/p&gt;

&lt;p&gt;Now that we have the source maps generated, we have to tell the Chrome Developer Tools to enable the source maps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Google Chrome.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the Developer Tools.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ChromeDevTools/ChromeDevTools-Open.png&#34; alt=&#34;Open Chrome Developer Tools&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the Setting Cog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ChromeDevTools/ChromeDevTools-SettingsCog.png&#34; alt=&#34;Open Settings&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down in the General Settings under you see the Sources section and ensure that the &amp;ldquo;Enable JavaScript source maps&amp;rdquo; is checked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ChromeDevTools/ChromeDevTools-JavascriptSourcemapsEnabled.png&#34; alt=&#34;Enable Javascript Source Maps&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the X in the upper right of the Settings windows to close it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now view your web site in the browser to make sure everything is still working.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Note: If you are using Angular, you have to make sure that you use the minification safe syntax for the dependency injection.  See the next section for examples.&lt;/li&gt;
&lt;li&gt;Note 2: If you are using the Ionic Framework, the default templates (blank, tabs, sidemenu) do not use the Angular minification safe syntax.  You will need to modify the template after you generate your application.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##Angular Minification Safe Syntax&lt;/p&gt;

&lt;p&gt;If you are using the AngularJs framework it does a lot of dependency injection.  Out of the box, if you just pass in your arguments to the different functions, it is not minification safe.  There are a couple of easy ways to make it minification safe with a minimal amount of code changes.&lt;/p&gt;

&lt;p&gt;Option 1: $inject method
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;//Controllers
var myController = function(anyVariableName, $http) {
};
  
myController.$inject = [&amp;#39;$scope&amp;#39;, &amp;#39;$http&amp;#39;];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Option 2: &amp;#91;&amp;#93; syntax.  You start the 2nd parameter with a &amp;#91;, put your list of dependencies as string, your function to run and then the closing &amp;#93;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;  
//Modules  
var myApp = angular.module(&amp;#39;myApp&amp;#39;, 
     [ //Dependencies go here.]
);
  
//Services
myApp.service(&amp;#39;serviceName&amp;#39;,
   [&amp;#39;$http&amp;#39;, &amp;#39;$location&amp;#39;, 
        function($http, $location) {
        }
   ]
);
  
//Directives
myApp.directive(&amp;#39;directiveName&amp;#39;, 
    [&amp;#39;$http&amp;#39;, &amp;#39;$location&amp;#39;, 
         function($http, $location) 
         {    
         }
    ]
);
  
//Factories
myApp.factory(&amp;#39;factoryName&amp;#39;, 
     [&amp;#39;$http&amp;#39;, &amp;#39;$location&amp;#39;, 
          function($http, $location) {    
          }
     ]
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
    <category term="debugging" /><category term="chrome" /><category term="gulp" />

        
        </entry>
    
		<entry>
      <title>Chrome DevTools - Hiding Vendor Scripts</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/chrome-devtools-black-boxing/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/chrome-devtools-black-boxing/" rel="alternate" type="text/html" title="Chrome DevTools - Hiding Vendor Scripts" />
      <updated>Fri, 15 May 2015 00:00:00 +0000</updated>
      <published>Fri, 15 May 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/chrome-devtools-black-boxing/">&lt;p&gt;The Chrome Developer tools are an amazing set of tools for debugging and trobuleshooting web sites.  If you are a web developer and have not tried out these tools, you have been missing out.  As amazing as the developer tools are, one of the most annoying features to me was not being able to skip over vendor javascript like jquery or angular.  Getting stuck in a minified version of a angular or jquery takes you down a deep rabbit hole that you never wanted to go down and is a annoying to climb out of.&lt;/p&gt;

&lt;p&gt;Luckily, there is a super simple solution that I learned from &lt;a href=&#34;http://twitter.com/jaredthenerd&#34;&gt;Jared Farris&lt;/a&gt; during his Chrome Developer Tools talk at the &lt;a href=&#34;http://www.codepalousa.com&#34;&gt;Codepalousa Conference&lt;/a&gt; called Black Boxing.  Black boxing allows you to tell the javascript debugger to skip over the file when stepping through the code.&lt;/p&gt;

&lt;p&gt;So how do you turn on black boxing for a file?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Chrome&lt;/li&gt;
&lt;li&gt;Navigate to the web site that you want to troubleshoot&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the Chrome Developer Tools&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ChromeDevTools/ChromeDevTools-Open.png&#34; alt=&#34;Open Chrome Dev Tools Screenshot&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to the Source tab&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Right-click on your javascript file you want to black box&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select Blackbox script from the menu&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/ChromeDevTools/ChromeDevTools-BlackBoxing.png&#34; alt=&#34;Black Box Script Screenshot&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you are ready to set a breakpoint in your code, refresh your page and debug your javascript code.&lt;/p&gt;

&lt;p&gt;Check out the Javascript Debugging documentation for all of the features of the debugger, &lt;a href=&#34;https://developer.chrome.com/devtools/docs/javascript-debugging&#34;&gt;https://developer.chrome.com/devtools/docs/javascript-debugging&lt;/a&gt;.&lt;/p&gt;
</content>
    <category term="chrome" /><category term="debugging" /><category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Removing the NPM spinner</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/remove-npm-spinner/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/remove-npm-spinner/" rel="alternate" type="text/html" title="Removing the NPM spinner" />
      <updated>Thu, 07 May 2015 00:00:00 +0000</updated>
      <published>Thu, 07 May 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/remove-npm-spinner/">&lt;p&gt;One of the most annoying features of npm for me is the spinner.  Many times it runs long enough that I am wondering if it is still working or hung.  Thankfully you can easily change this with the .npmrc file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On Linux/OSx, create the file ~/.npmrc&lt;/li&gt;
&lt;li&gt;On Windows, create the file %USERPROFILE%/.npmrc&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the 2 lines below to the file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spin=false  
loglevel=http
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save the file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Close your command prompt/terminal and reopen it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run an npm install command and you will see log messages instead of the spinner.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    <category term="npm" />

        
        </entry>
    
		<entry>
      <title>Nuget - Incrementing Version Before Building</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/nuget-auto-incrementing-version/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/nuget-auto-incrementing-version/" rel="alternate" type="text/html" title="Nuget - Incrementing Version Before Building" />
      <updated>Mon, 04 May 2015 00:00:00 +0000</updated>
      <published>Mon, 04 May 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/nuget-auto-incrementing-version/">&lt;p&gt;When you are building nuget packages that are not directly using the AssemblyInfo.cs for the version number, you need to make sure to increment the nuget version number before building the package.  Inevitable though you will forget to increment the version number and have to build the package a 2nd time.  Wouldn&amp;rsquo;t it be great if you could automatically increment the version number before calling nuget pack.  Well I have written a powershell script to do just this.  Below are the details out the script.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your project directory, create a file called IncrementNugetVersionNumber.ps1&lt;/li&gt;
&lt;li&gt;Add the following parameters to the top of the file to take in the nuget spec file location and any version parameters.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($NuSpecFile = $(&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mandatory parameter -NuSpecFile not supplied&amp;#34;&lt;/span&gt;),
    $MajorVersion,
    $MinorVersion,
    $RevisionVersion)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we are going to add a bunch of helper functions right under the param code from above.  These helper functions will make it easier to deal with the xml queries of the nuget spec document.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; AssignVersionValue(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$oldValue,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$newValue)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($newValue &lt;span style=&#34;color:#f92672&#34;&gt;-eq&lt;/span&gt; $null &lt;span style=&#34;color:#f92672&#34;&gt;-or&lt;/span&gt; $newValue &lt;span style=&#34;color:#f92672&#34;&gt;-eq&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) {
        $oldValue
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        $newValue
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-XmlNamespaceManager(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt;$XmlDocument,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NamespaceURI = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;::IsNullOrEmpty($NamespaceURI))
    {
        $NamespaceURI = $XmlDocument.DocumentElement.NamespaceURI
     }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;[System.Xml.XmlNamespaceManager]&lt;/span&gt;$xmlNsManager = New-Object System.Xml.XmlNamespaceManager($XmlDocument.NameTable)
    $xmlNsManager.AddNamespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ns&amp;#34;&lt;/span&gt;, $NamespaceURI)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ,$xmlNsManager
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-FullyQualifiedXmlNodePath(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodePath,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodeSeparatorCharacter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ns:&lt;/span&gt;$($NodePath.Replace($($NodeSeparatorCharacter), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/ns:&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-XmlNode(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt;$XmlDocument,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodePath,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NamespaceURI = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodeSeparatorCharacter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
{
    $xmlNsManager = Get-XmlNamespaceManager -XmlDocument $XmlDocument -NamespaceURI $NamespaceURI
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$fullyQualifiedNodePath = Get-FullyQualifiedXmlNodePath -NodePath $NodePath -NodeSeparatorCharacter $NodeSeparatorCharacter

    $node = $XmlDocument.SelectSingleNode($fullyQualifiedNodePath, $xmlNsManager)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $node
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-XmlNodes(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt;$XmlDocument,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodePath,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NamespaceURI = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodeSeparatorCharacter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
{
    $xmlNsManager = Get-XmlNamespaceManager -XmlDocument $XmlDocument -NamespaceURI $NamespaceURI
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$fullyQualifiedNodePath = Get-FullyQualifiedXmlNodePath -NodePath $NodePath -NodeSeparatorCharacter $NodeSeparatorCharacter

    $nodes = $XmlDocument.SelectNodes($fullyQualifiedNodePath, $xmlNsManager)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $nodes
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Get-XmlElementsTextValue(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt;$XmlDocument,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$ElementPath,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NamespaceURI = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodeSeparatorCharacter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
{
    $node = Get-XmlNode -XmlDocument $XmlDocument -NodePath $ElementPath -NamespaceURI $NamespaceURI -NodeSeparatorCharacter $NodeSeparatorCharacter

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($node) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $node.InnerText
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $null
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; Set-XmlElementsTextValue(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[xml]&lt;/span&gt;$XmlDocument,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$ElementPath,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$TextValue,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NamespaceURI = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;[string]&lt;/span&gt;$NodeSeparatorCharacter = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
{
    $node = Get-XmlNode -XmlDocument $XmlDocument -NodePath $ElementPath -NamespaceURI $NamespaceURI -NodeSeparatorCharacter $NodeSeparatorCharacter

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($node)
    {
        $node.InnerText = $TextValue
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
        $elementName = $ElementPath.Substring($ElementPath.LastIndexOf($NodeSeparatorCharacter) + 1)
        $element = $XmlDocument.CreateElement($elementName, $XmlDocument.DocumentElement.NamespaceURI)
        $textNode = $XmlDocument.CreateTextNode($TextValue)
        $element.AppendChild($textNode) &amp;gt; $null

        $parentNodePath = $ElementPath.Substring(0, $ElementPath.LastIndexOf($NodeSeparatorCharacter))
        $parentNode = Get-XmlNode -XmlDocument $XmlDocument -NodePath $parentNodePath -NamespaceURI $NamespaceURI -NodeSeparatorCharacter $NodeSeparatorCharacter

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($parentNode)
        {
            $parentNode.AppendChild($element) &amp;gt; $null
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$parentNodePath does not exist in the xml.&amp;#34;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that the helper functions are added, it is time to create the meat of the script where you will update the version number and write it back to the file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Get the Full Path of the Nuget spec file from parameter $NuSpecFile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$NuSpecFile = Resolve-Path $NuSpecFile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once we have the full path, we need to get the contents of the files as an Xml document so that we can run xpath queries on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ xml ]$fileContents = Get-Content -Path $NuSpecFile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then we need to get the current version number&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$originalVersion = Get-XmlElementsTextValue -XmlDocument $fileContents -ElementPath &amp;quot;package.metadata.version&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set a default version number&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$newVersion = &amp;quot;1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If there is an existing version number, then we can update it.  If not, then use the default version number.  This bit of code will break apart the version number into individual segments that we can then update.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($originalVersion -ne $null)
{
    $segments=$originalVersion.Split(&amp;quot;.&amp;quot;)
    $v1=&amp;quot;1&amp;quot;
    $v2=&amp;quot;0&amp;quot;
    $v3=&amp;quot;0&amp;quot;

    if ($segments.Length -gt 0) { $v1=$segments[0] }
    if ($segments.Length -gt 1) { $v2=$segments[1] }
    if ($segments.Length -eq 3) { $v3=$segments[2] }

    $v1 = AssignVersionValue $v1 $MajorVersion
    $v2 = AssignVersionValue $v2 $MinorVersion
    $v3 = AssignVersionValue $v3 $RevisionVersion

    if ($v1 -eq $null) { $v1 = 1 }
    if ($v2 -eq $null) { $v2 = 0 }
    if ($v3 -eq $null) { $v3 = 0 }


    $newVersion = &amp;quot;$v1.$v2&amp;quot;
        #Write-Host &amp;quot;REV: $RevisionVersion&amp;quot;
    if ($v3 -ne $null -and ($RevisionVersion -eq $null -or $RevisionVersion -eq &amp;quot;&amp;quot;)) {
        $v3 = ($v3 -as [int]) + 1
    }

    $newVersion = &amp;quot;$newVersion.$v3&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lastly, we need to set the new version number and save the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;write-host &amp;quot;Setting Version to $newVersion&amp;quot;

Set-XmlElementsTextValue -XmlDocument $fileContents -ElementPath &amp;quot;package.metadata.version&amp;quot; -TextValue $newVersion
$fileContents.Save($NuSpecFile)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we have the powershell script built to increment the version number, the next piece is to create the batch file that calls the script and nuget pack.&lt;/p&gt;

&lt;p&gt;For the batch file you can pass in /major, /minor, /revision, and /outputdir.  If any of these are not passed in, it will use the existing values from the nuget spec and output into the current directory.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a file called build.cmd&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setup the parameters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
SET OUTPUTDIR=&amp;quot;&amp;quot;
SET REVISION=&amp;quot;&amp;quot;
SET MAJOR=&amp;quot;&amp;quot;
SET MINOR=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to check the parameters and set each of the individual values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:checkparameters
:: REM Grab the first variable supplied as a whole. Ex. /action:start
set SWITCHPARSE=%1

:: REM Check to see if there are no more switches, if so goto end of
:: parsing, prevents endless loop
IF [%SWITCHPARSE%] == [] goto end

:: REM Reset variables as clean up.
set SWITCH=
set VALUE=

:: In the SWITCHPARSE variable, grab the two tokens separated
:: by a : and assign the first to SWITCH and the second to VALUE
for /F &amp;quot;tokens=1,2 delims=:&amp;quot; %%a IN (&amp;quot;%SWITCHPARSE%&amp;quot;) DO (
    SET SWITCH=%%a
    set VALUE=%%b
)

:: Check which action to perform based on the switch
IF [%SWITCH%] == [/revision] goto setrevision
IF [%SWITCH%] == [/major] goto setmajorversion
IF [%SWITCH%] == [/minor] goto setminorversion
IF [%SWITCH%] == [/outputdir] goto setoutputdir
:: Perform the action by setting the variable for later use and
:: shift the command line parameters so the next in line is
:: ready to be processed

goto end

:setrevision
set REVISION=%VALUE%
SHIFT
goto checkparameters

:setmajorversion
set MAJOR=%VALUE%
SHIFT
goto checkparameters

:setminorversion
set MINOR=%VALUE%
SHIFT
goto checkparameters

:setoutputdir
set OUTPUTDIR=%VALUE%
SHIFT
goto checkparameters
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally we need to call the powershell script we created above and increment the version number in the nuget spec.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:end
echo.

echo PowerShell -NoProfile -ExecutionPolicy Bypass -File &amp;quot;..\IncrementNugetVersionNumber.ps1&amp;quot; -NuspecFile &amp;quot;log4net.blank.config.nuspec&amp;quot; -RevisionVersion %REVISION% -MajorVersion %MAJOR% -MinorVersion %MINOR%

PowerShell -NoProfile -ExecutionPolicy Bypass -File &amp;quot;..\IncrementNugetVersionNumber.ps1&amp;quot; -NuspecFile &amp;quot;log4net.appender.console.nuspec&amp;quot; -RevisionVersion %REVISION% -MajorVersion %MAJOR% -MinorVersion %MINOR%
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, we need to call nuget pack to build the nuget package&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo.
echo nuget pack -OUTPUTDIR &amp;quot;%OUTPUTDIR%&amp;quot;
nuget pack -OUTPUTDIR %OUTPUTDIR%
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now anytime that you need to build the nuget package, you just have to call build.cmd and it will spit out an new package with an incremented version number.&lt;/p&gt;

&lt;p&gt;I know this post was a lot of code.  Both of the files that we create can be downloaded at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{{&amp;quot;/Downloads/2015-05-03-Nuget-Auto-Incrementing-Version/IncrementNugetVersionNumber.ps1&amp;quot; | prepend: site.baseurl}}&#34;&gt;IncrementNugetVersionNumber.ps1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{{&amp;quot;/Downloads/2015-05-03-Nuget-Auto-Incrementing-Version/build.cmd&amp;quot; | prepend: site.baseurl }}&#34;&gt;build.cmd&lt;/a&gt;&lt;/p&gt;
</content>
    <category term="nuget" />

        
        </entry>
    
		<entry>
      <title>Purchasing Business Cards</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/business-cards/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/business-cards/" rel="alternate" type="text/html" title="Purchasing Business Cards" />
      <updated>Mon, 04 May 2015 00:00:00 +0000</updated>
      <published>Mon, 04 May 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/business-cards/">&lt;p&gt;If you are planning on going to any professional networking events, user groups, or speaking at events, you should have business cards with you.  Many times people think, I only need to have business cards if I am looking for a job.  This is far from the truth.  You should have business cards so that you can connect with the people that you have met.  People tend to meet lots of people at events and without a business card, it is difficult for people to remember who you are.  It is also a good way for people to be able to follow up with you.&lt;/p&gt;

&lt;p&gt;You may be tempted to make your own business cards and print them off on your home printer but please don&amp;rsquo;t.  At first this sounds like a great idea but almost never works out right.  If you don&amp;rsquo;t get the right card stock they will feel cheap.  If you don&amp;rsquo;t get them exactly aligned when printing, they will look unprofessional.  When cutting the cards then need to be straight clean cuts which is not easy to do.&lt;/p&gt;

&lt;p&gt;Instead you need to purchase professionally printed cards.  You might be thinking, having to purchase business cards is going to be expensive but this is no longer the case.  You can easily get 100 business cards and a holder for under $30.&lt;/p&gt;

&lt;p&gt;I purchased my business cards from &lt;a href=&#34;http://www.moo.com/share/8fybwg&#34;&gt;http://www.moo.com&lt;/a&gt; (affiliate link) and was very happy with their cards and service.  It was very simple for me to design my cards.  There was lots of different designs to select from and I was able to upload custom images to use.  They also offer a pdf export of the cards so that you can send them to other to review them or print off one to see how it would look.&lt;/p&gt;

&lt;p&gt;For my cards, I went with the MiniCards.  I liked that the cards were unique in size without being too unique. Plus with the MiniCard Holder, I was able to have up to 12 cards on my keychain at any given time.  This meant that I never had to remember to bring cards with me and always had them if the need came about.&lt;/p&gt;
</content>
    <category term="how-to" /><category term="speaking" />

        
        </entry>
    
		<entry>
      <title>Automatically Add JS/CSS Files to Your Ionic Projects</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/gulp-inject/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/gulp-inject/" rel="alternate" type="text/html" title="Automatically Add JS/CSS Files to Your Ionic Projects" />
      <updated>Thu, 30 Apr 2015 00:00:00 +0000</updated>
      <published>Thu, 30 Apr 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/gulp-inject/">

&lt;p&gt;As you work on an Ionic based project or for that matter any web projects that have javascript or css file, you will at some point forget to add your new javascript or css file to the page and wonder why the page is broken.  This is really annoying when it happens as many times you spend quite a bit of time troubleshooting before you realize that you just forgot to add the script or css tag.  You can fix this problem using gulp and the gulp inject module to automatically add the script and css tags onto the page.&lt;/p&gt;

&lt;h2 id=&#34;installing-gulp&#34;&gt;Installing Gulp&lt;/h2&gt;

&lt;p&gt;You should already have NodeJS installed.  To install Gulp:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open command prompt&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On Windows, run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install gulp -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On OSx, run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo npm install gulp -g
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;installing-gulp-inject&#34;&gt;Installing Gulp-Inject&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To add the gulp-inject module to the package.json file as a development dependency  you need to install gulp-inject with the &amp;ndash;save-dev argument.  From your Ionic project directory run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install gulp-inject --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;adding-inject-task-to-gulpfile-js&#34;&gt;Adding Inject Task to gulpfile.js&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the gulpfile.js&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add gulp-inject as a required module.  Name the variable used inject.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var inject = require(&#39;gulp-inject&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next you need to add to the paths where to look for changes to javascript and css files.  Note taht the ! in front of the file/path means to exclude that file/path from being injected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var paths = {
    sass: [&#39;./scss/**/*.scss&#39;],
    javascript: [
        &#39;./www/**/*.js&#39;,
        &#39;!./www/js/app.js&#39;,
        &#39;!./www/lib/**&#39;
    ],
    css: [
        &#39;./www/**/*.css&#39;,
        &#39;!./www/css/ionic.app*.css&#39;,
        &#39;!./www/lib/**&#39;
    ]
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to add a new gulp task called index (could be called anything).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;index&#39;, function(){
    return gulp.src(&#39;./www/index.html&#39;)
        .pipe(inject(
            gulp.src(paths.javascript,
                {read: false}), {relative: true}))
        .pipe(gulp.dest(&#39;./www&#39;))
        .pipe(inject(
            gulp.src(paths.css,
            {read: false}), {relative: true}))
        .pipe(gulp.dest(&#39;./www&#39;));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next add the index task to the gulp default task&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;default&#39;, [&#39;sass&#39;, &#39;index&#39;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, add the javascript and css paths to the gulp watch task and have it call the index task when a change is detected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;watch&#39;, function() {
    gulp.watch(paths.sass, [&#39;sass&#39;]);
    gulp.watch([
    paths.javascript,
    paths.css
    ], [&#39;index&#39;]);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;setting-up-index-html-to-accept-inject&#34;&gt;Setting up index.html to Accept Inject&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open up the index.html file&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the head tag, replace all of the script tags for your controllers and services with the inject:js comment below.  Make sure to leaveLeave the app.js script tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject:js --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the css tag for the style.css with the inject:css command below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- inject:css --&amp;gt;
&amp;lt;!-- endinject --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;manually-running-it&#34;&gt;Manually Running It&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the gulp task index and then look at the index.html page.  You should see all of the javascript and css files added back in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp index
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;running-it-with-ionic-serve&#34;&gt;Running it with Ionic serve&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the ionic.project file and add the gulp index task to the gulpStartUpTasks.  If you don&amp;rsquo;t have a gulpStartupTasks section, go ahead and add it without the sass task.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;gulpStartupTasks&amp;quot;: [
    &amp;quot;index&amp;quot;,
    &amp;quot;watch&amp;quot;,
    &amp;quot;sass&amp;quot;
],
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the index.html page, remove the javascript and css tags again.  Then run the ionic serve command.  You should that the gulp index task was run and all of the javascript and css files were added back in.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-12-5-further-reading&#34;&gt;Section 12.5: Further Reading&lt;/h2&gt;

&lt;p&gt;There is a lot of different options for the gulp-inject package.  If you want to read about all of the different options and see examples, the documentation is available at &lt;a href=&#34;https://www.npmjs.com/package/gulp-inject&#34;&gt;https://www.npmjs.com/package/gulp-inject&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;With just a little bit of code, you no longer will you have to wonder why a feature is not working, just to realize that it is because you forgot to include a javascript file.  There is all of kinds of additional functionality that you can perform with gulp such as minifying of css and javascript files, running npm/bower commands, or running sass compile commands.  The gulp-inject is just one module.  I encourage you to add gulp into your normal workflow and automate the mundane tasks.&lt;/p&gt;
</content>
    <category term="ionic" /><category term="gulp" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 08: Using a Custom Domain</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-8-using-a-custom-domain/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-8-using-a-custom-domain/" rel="alternate" type="text/html" title="Jekyll Part 08: Using a Custom Domain" />
      <updated>Tue, 10 Mar 2015 00:00:00 +0000</updated>
      <published>Tue, 10 Mar 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-8-using-a-custom-domain/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to setup a custom domain for your blog.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Part of having a blog is making it your own and giving it personality.  One of the easiest ways to do this is to use a custom domain name that fits the blog.  So far we have been using http://[username].github.io to get to your blog, but now we will go through the process of setting up a custom domain name like &lt;a href=&#34;http://digitaldrummerj.me&#34;&gt;http://digitaldrummerj.me&lt;/a&gt;.  At first it might seem like this is going to be complicated but it is actually very easy to set this up.&lt;/p&gt;

&lt;h2 id=&#34;section-1-purchasing-a-domain-name&#34;&gt;Section 1: Purchasing a Domain Name&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a domain name that you want to use for your Github blog purchased and are using DNSimple for your DNS provider.  You can skip this section and move onto Section 2.&lt;/p&gt;

&lt;p&gt;The first step in this process is to get a domain name.  The easiest way to do this is to purchase the domain name from the dns provider.  For this tutorial we are going to use &lt;a href=&#34;http://dnsimple.com&#34;&gt;dnsimple&lt;/a&gt;.  You can use any DNS provider but I am only providing instructions for using &lt;a href=&#34;http://dnsimple.com&#34;&gt;dnsimple&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&#34;http://dnsimple.com&#34;&gt;dnsimple&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &amp;ldquo;Get Started with DNSimple Today&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_get_started_dnsimple.png&#34; alt=&#34;Getting Started with DNSimple Today button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &amp;ldquo;Add Domain&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_add_domain_button.png&#34; alt=&#34;Add Domain button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in the domain name that you want or if you are transferring the domain to DNSimple fill in the domain name that you want to transfer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the &amp;ldquo;Register or transfer this domain&amp;rdquo; box&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want you registration information private, check the &amp;ldquo;Enable WHOIS Privacy Protection&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want the domain to auto renew each year, check the &amp;ldquo;Enable Auto Renewal&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &amp;ldquo;Add Domain&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_add_domain_button.png&#34; alt=&#34;Add Domain button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in your contact information&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &amp;ldquo;Register Domain&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_register_domain.png&#34; alt=&#34;Register Domain button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You now have a domain name registered and are ready to complete the DNS setup in the next section.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-setting-up-dns&#34;&gt;Section 2: Setting up DNS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; If you are transferring a domain to DNSimple that process may take several days to be completed and you may not be able to complete this setup until the transfer process is completed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; If you just purchased your domain name from DNSimple, you will be able to complete this section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the &amp;ldquo;Services&amp;rdquo; button next to your domain name under the DNSimple domain list for your account.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down until you see the &amp;ldquo;Github Pages&amp;rdquo; service&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_dnsimple_github_service.png&#34; alt=&#34;Github Pages Service&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the Add Button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_dnsimple_github_service_add_button.png&#34; alt=&#34;Github Page Service Add Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in your Github username&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_dnsimple_github_service_setup.png&#34; alt=&#34;Github Pages Name&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &amp;ldquo;Complete Github Pages Setup&amp;rdquo; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_dnsimple_github_service_setup_complete.png&#34; alt=&#34;Github Pages Service&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You now have DNSimple configured to point your domain name correctly to your Github blog at http://[username].github.io&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-3-configure-blog-with-domain-name&#34;&gt;Section 3: Configure Blog with Domain Name&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; If you are transferring a domain to DNSimple,  that process need to be completed before you can complete this section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; If you just purchased your domain name from DNSimple, you will be able to complete this section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click on the + button to add a new file&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_add_button.png&#34; alt=&#34;Github Plus Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the file CNAME with no extension&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_add_cname_file.png&#34; alt=&#34;Github Name the New File CNAME&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the very top of the file add your domain name&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_cname_domain_name.png&#34; alt=&#34;Add Domain Name at top of CNAME file&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll to the &amp;ldquo;Commit changes&amp;rdquo; section on the Github Editor, put in your commit comment and click &amp;ldquo;Commit changes&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_8_cname_commit.png&#34; alt=&#34;Commit CNAME Changes&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It will take a few minutes for Github to update before you will be able to browse to your Github blog with your domain name.  Once your domain is working, even the old http://[username].github.io url will redirect to your domain name.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now users will be able to get to your blog with the domain name that you just configure.  Even if the user tries to go to the http://[username].github.io it will redirect them to your domain name.&lt;/p&gt;

&lt;p&gt;In our next lesson, I will show you how to install jekyll so that you can edit your blog post and files locally instead of using the Github web site.  This will allow you to make changes without having to publish them to the world just to test them.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 07: Adding a custom Google search</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-7-adding-a-custom-google-search/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-7-adding-a-custom-google-search/" rel="alternate" type="text/html" title="Jekyll Part 07: Adding a custom Google search" />
      <updated>Sat, 21 Feb 2015 00:00:00 +0000</updated>
      <published>Sat, 21 Feb 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-7-adding-a-custom-google-search/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we are going to add the ability to search your blog using google.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;As your blog grows, you want to make it easy for your readers to find the content that they need on your blog.  Out of the box, Jekyll does not have any type of search engine built-in.  Thankfully, with Google you can easily tell Google to index your blog and then add a search box on the blog.&lt;/p&gt;

&lt;h2 id=&#34;section-1-adding-the-search-page&#34;&gt;Section 1: Adding the Search Page&lt;/h2&gt;

&lt;p&gt;If you have been following along with the other lessons in the series, this should be familiar to you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a web browser and navigate to your [username].github.io repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the + button to add a new file&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_add_button.png&#34; alt=&#34;Github Plus Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the file search.html&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_add_search_html_file.png&#34; alt=&#34;Github Name New File search.html&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following front matter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: page
title: Search
permalink: /search/
sitemap: false
---
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following html to the page&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;home-search&amp;quot; class=&amp;quot;home&amp;quot;&amp;gt;
    &amp;lt;script&amp;gt;
        (function() {
            var cx = &#39;[Your CSE Search ID]&#39;;
            var gcse = document.createElement(&#39;script&#39;);
            gcse.type = &#39;text/javascript&#39;;
            gcse.async = true;
            gcse.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) +
            &#39;//www.google.com/cse/cse.js?cx=&#39; + cx;
            var s = document.getElementsByTagName(&#39;script&#39;)[0];
            s.parentNode.insertBefore(gcse, s);
        })();
    &amp;lt;/script&amp;gt;
    &amp;lt;gcse:search queryParameterName=&amp;quot;searchString&amp;quot;&amp;gt;&amp;lt;/gcse:search&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-adding-search-box&#34;&gt;Section 2: Adding Search Box&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need to get back to the main directory of our repository.  To do this click on one of the [yourname].github.io links.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then click on _layouts directory to go into it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the default.html file to open it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;img src=&#34;/images/BloggingOnGitHub/github_edit_button.png&#34; alt=&#34;github_edit_button.png&#34; /&gt; icon to edit the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before the &amp;lt;div id=&amp;ldquo;archives&amp;rdquo;&amp;gt; tag that we added previously, add the following html snippet.&lt;/p&gt;

&lt;p&gt;{% raw %}
            &lt;div id=&#34;search&#34;&gt;
                &lt;form role=&#34;search&#34; method=&#34;get&#34; action=&#34;{{ site.baseurl }}//search/&#34;&gt;
                    &lt;input id=&#34;searchString&#34; name=&#34;searchString&#34;
                           placeholder=&#34;Be a Better Developer, etc.&#34; type=&#34;text&#34;&gt;
                    &lt;input id=&#34;searchButton&#34; name=&#34;googleSearchName&#34; type=&#34;submit&#34; value=&#34;Search&#34;&gt;
                &lt;/form&gt;
            &lt;/div&gt;
 {% endraw %}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the &amp;lt;div class=&amp;ldquo;container&amp;rdquo;&amp;gt; above the search div with the following
{% raw %}
    &lt;div class=&#34;grid&#34; id=&#34;searchBar&#34;&gt;
        &lt;div&gt;
 {% endraw %}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After the &amp;lt;div id=&amp;ldquo;archives&amp;rdquo;&amp;gt; section add another &amp;lt;/div&amp;gt; tag.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The whole section for the header should look like this
{% raw %}
    &lt;div class=&#34;grid&#34; id=&#34;searchBar&#34;&gt;
         &lt;div&gt;
             &lt;div id=&#34;search&#34;&gt;
                 &lt;form role=&#34;search&#34; method=&#34;get&#34; action=&#34;{{ site.baseurl }}//search/&#34;&gt;
                     &lt;input id=&#34;searchString&#34; name=&#34;searchString&#34;
                            placeholder=&#34;Learn Ionic, Be a Better Developer, etc.&#34; type=&#34;text&#34;&gt;
                     &lt;input id=&#34;searchButton&#34; name=&#34;googleSearchName&#34; type=&#34;button&#34; value=&#34;Search&#34;&gt;
                 &lt;/form&gt;
             &lt;/div&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         &amp;lt;div id=&amp;quot;archives&amp;quot;&amp;gt;
             browse by &amp;lt;a title=&amp;quot;The complete archive of {{ site.name }}&#39;s Blog by category&amp;quot;
                    href=&amp;quot;{{ site.baseurl }}//categoryview&amp;quot;&amp;gt;category&amp;lt;/a&amp;gt;
             or &amp;lt;a title=&amp;quot;The complete archive of {{ site.name }}&#39;s Blog by month&amp;quot;
                   href=&amp;quot;{{ site.baseurl }}//monthview&amp;quot;&amp;gt;date&amp;lt;/a&amp;gt;
         &amp;lt;/div&amp;gt;
     &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the bottom, add the commit comment, and click on the commit change button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_commit_search_html.png&#34; alt=&#34;Commit default.html changes&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next we need to update the theme so that the search box shows up in the correct spot on the page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-3-updating-the-stylesheet&#34;&gt;Section 3: Updating the Stylesheet&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need to get back to the main directory of our repository.  To do this click on one of the [yourname].github.io links.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the style.scss file to open it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;img src=&#34;/images/BloggingOnGitHub/github_edit_button.png&#34; alt=&#34;github_edit_button.png&#34; /&gt; icon to edit the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following to the bottom of the file before the two @import statements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {% raw %}
    #searchBar {
      font-size: 80%;
      padding: 0.43em 0 0.57em;

      #search {
        float: right;

        #searchString {
          width: 283px;
          border: none;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2) inset;
          padding: 0.3em 0.6em;
          background-color: #f6f5ea;
          margin-right: 0;
        }

        #searchButton {
          paddign: 0.3em 0.6em;
          background-color: #0B5485;
          border: 1px solid #f6f5ea;
          margin-left: 0;
          color: $white;
          -webkit-appearance: none;
          border-radius: 0;
        }

        #archives {
          line-height: 2;
          float: left;
          color: $black;
          text-wrap: avoid;
        }
      }
    }
    {% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the bottom, add the commit comment, and click on the commit change button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_commit_style.png&#34; alt=&#34;Commit default.html changes&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now go view your blog&amp;rsquo;s home page at http://[username].github.io/.  You should now see the search box in the header along with the &amp;ldquo;browse by category or date&amp;rdquo; links.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_browse_search_in_header.png&#34; alt=&#34;Blog&#39;s Home Page with Search and Browse By Category or Date Link in Header&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now that the search box and search pages are done, we need to setup Google to actually search our blog.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-4-configuring-google&#34;&gt;Section 4: Configuring Google&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;https://www.google.com/cse/all&#34;&gt;https://www.google.com/cse/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you do not have a Google account, you will need to create one.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you already have a Google account, please login to it now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_signin_to_cse.png&#34; alt=&#34;Signin to Google Custom Search&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once signed in, click the Add button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_add_cse_button.png&#34; alt=&#34;Add Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in your web site url.  Should be http://[username].github.io/*&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_add_cse_url.png&#34; alt=&#34;Url to Search Textbox&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give the search a name that you will remember.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_add_cse_name.png&#34; alt=&#34;Name of the Search&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the create button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_add_cse_create.png&#34; alt=&#34;Create Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You search should now be created&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_add_cse_done.png&#34; alt=&#34;Search Created&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the Get Code button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_get_cse_code.png&#34; alt=&#34;Click Get Code Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the var cx = line&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_cse_code.png&#34; alt=&#34;Copy the code&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go back to github and edit the search.html page.  Replace the var cx = line with the line that you just copied.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit the changes to Github for the search.html page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we are ready to test the search&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-5-testing-the-search&#34;&gt;Section 5: Testing the Search&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a web browser and navigate to http://[username].github.io&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type some text into the search box and click Search&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_search_term.png&#34; alt=&#34;Type in Search text and click search button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It should take you to your search page and then do a Google search&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_7_search_in_browser.png&#34; alt=&#34;Search View&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You now have the ability for Google to index and search your blog.  This will make it much easier for your reader to find older posts that they may be interested in and hopefully keep them on your blog longer.&lt;/p&gt;

&lt;p&gt;In our next lesson, I will show you how to host your http://[username].github.io blog with a custom domain name like I am doing with &lt;a href=&#34;http://digitaldrummerj.me&#34;&gt;http://digitaldrummerj.me&lt;/a&gt;&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 06: Adding Post by Date Page</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-6-adding-post-by-date/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-6-adding-post-by-date/" rel="alternate" type="text/html" title="Jekyll Part 06: Adding Post by Date Page" />
      <updated>Tue, 17 Feb 2015 00:00:00 +0000</updated>
      <published>Tue, 17 Feb 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-6-adding-post-by-date/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we will go through creating a page to show blog post by date.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;A typical blog has a way for your readers to view posts by either category or date, so that they can look at your archives without having to go through the blog post one by one and page by page.  In the last lesson, we added the post by category page.  In this lesson we will add the post by date page.&lt;/p&gt;

&lt;h2 id=&#34;section-1-creating-the-post-by-date-page&#34;&gt;Section 1: Creating the Post by Date Page&lt;/h2&gt;

&lt;p&gt;If you have been following along with the other lessons in the series, this should be familiar to you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a web browser and navigate to your [username].github.io repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the + button to add a new file&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_add_button.png&#34; alt=&#34;Github Plus Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the file archivebydate.md&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_6_archivebydate_file_name.png&#34; alt=&#34;Github Name the New File archivebydate.md&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-adding-the-metadata&#34;&gt;Section 2: Adding the Metadata&lt;/h2&gt;

&lt;p&gt;Add the following front matter to the top of the archivebycategory.md file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
---
layout: page
title: Post by Date
permalink: /monthview/
sitemap: false
---
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-3-html-to-display-post&#34;&gt;Section 3:  Html to Display Post&lt;/h2&gt;

&lt;p&gt;After the front matter, add the following code to display the post by Year and Month.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
&amp;lt;div id=&amp;quot;index&amp;quot;&amp;gt;
{% for post in site.posts %}
{% unless post.next %}
&amp;lt;h2&amp;gt;{{ post.date | date: &#39;%Y&#39; }}&amp;lt;/h2&amp;gt;
{% else %}
{% capture year %}{{ post.date | date: &#39;%Y&#39; }}{% endcapture %}
{% capture nyear %}{{ post.next.date | date: &#39;%Y&#39; }}{% endcapture %}
{% if year != nyear %}
{% if forloop.index != 1 %}&amp;lt;/ul&amp;gt;{% endif %}
  &amp;lt;h2&amp;gt;{{ post.date | date: &#39;%Y&#39; }}&amp;lt;/h2&amp;gt;
{% endif %}
{% endunless %}

{% capture month %}{{ post.date | date: &#39;%m%Y&#39; }}{% endcapture %}
{% capture nmonth %}{{ post.next.date | date: &#39;%m%Y&#39; }}{% endcapture %}
{% if month != nmonth %}
{% if forloop.index != 1 %}&amp;lt;/ul&amp;gt;{% endif %}
&amp;lt;h2&amp;gt;{{ post.date | date: &#39;%B %Y&#39; }}&amp;lt;/h2&amp;gt;&amp;lt;ul&amp;gt;
{% endif %}


{% if post.link %}
  &amp;lt;h3 class=&amp;quot;link-post&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;{{ site.baseurl }}{{ post.url }}&amp;quot; title=&amp;quot;{{ post.title }}&amp;quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;{{ post.link }}&amp;quot; target=&amp;quot;_blank&amp;quot; title=&amp;quot;{{ post.title }}&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-link&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;
{% else %}
  &amp;lt;h3&amp;gt;&amp;lt;a href=&amp;quot;{{ site.baseurl }}{{ post.url }}&amp;quot; title=&amp;quot;{{ post.title }}&amp;quot;&amp;gt;{{ post.title }}&amp;lt;p class=&amp;quot;date&amp;quot;&amp;gt;{{ post.date |  date: &amp;quot;%B %e, %Y&amp;quot; }}&amp;lt;/p&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;p&amp;gt;{{ post.excerpt | strip_html | truncate: 160 }}&amp;lt;/p&amp;gt;
{% endif %}


{% endfor %}
&amp;lt;/div&amp;gt;
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-4-viewing-the-post-by-date-page&#34;&gt;Section 4: Viewing the Post by Date Page&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After you have added the above text, scroll to the bottom of the page, add your commit note, and    click the commit button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_6_commit_archivebydate.png&#34; alt=&#34;Github Commit archivebydate.md&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To  view the category page, navigate to http://[username].github.io/monthview&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your page should look like the following but with your avatar, site name and description in the header of the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_6_archivebydate_in_browser.png&#34; alt=&#34;month view screenshot&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Right now the page is published but not linked to from anywhere.  In the next section we will add it to the header section of the page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-5-adding-browse-by-date-into-header&#34;&gt;Section 5: Adding browse by date into Header&lt;/h2&gt;

&lt;p&gt;We are going to add the &amp;ldquo;show by date&amp;rdquo; link into the header section next to the link to view by category that we added in the &lt;a href=&#34;{{ &amp;quot;blogging-on-github-part-5-adding-a-category-page&amp;quot; | prepend: site.baseurl | prepend: site.url}}&#34;&gt;previous lesson&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go into the _layouts directory by clicking on _layouts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the default.html file to open it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;img src=&#34;/images/BloggingOnGitHub/github_edit_button.png&#34; alt=&#34;github_edit_button.png&#34; /&gt; icon to edit the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the &amp;lt;div id=&amp;ldquo;archives&amp;rdquo;&amp;gt; tag that we added previously, add the following html snippet after the category view link.&lt;/p&gt;

&lt;p&gt;{% raw %}
    or &lt;a title=&#34;The complete archive of
        {{ site.name }}&#39;s Blog by month&#34;
        href=&#34;{{ site.url}}{{ site.baseurl }}//monthview&#34;&gt;date&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_6_browse_by_category_in_header_html.png&#34; alt=&#34;GitHub Header Add Html&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the bottom, add the commit comment, and click on the commit change button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_6_commit_default.png&#34; alt=&#34;Commit default.html changes&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now go view your blog&amp;rsquo;s home page at http://[username].github.io/.  You should now see the &amp;ldquo;browse by category or date&amp;rdquo; link in the header.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_6_browse_by_category_and_date_in_header.png&#34; alt=&#34;Blog&#39;s Home Page with Browse By Category or Date Link in Header&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With just a few simple steps, you were able to add the post by month page and put it in the header.  In the next lesson we will discuss how the blog theme works and how to modify it.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 05: Adding Category Page</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-5-adding-a-category-page/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-5-adding-a-category-page/" rel="alternate" type="text/html" title="Jekyll Part 05: Adding Category Page" />
      <updated>Sun, 15 Feb 2015 00:00:00 +0000</updated>
      <published>Sun, 15 Feb 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-5-adding-a-category-page/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we will go through creating a page to show blog post by category.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;A typical blog has a way for your readers to view posts by either category or date, so that they can look at your archives without having to go through the blog post one by one.  Unfortunately, the Jekyll-Now repository that we cloned your blog from, does not have these pages.  Luckily, these pages are really easy to create.&lt;/p&gt;

&lt;h2 id=&#34;section-1-creating-the-category-page&#34;&gt;Section 1: Creating the Category Page&lt;/h2&gt;

&lt;p&gt;If you have been following along with the other lessons in the series, this should be familiar to you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a web browser and navigate to your [username].github.io repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the + button to add a new file&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_add_button.png&#34; alt=&#34;Github Plus Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the file archivebycategory.md&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_5_archivebycategory_file_name.png&#34; alt=&#34;Github Name the New File archivebycategory.md&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-adding-the-metadata&#34;&gt;Section 2: Adding the Metadata&lt;/h2&gt;

&lt;p&gt;Add the following front matter to the top of the archivebycategory.md file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
    ---
    layout: page
    title: Post by Category
    permalink: /categoryview/
    sitemap: false
    ---
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-3-category-list&#34;&gt;Section 3: Category List&lt;/h2&gt;

&lt;p&gt;After the front matter, add the following code to display the categories and the number of post per category.  Each category will link to further down in the page where is will show the post for that category.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
    &amp;lt;div&amp;gt;
    {% assign categories = site.categories | sort %}
    {% for category in categories %}
     &amp;lt;span class=&amp;quot;site-tag&amp;quot;&amp;gt;
        &amp;lt;a href=&amp;quot;#{{ category | first | slugify }}&amp;quot;&amp;gt;
                {{ category[0] | replace:&#39;-&#39;, &#39; &#39; }} ({{ category | last | size }})
        &amp;lt;/a&amp;gt;
    &amp;lt;/span&amp;gt;
    {% endfor %}
    &amp;lt;/div&amp;gt;
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-4-blog-post-by-category&#34;&gt;Section 4: Blog Post by Category&lt;/h2&gt;

&lt;p&gt;Next you need to add the code to display the list of blog post by category and sorted by title&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
    &amp;lt;div id=&amp;quot;index&amp;quot;&amp;gt;

    {% for category in categories %}
    &amp;lt;a name=&amp;quot;{{ category[0] }}&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;h2&amp;gt;{{ category[0] | replace:&#39;-&#39;, &#39; &#39; }} ({{ category | last | size }}) &amp;lt;/h2&amp;gt;
    {% assign sorted_posts = site.posts | sort: &#39;title&#39; %}
    {% for post in sorted_posts %}
    {%if post.categories contains category[0]%}

      &amp;lt;h3&amp;gt;&amp;lt;a href=&amp;quot;{{ site.url }}{{ site.baseurl }}{{ post.url }}&amp;quot; title=&amp;quot;{{ post.title }}&amp;quot;&amp;gt;{{ post.title }} &amp;lt;p class=&amp;quot;date&amp;quot;&amp;gt;{{ post.date |  date: &amp;quot;%B %e, %Y&amp;quot; }}&amp;lt;/p&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;
       &amp;lt;p&amp;gt;{{ post.excerpt | strip_html | truncate: 160 }}&amp;lt;/p&amp;gt;

    {%endif%}
    {% endfor %}

    {% endfor %}
    &amp;lt;/div&amp;gt;
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-5-viewing-the-category-page&#34;&gt;Section 5: Viewing the Category Page&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After you have added the above text, scroll to the bottom of the page, add your commit note, and    click the commit button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_5_commit_archivebycategory.png&#34; alt=&#34;Github Commit archivebycategory.md&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To  view the category page, navigate to http://[username].github.io/categoryview&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your page should look like the following but with your avatar, site name and description in the header of the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_5_archivebycategory_in_browser.png&#34; alt=&#34;category view screenshot&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will notice that the &amp;ldquo;You&amp;rsquo;re up and running&amp;rdquo; post does not show up on the categories page.  This is because there is no categories front matter tag for that blog post.  Go ahead and open 2014-3-3-Hello-World.md and add the categories front matter tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;categories: [&#39;welcome&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Right now the page is published but not linked to from anywhere.  In the next section we will add it to the header section of the page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-6-adding-category-view-into-header&#34;&gt;Section 6: Adding Category View into Header&lt;/h2&gt;

&lt;p&gt;Unlike the portfolio page that we created in the last lesson, this time we are not going to add the category page into the menu.  Instead we are going to create a row below the header with a link to the page.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go into the _layouts directory by clicking on _layouts&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the default.html file to open it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;img src=&#34;/images/BloggingOnGitHub/github_edit_button.png&#34; alt=&#34;github_edit_button.png&#34; /&gt; icon to edit the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Right after the &amp;lt;/header&amp;gt; tag, add the following html snippet&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% raw %}
  &amp;lt;div class=&amp;quot;container&amp;quot; &amp;gt;
        &amp;lt;div id=&amp;quot;archives&amp;quot;&amp;gt;
            browse by &amp;lt;a title=&amp;quot;The complete archive of {{ site.name }}&#39;s Blog by category&amp;quot;
                         href=&amp;quot;{{ site.url}}{{ site.baseurl }}//categoryview&amp;quot;&amp;gt;category&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the bottom, add the commit comment, and click on the commit change button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_5_commit_default.png&#34; alt=&#34;Commit default.html changes&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now go view your blog&amp;rsquo;s home page at http://[username].github.io/.  You should now see the &amp;ldquo;browse by category&amp;rdquo; link in the header.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part_5_browse_by_category_in_header.png&#34; alt=&#34;Blog&#39;s Home Page with Browse By Category Link in Header&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With just a few simple steps, you were added the post by category page and put it in the header.  In the next lesson we will add in a new page for browsing blog post by year and month.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 04: Adding Additional Pages</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-4-creating-additional-pages/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-4-creating-additional-pages/" rel="alternate" type="text/html" title="Jekyll Part 04: Adding Additional Pages" />
      <updated>Wed, 11 Feb 2015 00:00:00 +0000</updated>
      <published>Wed, 11 Feb 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-4-creating-additional-pages/">

&lt;p&gt;Welcome the continuing series on using Jekyll. In this tutorial we will go through how to add an additional page such as the &lt;a href=&#34;/speaking&#34;&gt;speaking&lt;/a&gt; page on this blog.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;As your blog grows you are going to want to add additional information besides  just blog post.  If you start speaking at events or want to show off your portfolio or blog post by category/date, you are going to want these as separate pages.  These pages most likely will have there own look and feel as well.&lt;/p&gt;

&lt;h2 id=&#34;section-1-creating-the-file-for-the-page&#34;&gt;Section 1: Creating the file for the page&lt;/h2&gt;

&lt;p&gt;If you have been following along with the other part in this series,  the step should be familiar to you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a web browser and navigate to your [username].github.io reporepository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the + button to add a new file&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_add_button.png&#34; alt=&#34;Github Plus Button&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Name the file portfolio.md&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_name_file_portfolio.png&#34; alt=&#34;Github Name the New File portfolio.md&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to the next section to decide on the layout for the page&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-choosing-a-layout&#34;&gt;Section 2: Choosing a layout&lt;/h2&gt;

&lt;p&gt;To tell the jekyll engine what the layout of the page should be, you need to add the front matter layout tag.&lt;/p&gt;

&lt;p&gt;From  &lt;a href=&#34;/blogging-on-github-part-2-your-first-post&#34;&gt; Part 2 Creating your first blog post&lt;/a&gt;, you will remember that the front matter is the metadata about blog post but it is used in jekyll  for any page as well.  All of the front matter tags are the same as a blog post.&lt;/p&gt;

&lt;p&gt;To change the layout from being a blog post to a page, you will change the layout front matter tag to page instead of post.&lt;/p&gt;

&lt;p&gt;By default jekyll  adds files to the sitemap that search engines use to find pages on your site.  Setting  it to false will stop this page from being added.  We will remove the sitemap tag once we  are ready to share the page.&lt;/p&gt;

&lt;p&gt;In order for the page to available at [username].github.io/portfolio, you need to set the front matter permalink to /portfolio/ .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;front  matter tags&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: My Portfolio
permalink: /portfolio/
layout: page
sitemap: false 
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;section-3-adding-content&#34;&gt;Section 3: Adding content&lt;/h2&gt;

&lt;p&gt;The content is written in markdown just like blog post are.   In  &lt;a href=&#34;/blogging-on-github-part-2-your-first-post&#34;&gt; Part 2 Creating your first blog post&lt;/a&gt;, we covered the common markdown tags.&lt;/p&gt;

&lt;p&gt;For now just add some simple markdown like below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a placeholder page for my portfolio.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your page should now look like this in the editor&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_portfolio_page_markdown.png&#34; alt=&#34;Github Editor for Portfolio.md&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After you have added the above text, scroll to the bottom of the page, add your commit note, and    click the commit button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_portfolio_page_commit_change.png&#34; alt=&#34;Github Commit Portfolio.md&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;section4-previewing-page&#34;&gt;Section4: Previewing page&lt;/h2&gt;

&lt;p&gt;To  view the page navigate to http://[username].github.io/portfolio&lt;/p&gt;

&lt;p&gt;Your page should look like the following but with your avatar, site name and description in the header of the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_portfolio_view_in_browser.png&#34; alt=&#34;first page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Right now the page is published but not linked to from anywhere.&lt;/p&gt;

&lt;h2 id=&#34;section-5-adding-page-to-menu&#34;&gt;Section 5: Adding page to menu&lt;/h2&gt;

&lt;p&gt;Once  you are ready to share the page with your readers, you will want to add it to your main menu and have it indexed by search engines.&lt;/p&gt;

&lt;p&gt;To tell search engines to index the page, we need to remove the front matter tag, sitemap:false.&lt;/p&gt;

&lt;p&gt;To add it to the menu:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigate to the _layout directory in the repository by clicking on the repository title to get back to the main directory of the repository&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_navigate_to_top.png&#34; alt=&#34;Github Click on Repository Title&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on _layouts directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_click_layout.png&#34; alt=&#34;Github Click on Layout&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the default.html page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_click_default.png&#34; alt=&#34;Github Click on Default.html&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;img src=&#34;/images/BloggingOnGitHub/github_edit_button.png&#34; alt=&#34;github_edit_button.png&#34; /&gt; icon to edit the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find the main menu.  You can search for home or about to find the section&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_menu_html.png&#34; alt=&#34;Github Main Menu Html&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following line in the menu at the position you want the portfolio page link to be displayed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;/portfolio&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_menu_with_portfolio.png&#34; alt=&#34;Github Menu with Portfolio Html&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to commit the file to the repository by scrolling to the bottom of the page, adding the commit comment, and clicking on the commit button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_default_commit_changes.png&#34; alt=&#34;Github Default.html Commit changes&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now navigate to your blog and the page link should show in the main menu.  Click on the portfolio menu item and make sure it takes you to the portfolio page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_part4_menu_with_portfolio_in_browser.png&#34; alt=&#34;Github menu includes portfolio link&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With just a few steps, you were able to add a new page into your blog&amp;rsquo;s web site.  You can either continue to build out the portfolio page with the markdown needed to show off your portfolio or you can remove it from the menu until you are ready to do build it out.&lt;/p&gt;

&lt;p&gt;In the next lesson we will build on this lesson by adding in a page to show the blog post by category.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 03: Adding Commenting to Post</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-3-adding-comments/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-3-adding-comments/" rel="alternate" type="text/html" title="Jekyll Part 03: Adding Commenting to Post" />
      <updated>Sat, 07 Feb 2015 00:00:00 +0000</updated>
      <published>Sat, 07 Feb 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-3-adding-comments/">

&lt;p&gt;Welcome the continuing series on using Jekyll.  In this tutorial you will learn how to add the ability for users to comment on your blog post.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;You may be thinking that commenting isn&amp;rsquo;t really that important but it is a key feature for you to be able to interact with your readers.  Users want to have conversations about your blog post with you and to feel connected to you.   It is also a good way for you to learn from them as well.&lt;/p&gt;

&lt;p&gt;Unfortunately, out of the box Jekyll does not have this  ability.   Luckily, it is really easy to add this ability, thanks to a wonderful tool called Disqus.  Disqus is free but still full featured.&lt;/p&gt;

&lt;p&gt;We will go through the process of getting a Disqus account, configuring  the account,  configuring your blog and testing it all out.&lt;/p&gt;

&lt;h2 id=&#34;section-1-configuring-disqus&#34;&gt;Section 1:  Configuring Disqus&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open another browser window and navigate to &lt;a href=&#34;https://disqus.com/admin/signup/?utm_source=New-Site&#34;&gt;https://disqus.com/admin/signup/?utm_source=New-Site&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill out the information request and click the Finish button.  Note: That you can not change the short name value once it is created.  You can have multiple sites under the same account though with different short name values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/DisqusRegisterSite.png&#34; alt=&#34;DisqusRegisterSite.png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will be greeted with a &amp;ldquo;Choose Your Platform&amp;rdquo; screen like the follow.  Don&amp;rsquo;t worry about any of these options as we are not going to use them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/DisqusChooseAPlatform.png&#34; alt=&#34;DisqusChooseAPlatform.png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the General link on the left side of the links above the &amp;ldquo;Choose Your Platform&amp;rdquo; title.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/DisqusGeneralSettingMenuHighlight.png&#34; alt=&#34;DisqusGeneralSettingMenuHighlight.png&#34; /&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the Site Identity and make sure that the values are correct.  The WebSite Name will appear on your blog when the comments show, so make sure it is what you want it to say.  Take note of your shortname as you will need it in the next section when we config your blog to show Disqus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/DisqusGeneralSettingSiteIdentity.png&#34; alt=&#34;DisqusGeneralSettingSiteIdentity.png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the next section which should be Community Rules and match the settings to the image below.  To prevent comment spam I always set comments to have to be approved before showing on the site.  The volume on the site will be low enough for now that you will be able to easily manage approving the comments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/DisqusGeneralSettingCommunityRules.png&#34; alt=&#34;DisqusGeneralSettingCommunityRules.png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down to the next section which should be Social Platform Intergration and add your twitter account if you have one.  This will ensure that when people share comments on your blog that it includes you in the post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/DisqusGeneralSettingSocialIntegration.png&#34; alt=&#34;DisqusGeneralSettingSocialIntegration.png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the Save Button&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-configuring-your-blog&#34;&gt;Section 2: Configuring Your Blog&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open a web browser and navigate to your [username].github.io repository.&lt;/li&gt;
&lt;li&gt;Click on the _config.yml file to navigate to it&lt;/li&gt;
&lt;li&gt;Click on the &lt;img src=&#34;/images/BloggingOnGitHub/github_edit_button.png&#34; alt=&#34;github_edit_button.png&#34; /&gt; icon to edit the file&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Look for the text disqus: and put in your disqus shortname name like below.&lt;/p&gt;

&lt;p&gt;disqus: digitaldrummerj&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll to the bottom of the screen and click on the commit button.  You should put in a comment as well so that you know what changed with the file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/Github_Save_Changes.png&#34; alt=&#34;Github_Save_Changes.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;section-3-testing-it-out&#34;&gt;Section 3: Testing it out&lt;/h2&gt;

&lt;p&gt;Open up a web browser and navigate to your blog and click on the title for the blog post that we published in our last lesson.&lt;/p&gt;

&lt;p&gt;Scroll to the bottom of the post and you should see a section to add a comment like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/DisqusCommentInBlog.png&#34; alt=&#34;DisqusCommentInBlog.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Having comments is an essential part of any blog to open up the communication with your readers.  As you can see Disqus is very easy to add to your blog.&lt;/p&gt;

&lt;p&gt;In the next lesson, where you will learn how to create additional pages that are not blog post such as portfolio or about pages.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 02: Your First Post</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-2-your-first-post/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-2-your-first-post/" rel="alternate" type="text/html" title="Jekyll Part 02: Your First Post" />
      <updated>Thu, 05 Feb 2015 00:00:00 +0000</updated>
      <published>Thu, 05 Feb 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-2-your-first-post/">

&lt;p&gt;Welcome the continuing series on using Jekyll.  In this tutorial we will go through making your first blog post.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;We will go through all of the steps to create a new post, add metadata such as title/categories/tags/date, and then make it live on the site.&lt;/p&gt;

&lt;h2 id=&#34;section-1-creating-the-file&#34;&gt;Section 1: Creating the file&lt;/h2&gt;

&lt;p&gt;Thr first step is to create a new file to hold the content of the blog post.  In Jekyll all of the blog post are markdown files and are stored in the _post directory.    When you commit this file to Github, it will be compiled into a static html page.&lt;/p&gt;

&lt;p&gt;The filename is in the format of year-month-day-title-separated-by-dashes.md.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-02-17-my-first-post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead and create your file now.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To create a file open a web browser and navigate to your [username.github.io repository.&lt;/li&gt;
&lt;li&gt;Go into the _post directory and click the + icon to add a new file.&lt;/li&gt;
&lt;li&gt;Name the file yyyy-mm-dd-my-first-post.md where yyyy = 4digit year,  mm = 2 digit month, and dd = 2 digit day of montmonth.&lt;/li&gt;
&lt;li&gt;Head to the next section and fill out the metadata about the post (ie: title, date, is published, categories, etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;section-2-creating-metadata&#34;&gt;Section 2: Creating metadata&lt;/h2&gt;

&lt;p&gt;Now we need to define some information about our blog post.  All of the information such as title, is published,  categories, publish date, etc are stored at the top of the file in what is called Front Matter.&lt;/p&gt;

&lt;p&gt;To define the front matter section you have a line with 3 dashes in it and then repeat this same line to signal the end of the front matter section.&lt;/p&gt;

&lt;p&gt;Below are common metadata you will want to fill out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;layout:  is the name of the layout  from the _layouts directory.  If followed part 1 and cloned the jekyll-now repository, then the name is post.&lt;/li&gt;
&lt;li&gt;title:  the title of the blog post that will showbon the site.  Should be in quotes to avoid conflict with front matter parameter.&lt;/li&gt;
&lt;li&gt;published: true or false.  Determines  if the post shows  on the website or not.&lt;/li&gt;
&lt;li&gt;date: date of the post.  this is optional and if not defined will use date in filename.&lt;/li&gt;
&lt;li&gt;categories: list of categories.  comma delimited.  put in quotes for multi word categories.  optional but recommended.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;tags: list of tags that would be used to build a tag cloud.  optional but recommended.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sample-front-matter&#34;&gt;Sample Front Matter:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
title: Your First Post
published: false
date: 2015-02-01
categories: [blogging]
tags: [blogging]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now on to creating actual content in your post.&lt;/p&gt;

&lt;h2 id=&#34;section-3-creating-content&#34;&gt;Section 3:  Creating content&lt;/h2&gt;

&lt;p&gt;The content of the post will be written in markdown and will be directly below the front matter section .&lt;/p&gt;

&lt;p&gt;Below are common markdown tags that you will want to use.  headers, lists, bold, bullets, links and code highlighting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Common Markdown Tags&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;headers&#34;&gt;Headers&lt;/h4&gt;

&lt;p&gt;A &amp;lsquo;#&amp;rsquo; starting  a line indicates to makebitba header and the number &amp;lsquo;#&amp;rsquo; indicates  the size of the header tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#  =    h1
## = h2
and so on up the an h6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;examples&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;h1&#34;&gt;h1&lt;/h1&gt;

&lt;h2 id=&#34;h2&#34;&gt;h2&lt;/h2&gt;

&lt;h2 id=&#34;h3&#34;&gt;h3&lt;/h2&gt;

&lt;h3 id=&#34;h4&#34;&gt;h4&lt;/h3&gt;

&lt;h4 id=&#34;h5&#34;&gt;h5&lt;/h4&gt;

&lt;h4 id=&#34;h6&#34;&gt;h6&lt;/h4&gt;

&lt;h4 id=&#34;numbered-list-or-bullets&#34;&gt;Numbered list  or Bullets&lt;/h4&gt;

&lt;p&gt;For bullets: start a line with a * or -.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* sample list
* next bullet
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;sample list&lt;/li&gt;
&lt;li&gt;next bullet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For numbered list start with a 1 or the number you want to start with.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. sample ordered list
2. number 2
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;sample ordered list&lt;/li&gt;
&lt;li&gt;number 2&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;bold&#34;&gt;Bold&lt;/h4&gt;

&lt;p&gt;surround  the text you to build with 2 ** and then put 2 more after the text  to end the bold.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;**sample bold**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;sample bold&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;links&#34;&gt;Links&lt;/h4&gt;

&lt;p&gt;link to other pages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[link name display](http://myurl.com)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://myurl.com&#34;&gt;link name display&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h3&gt;

&lt;p&gt;There are 2 ways: tab the line in and it will group the text like the examples above.
or use the highlighter markup&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-csharp&amp;#34; data-lang=&amp;#34;csharp&amp;#34;&amp;gt;	
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// some c# code	
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;var&amp;lt;/span&amp;gt; a = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;#34;bad variable name&amp;#34;&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;highlighting-text-without-the-code-highlighting&#34;&gt;Highlighting text without the code highlighting&lt;/h2&gt;

&lt;p&gt;Start the line with a tab and it will automatically do it for you.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;you will get text like this if you start the line with a tab.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;further-reading-on-markdown&#34;&gt;Further Reading on Markdown&lt;/h2&gt;

&lt;p&gt;Github documentation on their markdown:  &lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;https://help.github.com/articles/github-flavored-markdown/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;section-4-saving-as-draft&#34;&gt;Section 4:  Saving as draft&lt;/h2&gt;

&lt;p&gt;Most of the time you are not going to write and publish the blog post in one sitting but you need to save your work without it showing up in the website.  This is called saving a draft and it is super simple to do.  By setting the front matter published tag to false it will tell jekyll to not publish it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
other front matter tags 
published: false
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also create a drafts folder and save the file in the but if you do that then you will need to move the file to the _post folder when you are ready to publish.&lt;/p&gt;

&lt;h2 id=&#34;section-5-publishing-post&#34;&gt;Section  5: Publishing post&lt;/h2&gt;

&lt;p&gt;Publishing a post is as simple as changing the front matter published to true and committing the change to the github repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
other front matter tags 
published: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Github will take care of the conversion from markdown to an html page.  This should happen automatically within a minute and show up on the blog home page at the top.&lt;/p&gt;

&lt;p&gt;If it doesn&amp;rsquo;t show up then check your email that you registered on github with to see if there was a jekyll compile error email.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This lesson is one of the key lessons as you need to kow how to create new blog post.  Creating new blog post is really easy with Jekyll and a little bit of markdown.  Once you learn the different markdown tags, you will be writing blog post in no time at all.&lt;/p&gt;

&lt;p&gt;See you in the next lesson, where we will discuss how to add the ability to comment on blog post.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>IIS Express - Turning on Windows Authentication</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/iis-express-windows-authentication/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/iis-express-windows-authentication/" rel="alternate" type="text/html" title="IIS Express - Turning on Windows Authentication" />
      <updated>Wed, 04 Feb 2015 20:45:35 +0000</updated>
      <published>Wed, 04 Feb 2015 20:45:35 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/iis-express-windows-authentication/">

&lt;p&gt;So I brought up a new machine and tried to run my ASP.NET web site in IIS Express that uses Windows Authentication and was greeted with the following error:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The requested page cannot be accessed because the related configuration data for the page is invalid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This configuration section cannot be used at this path. This happens when the section is locked at a parent level. Locking is either by default (overrideModeDefault=&amp;ldquo;Deny&amp;rdquo;), or set explicitly by a location tag with overrideMode=&amp;ldquo;Deny&amp;rdquo; or the legacy allowOverride=&amp;ldquo;false&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Every time I bring up a new machine I always forget to update the IIS Express setting to fix this error and have to do a google search to figure out where the IIS Express configuration is stored.  So I figured I should finally document the fix for it.&lt;/p&gt;

&lt;p&gt;The error is caused by this section in the web.config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;system.webServer&amp;gt;
    &amp;lt;security&amp;gt;
        &amp;lt;authentication&amp;gt;
            &amp;lt;windowsAuthentication enabled=&amp;quot;true&amp;quot; /&amp;gt;
            &amp;lt;anonymousAuthentication enabled=&amp;quot;false&amp;quot; /&amp;gt;         
        &amp;lt;/authentication&amp;gt;
    &amp;lt;/security&amp;gt;
&amp;lt;/system.webServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix this open up the IIS Express applicationhost.config.  This file is stored at C:\Users[your user name]\Documents\IISExpress\config\applicationhost.config&lt;/p&gt;

&lt;p&gt;Update for VS2015+: config file location is   $(solutionDir).vs\config\applicationhost.config&lt;/p&gt;

&lt;p&gt;Look for the following lines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section name=&amp;quot;windowsAuthentication&amp;quot; overrideModeDefault=&amp;quot;Deny&amp;quot; /&amp;gt;
&amp;lt;section name=&amp;quot;anonymousAuthentication&amp;quot; overrideModeDefault=&amp;quot;Deny&amp;quot; /&amp;gt;
&amp;lt;add name=&amp;quot;WindowsAuthenticationModule&amp;quot; lockItem=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;add name=&amp;quot;AnonymousAuthenticationModule&amp;quot; lockItem=&amp;quot;true&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change those lines to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section name=&amp;quot;windowsAuthentication&amp;quot; overrideModeDefault=&amp;quot;Allow&amp;quot; /&amp;gt;
&amp;lt;section name=&amp;quot;anonymousAuthentication&amp;quot; overrideModeDefault=&amp;quot;Allow&amp;quot; /&amp;gt;
&amp;lt;add name=&amp;quot;WindowsAuthenticationModule&amp;quot; lockItem=&amp;quot;false&amp;quot; /&amp;gt;
&amp;lt;add name=&amp;quot;AnonymousAuthenticationModule&amp;quot; lockItem=&amp;quot;false&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file and refresh your asp.net web page.  It may take a moment to load as it load the new configurations into IIS Express.&lt;/p&gt;
</content>
    <category term="iis" />

        
        </entry>
    
		<entry>
      <title>Jekyll Part 01: Getting Started</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-1-getting-started/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-1-getting-started/" rel="alternate" type="text/html" title="Jekyll Part 01: Getting Started" />
      <updated>Fri, 30 Jan 2015 00:00:00 +0000</updated>
      <published>Fri, 30 Jan 2015 00:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/blogging-on-github-part-1-getting-started/">

&lt;p&gt;Welcome to the first tutorial of a multi part series on blogging using Jekyll on Github.  Github has an awesome free option for hosting a blog for you and you can get a blog up and running in 10 minutes or less.  This series will cover everything that you to know to host, manage and customized a Jekyll blog that is hosted on Github.&lt;/p&gt;

&lt;h2 id=&#34;section-1-overview&#34;&gt;Section 1: Overview&lt;/h2&gt;

&lt;p&gt;Github uses the Jekyll engine which turns markdown into static Html pages.  The advantage of this is that performance is better since you are just serving up html and you don&amp;rsquo;t have to worry about hosting a database somewhere .&lt;/p&gt;

&lt;p&gt;The quickest and easiest way to get started with Jekyll is fork an existing Jekyll repository.  Forking in Git means creating a copy of the repository into your account.&lt;/p&gt;

&lt;p&gt;The repository that I used and recommend to fork is the &amp;ldquo;Jekyll Now&amp;rdquo; repository at  &lt;a href=&#34;https://github.com/barryclark/jekyll-now&#34;&gt;https://github.com/barryclark/jekyll-now&lt;/a&gt;.  The Jekyll based repository includes a lot of very useful features for a blog out of the box for you such as:  a nice looking theme, code syntax highlighter, social buttons (twitter, Facebook, Github, etc), Disqus blog commenting api, and Google analytics.&lt;/p&gt;

&lt;h2 id=&#34;section-2-forking-the-repository&#34;&gt;Section 2: Forking the Repository&lt;/h2&gt;

&lt;p&gt;Forking a repository in Github is extremely simple.  Go to &lt;a href=&#34;https://github.com/barryclark/jekyll-now&#34;&gt;https://github.com/barryclark/jekyll-now&lt;/a&gt; and click the &lt;img src=&#34;/images/BloggingOnGitHub/github_fork_button.png&#34; alt=&#34;github fork button&#34; /&gt; button.  Github will now create a fork of the repository for you into your account.&lt;/p&gt;

&lt;h2 id=&#34;section-3-renaming-the-repository&#34;&gt;Section 3: Renaming the Repository&lt;/h2&gt;

&lt;p&gt;Once you fork the repository, you will need to go into the settings for your new repository and rename it to [username].github.io.  Your blog will now be live within a few minutes at http://[username].github.io.  However, before you go look at the blog, you need to take a minute to configure a few items in the configuration file  _config.yml.&lt;/p&gt;

&lt;h3 id=&#34;getting-to-settings&#34;&gt;Getting to settings&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_settings_button.png&#34; alt=&#34;github settings&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;renaming&#34;&gt;Renaming&lt;/h3&gt;

&lt;p&gt;Finding the settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_repo_rename.png&#34; alt=&#34;github repo rename&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Update the name and click the Rename button&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/BloggingOnGitHub/github_repo_rename_done.png&#34; alt=&#34;github repo rename done&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;section-4-configuring-the-repository&#34;&gt;Section 4: Configuring the Repository&lt;/h2&gt;

&lt;p&gt;There is only 3 values that you are going to want to change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name - this is the blog title&lt;/li&gt;
&lt;li&gt;description - this is the tag line&lt;/li&gt;
&lt;li&gt;url - this is the url of the blog, will be [username].github.io.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optionally, you can also configure your social networks that show up in the footer of the site by filling in the various account names in the &amp;ldquo;footer-links&amp;rdquo; section of the _config.yml file.&lt;/p&gt;

&lt;p&gt;You can edit the _config.yml directly in Github.  Click on the file and then click the &lt;img src=&#34;/images/BloggingOnGitHub/github_edit_button.png&#34; alt=&#34;github edit file button&#34; /&gt; icon.  Once you have completed your edits, click the green commit button at the bottom of the screen.&lt;/p&gt;

&lt;h2 id=&#34;section-5-viewing-the-blog&#34;&gt;Section 5: Viewing the Blog&lt;/h2&gt;

&lt;p&gt;Now you are ready to view your new blog.  Open a browser and navigate to http://[username].github.io, replacing [username] with your actual username.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In just a few simple steps, you were able to get your blog up and running.  Through out the series of lessons, you will learn how to manage your blog, create new pages, customize the theme, and host it with a custom domain name.&lt;/p&gt;

&lt;p&gt;In the next lesson, where we create your first blog post.&lt;/p&gt;
</content>
    <category term="blogging" /><category term="jekyll" />

        
        </entry>
    
		<entry>
      <title>Ionic - Using behind a proxy server</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-behind-a-proxy/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-behind-a-proxy/" rel="alternate" type="text/html" title="Ionic - Using behind a proxy server" />
      <updated>Tue, 20 Jan 2015 20:45:35 +0000</updated>
      <published>Tue, 20 Jan 2015 20:45:35 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-behind-a-proxy/">&lt;p&gt;I ran into an issue today on the vagrant IonicBox when I tried to create a new Ionic project at work behind the firewall/proxy even with all of the configurations for npm, git, bower, and bash setup for the proxy as detailed at &lt;a href=&#34;{{&amp;quot;proxy-configurations&amp;quot; | prepend: site.baseurl | prepend: site.url}}&#34;&gt;{{&amp;ldquo;proxy-configurations&amp;rdquo; | prepend: site.baseurl | prepend: site.url}}&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, Ionic had a fix for this already.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All I had to do was put PROXY=&lt;a href=&#34;http://myserver:myport&#34;&gt;http://myserver:myport&lt;/a&gt; in front of the ionic start command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   PROXY=http://myserver:myport ionic start todo blank
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All I had to do was set the http_proxy environment variable and then run the ionic start command as I normally would.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic start todo blank
&lt;/code&gt;&lt;/pre&gt;
</content>
    <category term="proxy" /><category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Ionic - The Ionicbox and How To Use It</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionicbox-notes/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionicbox-notes/" rel="alternate" type="text/html" title="Ionic - The Ionicbox and How To Use It" />
      <updated>Sat, 17 Jan 2015 20:45:35 +0000</updated>
      <published>Sat, 17 Jan 2015 20:45:35 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionicbox-notes/">

&lt;p&gt;If you have looked at setting up the &lt;a href=&#34;http://www.ionicframework.com&#34;&gt;Ionic Framework&lt;/a&gt; or have it done it before, you know on much of a pain it can be, especially when something doesn&amp;rsquo;t work.  Luckily, Ionic offers a free virtual machine called &lt;a href=&#34;https://github.com/driftyco/ionic-box&#34;&gt;Ionicbox&lt;/a&gt; that is already configured with all of the software that you need.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites:&lt;/h2&gt;

&lt;p&gt;Before you can use &lt;a href=&#34;https://github.com/driftyco/ionic-box&#34;&gt;Ionicbox&lt;/a&gt; you need to install &lt;a href=&#34;http://www.virtualbox.org&#34;&gt;VirtualBox&lt;/a&gt; and &lt;a href=&#34;http://www.vagrantup.com&#34;&gt;Vagrant&lt;/a&gt;.  If you are on Windows and using &lt;a href=&#34;http://www.chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;, you can install both using  cinst virtualbox and cinst vagrant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.virtualbox.org&#34;&gt;VirtalBox&lt;/a&gt; is a free virtual machine program.  A virtual machine is a complete computer and operating system run from within your current operating system.  It makes it possible to run Linux on a Windows Machine, Windows on a Mac, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; is an easy way to manage virtual machines.  A full explaination is out of scope for this article.&lt;/p&gt;

&lt;h2 id=&#34;ionic-box&#34;&gt;Ionic Box&lt;/h2&gt;

&lt;p&gt;Make sure that you installed VirtualBox and Vagrant before proceeding.&lt;/p&gt;

&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open Windows Explorer and create a directory where you want to hold all of your Vagrant configuration files&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instead the directory created in step 1, create a directory called IonicBox&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In Windows Explorer, create the directory under the c drive called projects (i.e. c:\projects)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In Windows Explorer, do a shift+right click on the IonicBox directory and select Open Command Prompt&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run: vagrant init drifty/ionic-android&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open notepad&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In notepad, open the VagrantFile created in the IonicBox directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;select all of the text in the VagrantFile and remove it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the following text into the VagrantFile&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# vi: set ft=ruby :&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
 config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;drifty/ionic-android&amp;#34;&lt;/span&gt;
 config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hostname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[Replace with what you want your Host Name to be]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# No Spaced Allowed&lt;/span&gt;
 config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;boot_timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;network &lt;span style=&#34;color:#e6db74&#34;&gt;:forwarded_port&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;guest&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8100&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;network &lt;span style=&#34;color:#e6db74&#34;&gt;:forwarded_port&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;35729&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;guest&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;35729&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;synced_folder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;projects&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/vagrant/vagrant_projects&amp;#34;&lt;/span&gt;
 config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;provider &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtualbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
       vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
       vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;modifyvm&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--vram&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;128&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
       vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;modifyvm&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--usb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;on&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
       vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;usbfilter&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--target&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--vendorid&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x18d1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
       vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IonicBox&amp;#34;&lt;/span&gt;
       
       &lt;span style=&#34;color:#75715e&#34;&gt;# Need This If On Windows&lt;/span&gt;
       vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setextradata&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;so-what-do-all-of-those-options-in-the-vagrantfile-mean&#34;&gt;So what do  all of those options in the VagrantFile mean?&lt;/h2&gt;

&lt;p&gt;In the configuration we configure the video and physical memory of the virtual machine.  Since IonicBox is just a shell without a GUI, it doesn&amp;rsquo;t need a lot of resources, so we only give it 2 gigs of memory.  Now if your host system doesn&amp;rsquo;t have a lot of memory, you will need to dial this down.&lt;/p&gt;

&lt;p&gt;Ionic uses port 8100 for the web site and the live reload function use port 35729.  We forwarded these ports from IonicBox to the host machine so we can access the web server.  The following two lines do the port forwarding&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;network &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;forwarded_port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; host&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; guest&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8100&lt;/span&gt;
config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;network &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;forwarded_port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; host&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35729&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; guest&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35729&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The IonicBox is just a Linux shell with no GUI so you will want to use a feature in VirtualBox called Shared Folders to be able to edit the files from your host machine.  In our case we are using c:\projects on the host machine which is linked to ~/vagrant_projects on the IonicBox&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;synced_folder &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\\projects&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/vagrant/projects&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we set up the VirtualBox options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We don&amp;rsquo;t need the VirtualBox GUI since we are going to SSH into the machine so we can turn it off with.  Set this to true the first time, just so you can see it&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We set the Video Ram to 128 megs&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;modifyvm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--vram&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;128&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Turn on the USB drivers so that we can connect an Android device&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;modifyvm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--usb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;on&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Add a usb device filter for a Android Device&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;usbfilter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--vendorid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x18d1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;On Windows, You need to turn on Symlinks to the synced_folders.  This is needed if your Host Operating System is Windows in order node/npm to work correctly.  Remember you have to run your command prompt as an administrator for this command to work.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setextradata&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Set the system memory for the virtual machine.  If you host machine is low on memory you can reduce this down.  You must have this much memory free when the virtual machine starts up&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Number of Physical CPUs to allocate.  My machine only has 2 physical CPUs.  You can allocate more or take it down to 1&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The name to use for the virtual machine in the VirtualBox Manager UI&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IonicBox&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;starting-up-the-ionicbox-and-getting-logged-in&#34;&gt;Starting up the IonicBox and Getting logged in&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a command prompt and navigate to the IonicBox folder that contains the VagrantFile.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;red&#34;&gt;If on Windows, open the command prompt as an Administrator.&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;To open the command prompt as an administrator in Windows 8 go to the Start Menu Screen, type cmd, then ctrl+shift+click or ctrl+shift+enter&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run command below. This command will take a while the first time you run it since it has to download the vagrant box container which is about 1 gig in size.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have the vb.gui = true in your VagrantFile, the first thing you will notice when you boot up the IonicBox is that it just comes to a command prompt and it leaves you wondering now what.  Luckily, this is exactly what we want and it is very easy to manage it.  The IonicBox basically just replaces the command prompt that we would normally use for all of the Ionic commands with a linux machine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To login to the machine, use the same command prompt as previous step and run&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vagrant ssh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;if everything went successful you should be logged in&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;testing-the-ionicbox&#34;&gt;Testing the IonicBox&lt;/h2&gt;

&lt;p&gt;Now lets create our first Ionic project.&lt;/p&gt;

&lt;p&gt;On the IonicBox ssh connection:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;cd projects
ionic start firstApp tabs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd firstApp
ionic serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You now have a Ionic project in a directory called firstApp and the web server is running.&lt;/p&gt;

&lt;p&gt;Open up your web browser and navigate to &lt;a href=&#34;http://localhost:8100&#34;&gt;http://localhost:8100&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view all of the files that make up this project on your host machine under c:\projects\firstApp&lt;/p&gt;

&lt;p&gt;If you are NOT using Windows as your host operating system that we are done with configurations.  Unfortunately, if you are using Windows as your host operating system, we have one more step to get npm working correctly, so that you can download all of the dependencies for Ionic.&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;WARNING: Unless you have npm 3.0+.  This may not fix the issue with node and long file names on Windows with npm.&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;We need to setup a symbolic link for the node modules folder since windows has a length limitation when using shared folders.  A symbolic link is basically a point from one directory to another.  Windows has a directory name length limitation that we encounter when host our files through a shared folder.  Since our npm dependencies (node modules) folder doesn&amp;rsquo;t need to be checked into source control, we can move it to a directory on the IonicBox and just point to that from within our Ionic projects.&lt;/p&gt;

&lt;p&gt;On the IonicBox from the firstApp folder run the following commands:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;mkdir &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;node_modules_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Your Project&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
ln &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;node_modules_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Your Project&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; node_modules
npm install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&#34;red&#34;&gt;Remember:&lt;/font&gt;&lt;/strong&gt; If on Windows, you need to run the vagrant up command from an administrative command prompt.&lt;/p&gt;

&lt;p&gt;You may also need to manually install bower&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;sudo npm install bower &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;i-am-done-with-ionicbox-now-what&#34;&gt;I am done with IonicBox, now what?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To exit vagrant ssh session, just type exit from the command prompt that is logged into the IonicBox.  This will put you back into the original command prompt.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hibernate: from the IonicBox directory with the VagrantFile run&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vagrant suspend&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Shutdown and Turn Off: from the IonicBox directory with the VagrantFile run&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;vagrant halt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Delete the whole IonicBox Virtual Machine: from the IonicBox directory with the VagrantFile run&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-io&#34; data-lang=&#34;io&#34;&gt;      
vagrant destroy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Note that sometimes this leaves behind the directory that contained the Virtual Machine.  Before you can run vagrant up again, you will need to manually delete this directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a nice easy way to get started with ionic without having to install much onto your current machine.&lt;/p&gt;

&lt;p&gt;However, if you are going to spend a lot of time developing ionic applications, it won&amp;rsquo;t be long before you go down the route of installing everything onto your machine to do the development work.&lt;/p&gt;

&lt;p&gt;Check out my installation guides to help you out:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{{ &amp;quot;ionic-setup-osx&amp;quot; | prepend: site.baseurl | prepend: site.url }}&#34;&gt;Mac Installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{{ &amp;quot;Ionic-Setup-Windows&amp;quot; | prepend: site.baseurl | prepend: site.url }}&#34;&gt;Windows Installation&lt;/a&gt;&lt;/p&gt;
</content>
    <category term="ionic" /><category term="vagrant" /><category term="virtualbox" />

        
        </entry>
    
		<entry>
      <title>Npm, Bower, Git, and Bash Proxy Configurations</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/proxy-configurations/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/proxy-configurations/" rel="alternate" type="text/html" title="Npm, Bower, Git, and Bash Proxy Configurations" />
      <updated>Fri, 16 Jan 2015 20:00:00 +0000</updated>
      <published>Fri, 16 Jan 2015 20:00:00 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/proxy-configurations/">

&lt;p&gt;When you are using npm, bower, and git behind a proxy server you have to do a little bit of configuration.  Luckily it is super easy to do these configurations.  Almost all of the programs have command line commands to set and unset the proxy server.&lt;/p&gt;

&lt;h2 id=&#34;updates&#34;&gt;Updates:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updated 2015-Feb-01&lt;/strong&gt;: Added running source command for Bash and Ruby Gems section&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated 2015-May-07&lt;/strong&gt;: Added the Ionic Start command&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated 2015-May-08&lt;/strong&gt;: Added the Android SDK&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated 2015-Aug-03&lt;/strong&gt;: Added command lines to set proxy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updated 2015-Oct-20&lt;/strong&gt;: Added Gradle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;windows-command-prompt&#34;&gt;Windows Command Prompt&lt;/h2&gt;

&lt;h3 id=&#34;current-command-prompt-only&#34;&gt;Current Command Prompt Only&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;set http_proxy=[Your Proxy]:[Proxy Port]
set https_proxy=[Your Proxy]:[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unset-current-session&#34;&gt;Unset Current Session&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;set http_proxy=
set https_proxy=
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;globally-as-a-system-environment-variable&#34;&gt;Globally as a System Environment Variable&lt;/h3&gt;

&lt;p&gt;Run from an administrative command prompt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setx http_proxy=[Your Proxy]:[Proxy Port] /M
setx https_proxy=[Your Proxy]:[Proxy Port] /M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to close and re-open command prompt for settings to take effect&lt;/p&gt;

&lt;h3 id=&#34;globally-as-a-user-environment-variable&#34;&gt;Globally as a User Environment Variable&lt;/h3&gt;

&lt;p&gt;Run from a non-administrative command prompt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setx http_proxy=[Your Proxy]:[Proxy Port] 
setx https_proxy=[Your Proxy]:[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to close and re-open command prompt for settings to take effect&lt;/p&gt;

&lt;h3 id=&#34;unset-globally-system-environment-variable&#34;&gt;Unset Globally System Environment Variable&lt;/h3&gt;

&lt;p&gt;Run from an administrative command prompt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setx http_proxy=&amp;quot;&amp;quot; /M
setx https_proxy=&amp;quot;&amp;quot; /M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Need to close and re-open command prompt for settings to take effect&lt;/p&gt;

&lt;h3 id=&#34;unset-globally-user-environment-variable&#34;&gt;Unset Globally User Environment Variable&lt;/h3&gt;

&lt;p&gt;Run from a non-administrative command prompt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setx http_proxy=&amp;quot;&amp;quot; 
setx https_proxy=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Need to close and re-open command prompt for settings to take effect&lt;/p&gt;

&lt;h3 id=&#34;view-proxy-settings&#34;&gt;View Proxy Settings&lt;/h3&gt;

&lt;p&gt;If the commands below just echo out the text instead of the actual proxy server, it means that the proxy server is not set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo %http_proxy%
echo %https_proxy%
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;bash-shell&#34;&gt;Bash Shell&lt;/h2&gt;

&lt;p&gt;File Name: .bash_profile or .bashrc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export http_proxy=[Your Proxy]:[Proxy Port]
export https_proxy=[Your Proxy]:[Proxy Port]
export npm_config_proxy=[Your Proxy]:[Proxy Port]
export npm_config_https_proxy=[Your Proxy]:[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note:   After updated the .bash_profile or .bashrc, you should run one of the following commands to make the configuration active for the current session.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bashrc
or
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;bower&#34;&gt;Bower&lt;/h2&gt;

&lt;p&gt;There is no command line that I found for configuring bower.  Instead you need to create a .bowerrc file in the users home directory.&lt;/p&gt;

&lt;p&gt;On Windows:  %userprofile% directory.&lt;/p&gt;

&lt;p&gt;On Linux: ~/&lt;/p&gt;

&lt;h3 id=&#34;creating-bowerrc-file-on-windows&#34;&gt;Creating .bowerrc file on Windows&lt;/h3&gt;

&lt;p&gt;Windows Explorer unfortunately does not  allow you to create files without extensions but using notepad you can create a file without an extension.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Notepad&lt;/li&gt;
&lt;li&gt;Ctrl + S to save the file&lt;/li&gt;
&lt;li&gt;Navigate to the %UserProfile% directory&lt;/li&gt;
&lt;li&gt;Change the &amp;ldquo;Save as Type&amp;rdquo; to &amp;ldquo;All Files (&lt;em&gt;.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Name the file .bowerrc&lt;/li&gt;
&lt;li&gt;Click the Save button&lt;/li&gt;
&lt;li&gt;Now you can edit the file in your text editor of choice

&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;proxy-setting-in-bowerrc&#34;&gt;Proxy Setting in .bowerrc.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;proxy&amp;quot;:&amp;quot;http://[Your Proxy]:[Proxy Port]&amp;quot;,
    &amp;quot;https-proxy&amp;quot;:&amp;quot;http://[Your Proxy]:[Proxy Port]&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;

&lt;p&gt;You can also set the proxy settings below to be system wide with the &amp;ndash;system switch.&lt;/p&gt;

&lt;h3 id=&#34;set-proxy&#34;&gt;Set Proxy:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git config --add http.proxy http://[Your Proxy]:[Proxy Port]
git config --add https.proxy http://[Your Proxy]:[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unset-proxy&#34;&gt;Unset Proxy:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git config --unset http.proxy
git config --unset https.proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;view-configuration&#34;&gt;View Configuration&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Just Proxy Configs&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --get http.proxy
git config --get https.proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;All Configs&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;manually-update-gitconfig-not-recommended&#34;&gt;Manually Update .gitconfig (not recommended)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[http]
    proxy = http://[Your Proxy]:[Proxy Port]
[https]
    proxy = http://[Your Proxy]:[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;npm&#34;&gt;NPM&lt;/h2&gt;

&lt;h3 id=&#34;set-proxy-1&#34;&gt;Set Proxy:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;npm config set https-proxy http://[Your Proxy]:[Proxy Port]
npm config set proxy http://[Your Proxy]:[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unset-proxy-1&#34;&gt;Unset Proxy:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;npm config delete https-proxy
npm config delete proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;view-proxy-configurations&#34;&gt;View Proxy Configurations:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;npm config get https-proxy
npm config get proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;manually-update-npmrc-not-recommended&#34;&gt;Manually Update .npmrc (not recommended)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;proxy=http://[Your Proxy]:[Proxy Port]
https-proxy=http://[Your Proxy]:[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ruby-gem-install&#34;&gt;Ruby Gem Install&lt;/h2&gt;

&lt;p&gt;If you have set the proxy in the .bash_profile or .bashrc, then Ruby should pick it up.&lt;/p&gt;

&lt;p&gt;If you need to manually set it&lt;/p&gt;

&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;

&lt;p&gt;export http_proxy=[Your Proxy]:[Proxy Port]
    sudo gem install [your gem name]&lt;/p&gt;

&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;setx http_proxy &amp;quot;[Your Proxy Server]:[Proxy Port]&amp;quot; /M
gem install [your gem name]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ionic-start-command&#34;&gt;Ionic Start Command&lt;/h2&gt;

&lt;p&gt;In order to run the ionic start command behind a proxy, you need start the command out with the Proxy information.&lt;/p&gt;

&lt;h3 id=&#34;linux-1&#34;&gt;Linux&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;PROXY=http://[Your Proxy]:[Proxy Port] ionic start [App Name] [Template Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;windows-1&#34;&gt;Windows&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;setx http_proxy &amp;quot;[Your Proxy Server]:[Proxy Port]&amp;quot; /M
ionic start [App Name] [Template Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;android-sdk&#34;&gt;Android SDK&lt;/h2&gt;

&lt;p&gt;The android SDK uses ~/.android/androidtool.cfg file to define the proxy information.  If the file does not exist, go ahead and create it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.proxyHost=[Your Proxy]
http.proxyPort=[Proxy Port]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;gradle&#34;&gt;Gradle&lt;/h2&gt;

&lt;p&gt;When trying to build an Android project that uses Gradle, you may need to configure the proxy for it.&lt;/p&gt;

&lt;p&gt;On Windows:  %userprofile%/.gradle.properties&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemProp.http.proxyHost=[Your Proxy]
systemProp.http.proxyPort=[Proxy Port]
systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost    

systemProp.https.proxyHost=[Your Https Proxy]
systemProp.https.proxyPort=[Https Proxy Port] 
systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost
&lt;/code&gt;&lt;/pre&gt;
</content>
    <category term="proxy" /><category term="nodejs" /><category term="npm" /><category term="bash" /><category term="bower" /><category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Git Command Notes</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/git-command-notes/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/git-command-notes/" rel="alternate" type="text/html" title="Git Command Notes" />
      <updated>Wed, 14 Jan 2015 20:45:35 +0000</updated>
      <published>Wed, 14 Jan 2015 20:45:35 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/git-command-notes/">

&lt;p&gt;I am finally making myself learn the git command line instead of just using a UI so that I can actually understand what git is really doing.  Plus I have started playing a lot with the IonicBox and running a Ubuntu vagrant controlled VM for this blog and both of those are just linux shell command prompt only machines.&lt;/p&gt;

&lt;p&gt;Below are my notes on various commands so that I can stop having to Google each time I forgot one of them.&lt;/p&gt;

&lt;h2 id=&#34;caching-credentials&#34;&gt;Caching Credentials&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;To cache credentials for 1 hour.  The timeout is in seconds.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global credential.helper &#39;cache --timeout 3600&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-commands&#34;&gt;Basic Commands&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Getting code to local machine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Git terms, this is called cloning a repository and the command to use is git clone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Directory name will match repository name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone [Remote Repository Url]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Use this command if you want to name the directory different than the repository name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone [Remote Repository Url]  [Directory to Clone into]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Where did the local repository come from?&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Change the Remote Origin Url&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote set-url origin [https or ssh url]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get Latest Changes but don&amp;rsquo;t merge&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get Latest Changes and Merge&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Generate SSH Keys&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding  Key&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls -al ~/.ssh
ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;
ssh-agent -s or eval(ssh-agent) or eval $(ssh-agent)
ssh-add ~/.ssh/id_rsa
clip &amp;lt; ~/.ssh/id_rsa.pub
Go to github settings for your account
Click on SSH Keys
Click Add Key
Give it a name and paste in the key
Put in your github password
Click confirm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;To test&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should get a response like: Hi username! You&amp;rsquo;ve successfully authenticated, but GitHub does not  provide shell access.&lt;/p&gt;

&lt;p&gt;Full details at &lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys/&#34;&gt;https://help.github.com/articles/generating-ssh-keys/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See what files have changed&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Long Form: git status  
Short Form: git status -s
Show Files: git status -u or to always show git config status.showuntrackedfile=yes 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Turning a directory into a repository on the local machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Adding files to the repository&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add [file name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Adding all files in a directory except the ones in the .gitignore file&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Reverting a file that has changes not been added or staged&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout [file name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Unadding a file that has been added and not committed but leave file&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Unadding a file that has been added and not committed but delete file&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --hard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ignoring files&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create .gitignore file&lt;/li&gt;
&lt;li&gt;starter files available at &lt;a href=&#34;https://github.com/github/gitignore&#34;&gt;https://github.com/github/gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a .gitignore file for any number of languages at &lt;a href=&#34;http://gitignore.io&#34;&gt;http://gitignore.io&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Committing files to the local repository&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;Your Message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Removing Files&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm [File Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Moving Files&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mv [Old File Name] [New File Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Publishing files to the remote repository&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;merge&#34;&gt;Merge&lt;/h2&gt;

&lt;h4 id=&#34;storing-work-that-you-want-to-keep-but-not-commit&#34;&gt;Storing work that you want to keep but not commit&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Storing the work&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Seeing what work is stored&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Applying the last stash to the current code&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Applying a different stash then the last one to the current code&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash apply stash@{[Number for stash from git stash list command]}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;branching&#34;&gt;Branching&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;See Available Branch Including Remote Branches&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Creating a Branch&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch [Branch Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Switch to a branch&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout [Branch Name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Switch to last branch you were on&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Merging a branch into the master (HEAD)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;First make sure you are on the master branch: git checkout master

Then issue the merge command: git merge [branch name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;List the branches for the repository&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Note: the * in the results indicates the branch currently checked out.
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;See last commit of each branch&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -v 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;See branches already merged&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch --merged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;See branches NOT already merged&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch --no-merged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Push branch to remote repository&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin [branch name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Delete a Local branch&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -d [branch name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Deleting Remote Branch&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin --delete [branch name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;proxy-settings&#34;&gt;Proxy Settings&lt;/h2&gt;

&lt;p&gt;See Post on &lt;a href=&#34;{{&amp;quot;/proxy-configurations&amp;quot; | prepend: site.baseurl | prepend: site.url }}&#34;&gt;Proxy  Configurations&lt;/a&gt; for configuring your proxy settings with Git&lt;/p&gt;

&lt;h2 id=&#34;configurations&#34;&gt;Configurations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Listing of Configurations:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config -l
git config -l --global
git config -l --system
git config -l --local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Set Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --add [variable name] [value]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Unset Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --unset [variable name]
&lt;/code&gt;&lt;/pre&gt;
</content>
    <category term="github" /><category term="git" />

        
        </entry>
    
		<entry>
      <title>Ionic - How to setup on Windows</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-setup-windows/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-setup-windows/" rel="alternate" type="text/html" title="Ionic - How to setup on Windows" />
      <updated>Sun, 11 Jan 2015 20:45:35 +0000</updated>
      <published>Sun, 11 Jan 2015 20:45:35 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-setup-windows/">

&lt;p&gt;Updates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2016-08-13:  Added Gradle and VS Code to software installed.  Changed from JDK7 to JDK8.  Removed Ant.  Added Android SDK Apis install to Chocolatey script.  Switched suggested emulator to Visual Studio Emulator for Android.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are like me and just starting to work with the &lt;a href=&#34;http://www.ionicframework.com&#34;&gt;Ionic Framework&lt;/a&gt; and don&amp;rsquo;t already have a machine setup to do Android, iOS, Node, etc development then many of the guides out there leave out a number of steps that you need to do in order to get everything working.&lt;/p&gt;

&lt;p&gt;It is really easy to get everything working though once you know the steps.  Since I am a Windows user and love to automate work that is easily repeatable, I used  &lt;a href=&#34;http://www.chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; and &lt;a href=&#34;http://www.boxstarter.org&#34;&gt;Boxstarter&lt;/a&gt; to automate the setup for the Ionic Framework.&lt;/p&gt;

&lt;p&gt;On Windows, you will only be able to setup Android development.  Apple requires a Mac in order to do iOS development.&lt;/p&gt;

&lt;h2 id=&#34;software-to-be-installed&#34;&gt;Software to be installed&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/nodejs.install&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/gradle&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/jdk8&#34;&gt;JDK8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/android-sdk&#34;&gt;Android SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/AndroidStudio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chocolatey.org/packages/GoogleChrome&#34;&gt;Google Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Npm Modules:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cordova&#34;&gt;cordova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/gulp-cli&#34;&gt;gulp cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/bower&#34;&gt;bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/ionic&#34;&gt;ionic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/en-us/features/msft-android-emulator-vs.aspx&#34;&gt;Visual Studio Emulator for Android (Hyper-V Based)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-install-software&#34;&gt;How to install software&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Chocolatey from &lt;a href=&#34;http://www.chocolatey.org&#34;&gt;http://www.chocolatey.org&lt;/a&gt;.  Command is on the front-page of the site or below.  Open an administrative command prompt to run the command.  To open an administrative command prompt on Windows 8, go to the start menu, type cmd and then ctrl+shift+click on the cmd search result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command Prompt: @powershell -NoProfile -ExecutionPolicy unrestricted -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the &lt;a href=&#34;http://boxstarter.org&#34;&gt;BoxStarter&lt;/a&gt; Chocolatey package&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install -y BoxStarter
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Close the command prompt that you opened to install Chocolatey and BoxStarter&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the desktop there should be a BoxStarter Shell icon, double-click on that to run it.  If the icon is not on the desktop, then open up a command prompt and type BoxStarterShell.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I have setup a gist file that has all of the Chocolatey commands to run to install the rest of the software and configure it.  Run the gist file from the Boxstarter Shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-BoxStarterPackage -PackageName  https://gist.githubusercontent.com/digitaldrummerj/3fe2eb057004b6742b89/raw/3da48d349c313684077d7103547dfe79f7052617/IonicSetup  -DisableReboots
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you want to install any of the optional software you will need to fork the gist file and remove the # in front of the line for the package you want to install.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;post-install-steps&#34;&gt;Post Install Steps&lt;/h2&gt;

&lt;h3 id=&#34;configure-visual-studio-emulator-for-android&#34;&gt;Configure Visual Studio Emulator for Android&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open up the Visual Studio Emulator for Android application&lt;/li&gt;
&lt;li&gt;Find the devices that you want to download.  Any device will do.  I normally pick one of the latest ones as a starting point (Marshmellow 6.0 at the time of this writing)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;verify-that-everything-works&#34;&gt;Verify that everything works&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open a command prompt&lt;/li&gt;
&lt;li&gt;Navigate the directory where you store you development projects (I use c:\projects)&lt;/li&gt;
&lt;li&gt;From c:\projects type: ionic start todo tabs&lt;/li&gt;
&lt;li&gt;cd into c:\projects\todo  (directory was created by the ionic start command)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first test that we are going to run is to make sure that we can test the todo app that we generated in the web browser by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ionic serve --lab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start up a node based web server and the &amp;ndash;lab will tell it to launch a page that shows what the app would look like on an iOS and Android phone.  Granted the node based serve is about 80% accurate but good enough to do a majority of our testing.  Ultimately you should test on a device before releasing into the app stores.&lt;/p&gt;

&lt;p&gt;Next we are going to test our Android device setup.  The first thing we need to do is tell ionic that we want to add the Android platform to our todo app by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ionic platform add android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets up the todo app to be able to be build and deployed to an Android device.  To validate that we can build for Android, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ionic build android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing we need to verify is that we can deploy the todo app to the Visual Studio Emulator for Android.  Before we can deploy the application, we need to start up the emulator.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up the Visual Studio Emulator for Android&lt;/li&gt;
&lt;li&gt;Find the device that we downloaded&lt;/li&gt;
&lt;li&gt;Click the green arrow to start it up&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once the emulator is started, you can deploy to it by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic run android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to go create your ionic applications.&lt;/p&gt;
</content>
    <category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Ionic - Setup on OSx</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-setup-osx/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-setup-osx/" rel="alternate" type="text/html" title="Ionic - Setup on OSx" />
      <updated>Sun, 11 Jan 2015 20:45:35 +0000</updated>
      <published>Sun, 11 Jan 2015 20:45:35 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/ionic-setup-osx/">

&lt;p&gt;Updates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2016-08-13:  Added Gradle and VS Code.  Changed from JDK7 to JDK8.  Removed Ant.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are like me and just starting to work with the Ionic Framework and don’t already have a machine setup to do Android, iOS, Node, etc development then many of the guides out there leave out a number of steps that you need to do in order to get everything working.&lt;/p&gt;

&lt;p&gt;Even being a Windows user I was able to pretty easily get Ionic working on a Mac.  The only difference between the Windows setup and the OSx setup is that you can build for an iOS device on a Mac.&lt;/p&gt;

&lt;h2 id=&#34;software-to-be-installed&#34;&gt;Software to be installed&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gradle.org/current/userguide/installation.html&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;JDK8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/sdk/index.html#Other&#34;&gt;Android SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/sdk/index.html#Other&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/chrome/browser/desktop/&#34;&gt;Google Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Global Npm Modules:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cordova&#34;&gt;cordova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/gulp-cli&#34;&gt;gulp cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/bower&#34;&gt;bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/ionic&#34;&gt;ionic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/ios-sim&#34;&gt;ios-sim&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genymotion.com/&#34;&gt;Genymotion&lt;/a&gt; (Android emulator replacement)
`- XCode&lt;/li&gt;
&lt;li&gt;XCode Command Line Tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;general-install-steps&#34;&gt;General Install Steps&lt;/h2&gt;

&lt;h3 id=&#34;google-chrome&#34;&gt;Google Chrome&lt;/h3&gt;

&lt;p&gt;We need Google Chrome in order to debug our application when it is running on a device.  The device emulation and developer tools are also extremely useful to have.&lt;/p&gt;

&lt;p&gt;Download from &lt;a href=&#34;https://www.google.com/chrome/browser/desktop/&#34;&gt;https://www.google.com/chrome/browser/desktop/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;node&#34;&gt;Node&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install the LTS version of node from &lt;a href=&#34;https://www.nodejs.org&#34;&gt;https://www.nodejs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;npm-packages&#34;&gt;Npm Packages&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a terminal and run the following commands to install the Global NPM packages that we need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install -g cordova
sudo npm install -g ionic
sudo npm install -g gulp
sudo npm install -g Bower
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, we can create ionic projects and test them in a web browser.  To make sure that functionality is working:&lt;/p&gt;

&lt;h3 id=&#34;verifying-general-install&#34;&gt;Verifying General Install&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;In your open terminal, navigate to the directory where you store your development projects (I use ~/projects)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From ~/projects run:&lt;/p&gt;

&lt;p&gt;ionic start todo blank&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into todo  (directory was created by the ionic start command)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the following command to run the todo app we generated in a web browser&lt;/p&gt;

&lt;p&gt;ionic serve &amp;ndash;lab&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the next section, we will install everything needed to deploy to an Android device.&lt;/p&gt;

&lt;h2 id=&#34;android-setup-steps&#34;&gt;Android Setup Steps&lt;/h2&gt;

&lt;p&gt;In order to deploy to an Android device you need to install the Java JDK, Android Studio, and Android SDK.  We will walk through installing all of the required software setup.&lt;/p&gt;

&lt;h3 id=&#34;jdk-8&#34;&gt;JDK 8&lt;/h3&gt;

&lt;p&gt;Download from &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the install, launch a terminal and create a ~/.bash_profile if it doesn&amp;rsquo;t already exist.  You can use touch ~/.bash_profile to create the file.
- Open up either vi or nano and add the following line:&lt;/p&gt;

&lt;p&gt;export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_72.jdk/Contents/Home&lt;/p&gt;

&lt;h3 id=&#34;android-studio&#34;&gt;Android Studio&lt;/h3&gt;

&lt;p&gt;Download from &lt;a href=&#34;http://developer.android.com/sdk/index.html#Other&#34;&gt;http://developer.android.com/sdk/index.html#Other&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;android-sdk&#34;&gt;Android SDK&lt;/h3&gt;

&lt;p&gt;Download the Android SDK from [&lt;a href=&#34;http://developer.android.com/sdk/index.html#Other](http://developer.android.com/sdk/index.html#Other_&#34;&gt;http://developer.android.com/sdk/index.html#Other](http://developer.android.com/sdk/index.html#Other_&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unzip the downloaded SDK to to ~/Development&lt;/p&gt;

&lt;p&gt;Open ~/.bash_profile and add the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=${PATH}:/users/[Your UserName]/Development/android-sdk-macosx/tools:/users/[Your Username]/Development/android-sdk-macosx/platform-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the terminal type source ~/.bash_profile to load the ~/.bash_profile changes.&lt;/p&gt;

&lt;p&gt;Now we need to download the Android APIs versions that we care about.  In this case, we are only going to install the API 23 Android SDK Tools and Android SDK Build-Tools&lt;/p&gt;

&lt;p&gt;In the terminal window, type android to launch the Android SDK Manager.&lt;/p&gt;

&lt;p&gt;Install the the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tools -&amp;gt; Android SDK Tools&lt;/li&gt;
&lt;li&gt;Tools -&amp;gt; Android SDK Build-Tools&lt;/li&gt;
&lt;li&gt;Tools -&amp;gt; Android Platform-Tools&lt;/li&gt;
&lt;li&gt;API 23 -&amp;gt; SDK Platform&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;genymotion-setup&#34;&gt;Genymotion Setup&lt;/h3&gt;

&lt;p&gt;Download Genymotion from &lt;a href=&#34;https://www.genymotion.com/&#34;&gt;https://www.genymotion.com/&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Genymotion installer will also install VirtualBox if it is not already installed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once Genymotion is installed, we need to download a device.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open up the Genymotion UI and click on the Add Button.&lt;/li&gt;
&lt;li&gt;Then click the Sign in button and follow the login instructions to login with the account that you create as part of the Genymotion download.&lt;/li&gt;
&lt;li&gt;After you are logged in, select from the Android Version drop down 4.4.4&lt;/li&gt;
&lt;li&gt;From the Device model drop down select a device type&lt;/li&gt;
&lt;li&gt;Then select a device from the available list&lt;/li&gt;
&lt;li&gt;Click the Next button.&lt;/li&gt;
&lt;li&gt;Click the Next button and wait for the device to download&lt;/li&gt;
&lt;li&gt;Click the Finish button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;verify-the-android-setup&#34;&gt;Verify the Android Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open terminal&lt;/li&gt;
&lt;li&gt;Navigate to the todo app that we create as part of the general install verification.  (I used ~/projects/todo)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you need to ceate the todo app run the following from ~/projects:&lt;/p&gt;

&lt;p&gt;ionic start todo blank&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into todo  (directory was created by the ionic start command)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The todo app is now setup to be able to deploy to an Android device.  To validate that we can build for Android, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic platform add android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The todo app is now setup to be able to deploy to an Android device.  To validate that we can build for Android, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic build android
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The last thing we need to verify is that we can deploy the todo app to the Genymotion Emulator.  Before we can deploy the application, we need to start up the emulator.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the Genymotion device you downloaded and run:&lt;/p&gt;

&lt;p&gt;ionic run android&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to go create ionic applications that you deploy to an Android device.&lt;/p&gt;

&lt;h2 id=&#34;ios-setup-steps&#34;&gt;iOS Setup Steps&lt;/h2&gt;

&lt;h3 id=&#34;xcode-setup&#34;&gt;XCode Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install Xcode from app store.  This will take awhile since it is ~2 gigs in size.

&lt;ul&gt;
&lt;li&gt;Once install is completed, open xcode and accept the license&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the iOS Simulator that Ionic will use.&lt;/p&gt;

&lt;p&gt;npm install -g iOS-sim&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that if you just install NodeJs without using HomeBrew, you may have to add sudo in front of the npm install commands.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;verify-the-ios-setup&#34;&gt;Verify the iOS Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open terminal&lt;/li&gt;
&lt;li&gt;Navigate the directory where you store you development projects (I use ~/projects)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you need to generate the todo app, run the following command from the ~/projects directory&lt;/p&gt;

&lt;p&gt;ionic start todo tabs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cd into todo  (directory was created by the ionic start command)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to do is tell ionic that we want to add the iOS platform to our todo app by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic platform add iOS
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The todo app is now setup to be able to deploy to an iOS device.  To validate that we can build for iOS, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ionic build iOS
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The last thing we need to verify is that we can deploy the todo app to the iOS Simulator by running:&lt;/p&gt;

&lt;p&gt;ionic run iOS&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are now ready to go create your ionic applications.&lt;/p&gt;
</content>
    <category term="ionic" />

        
        </entry>
    
		<entry>
      <title>Ionic - Using Android x86 Virtual Machine Instead of Emulator</title>
      <id>http://digitaldrummerj.me/digitaldrummerj-hugo/android-x86-virtual-machine-instead-of-emulator/</id>
      <link href="http://digitaldrummerj.me/digitaldrummerj-hugo/android-x86-virtual-machine-instead-of-emulator/" rel="alternate" type="text/html" title="Ionic - Using Android x86 Virtual Machine Instead of Emulator" />
      <updated>Sun, 11 Jan 2015 20:45:35 +0000</updated>
      <published>Sun, 11 Jan 2015 20:45:35 +0000</published>
      <content type="html" xml:base="http://digitaldrummerj.me/digitaldrummerj-hugo/android-x86-virtual-machine-instead-of-emulator/">&lt;p&gt;The Android emulator is super super slow and I could never get it working on my development virtual machine.  I thought no problem I will just use Genymotion but due to a video card driver issue on my laptop (not Genymotion&amp;rsquo;s fault), I couldn&amp;rsquo;t use it either.  I was thinking ok I will just have to use a real device and always have it on me when I do Android development work.  This wouldn&amp;rsquo;t have been ideal though since Android development work is just a side project and who wants to carry an extra device just in case you get a few minutes to work on the project.&lt;/p&gt;

&lt;p&gt;Well then I ran across someone that mentioned that Android x86 project.  This project allows you to run Android on a pc and virtualbox machine.  So I follow the guide at  &lt;a href=&#34;http://www.android-x86.org/documents/virtualboxhowto&#34;&gt;Android x86 virtualbox install&lt;/a&gt; and was up and running in no time.&lt;/p&gt;

&lt;p&gt;Once I was up and running, the next step was to figure out how to deploy my applications to the machine just like I would with the emulator or a real device.  Turns out this is pretty easy to do with the Android Debugging Bridge (adb)&lt;/p&gt;

&lt;p&gt;Following the &lt;a href=&#34;http://www.android-x86.org/documents/debug-howto&#34;&gt;Debug How To&lt;/a&gt; guide I was able to get it working pretty quickly.&lt;/p&gt;

&lt;p&gt;As the article says, it was easiest to get it working with a bridged adapter.  Because I was using a virtualbox machine for both development and android x86, this made using NAT way more complicated then if just the Android x86 was the virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bridged Adapter Setup:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get Android Virtual Machine IP

&lt;ul&gt;
&lt;li&gt;Open Terminal (alt + F1)&lt;/li&gt;
&lt;li&gt;type netcfg&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;On the host machine (development machine)

&lt;ul&gt;
&lt;li&gt;Open command prompt&lt;/li&gt;
&lt;li&gt;type adb kill-server&lt;/li&gt;
&lt;li&gt;type adb tcpip 5555

&lt;ul&gt;
&lt;li&gt;type adb connect [Android Virtual Machine IP]:5555&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    <category term="ionic" />

        
        </entry>
    
</feed>
